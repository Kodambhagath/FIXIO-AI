2025-06-07 10:41:44,706 - semgrep.run_scan - DEBUG - semgrep version 1.2.0
2025-06-07 10:41:44,713 - semgrep.git - DEBUG - Failed to get project url from 'git ls-remote': Command failed with exit code: 128
-----
Command failed with output:
fatal: No remote configured to list refs from.


Failed to run 'git ls-remote --get-url'. Possible reasons:

- the git binary is not available
- the current working directory is not a git repository
- the baseline commit is not a parent of the current commit
    (if you are running through semgrep-app, check if you are setting `SEMGREP_BRANCH` or `SEMGREP_BASELINE_COMMIT` properly)
- the current working directory is not marked as safe
    (fix with `git config --global --add safe.directory $(pwd)`)

Try running the command yourself to debug the issue.
2025-06-07 10:41:44,714 - semgrep.config_resolver - DEBUG - Loading local config from /home/runner/workspace/.config/.semgrep/semgrep_rules.json
2025-06-07 10:41:44,716 - semgrep.config_resolver - DEBUG - Done loading local config from /home/runner/workspace/.config/.semgrep/semgrep_rules.json
2025-06-07 10:41:44,720 - semgrep.config_resolver - DEBUG - Saving rules to /tmp/semgrep-23po9bi8.rules
2025-06-07 10:41:44,937 - semgrep.semgrep_core - DEBUG - Failed to open resource semgrep-core-proprietary: [Errno 2] No such file or directory: '/tmp/_MEI1tC4jH/semgrep/bin/semgrep-core-proprietary'.
2025-06-07 10:41:45,425 - semgrep.rule_lang - DEBUG - semgrep-core validation response: valid=True
2025-06-07 10:41:45,425 - semgrep.rule_lang - DEBUG - semgrep-core validation succeeded
2025-06-07 10:41:45,425 - semgrep.rule_lang - DEBUG - RPC validation succeeded
2025-06-07 10:41:45,426 - semgrep.config_resolver - DEBUG - loaded 1 configs in 0.7118434906005859
2025-06-07 10:41:45,549 - semgrep.run_scan - VERBOSE - running 712 rules from 1 config /home/runner/workspace/.config/.semgrep/semgrep_rules.json_0
2025-06-07 10:41:45,549 - semgrep.run_scan - VERBOSE - No .semgrepignore found. Using default .semgrepignore rules. See the docs for the list of default ignores: https://semgrep.dev/docs/cli-usage/#ignore-files
2025-06-07 10:41:45,611 - semgrep.run_scan - VERBOSE - Rules:
2025-06-07 10:41:45,611 - semgrep.run_scan - VERBOSE - <SKIPPED DATA (too many entries; use --max-log-list-entries)>
2025-06-07 10:41:46,343 - semgrep.core_runner - DEBUG - Passing whole rules directly to semgrep_core
2025-06-07 10:41:46,539 - semgrep.core_runner - DEBUG - Running Semgrep engine with command:
2025-06-07 10:41:46,539 - semgrep.core_runner - DEBUG - /tmp/_MEI1tC4jH/semgrep/bin/opengrep-core -json -rules /tmp/tmpbfzt5m0y.json -j 8 -targets /tmp/tmpbz2vocyy -timeout 5 -timeout_threshold 3 -max_memory 0 -fast
2025-06-07 10:42:11,358 - semgrep.core_runner - DEBUG - --- semgrep-core stderr ---
[00.07][[34mINFO[0m]: Executed as: /tmp/_MEI1tC4jH/semgrep/bin/opengrep-core -json -rules /tmp/tmpbfzt5m0y.json -j 8 -targets /tmp/tmpbz2vocyy -timeout 5 -timeout_threshold 3 -max_memory 0 -fast
[00.07][[34mINFO[0m]: Version: 1.2.0
[00.07][[34mINFO[0m]: Parsing rules in /tmp/tmpbfzt5m0y.json
[00.76][[34mINFO[0m]: scan: processing 395 files (skipping 0), with 702 rules (skipping 0 )
[09.05][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.boto3.security.hardcoded-token file: attached_assets/DataAnalyzerPro/utils/pdf_utils.py func: recover_pdf_pages:-1]
[0m[11.97][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.boto3.security.hardcoded-token file: attached_assets/DataAnalyzerPro/utils/editor_utils.py func: edit_pdf_certificate:-1]
[0m[12.25][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.boto3.security.hardcoded-token file: attached_assets/DataAnalyzerPro/utils/editor_utils.py func: edit_image_certificate:-1]
[0m[13.47][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.boto3.security.hardcoded-token file: utils/editor_utils.py func: edit_pdf_certificate:-1]
[0m[13.75][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.boto3.security.hardcoded-token file: utils/editor_utils.py func: edit_image_certificate:-1]
[0m[15.16][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.boto3.security.hardcoded-token file: attached_assets/DataAnalyzerPro/routes/media_tools.py func: audio_to_video_process:-1]
[0m[17.06][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.flask.security.injection.tainted-url-host file: routes/editor_tools.py func: certificate_editor_process:-1]
[0m[17.96][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.flask.security.audit.directly-returned-format-string file: routes/editor_tools.py func: certificate_editor_process:-1]
[0m[18.35][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.django.security.injection.tainted-url-host file: routes/editor_tools.py func: certificate_editor_process:-1]
[0m[18.66][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.django.security.injection.tainted-sql-string file: routes/editor_tools.py func: certificate_editor_process:-1]
[0m[18.95][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.django.security.injection.raw-html-format file: routes/editor_tools.py func: certificate_editor_process:-1]
[0m[19.18][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.boto3.security.hardcoded-token file: routes/editor_tools.py func: certificate_editor_process:-1]
[0m[21.06][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.flask.security.injection.tainted-sql-string file: attached_assets/DataAnalyzerPro/routes/editor_tools.py func: certificate_editor_process:-1]
[0m[21.06][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.flask.security.injection.tainted-url-host file: routes/doc_tools.py func: ai_excel_editor_process:-1]
[0m[21.37][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.flask.security.injection.tainted-sql-string file: routes/doc_tools.py func: ai_excel_editor_process:-1]
[0m[21.68][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.flask.security.injection.tainted-url-host file: attached_assets/DataAnalyzerPro/routes/doc_tools.py func: ai_excel_editor_process:-1]
[0m[21.76][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.flask.security.injection.raw-html-format file: routes/doc_tools.py func: ai_excel_editor_process:-1]
[0m[21.95][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.django.security.injection.tainted-sql-string file: attached_assets/DataAnalyzerPro/routes/editor_tools.py func: certificate_editor_process:-1]
[0m[22.05][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.flask.security.injection.tainted-sql-string file: attached_assets/DataAnalyzerPro/routes/doc_tools.py func: ai_excel_editor_process:-1]
[0m[22.16][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.flask.security.audit.directly-returned-format-string file: routes/doc_tools.py func: ai_excel_editor_process:-1]
[0m[22.55][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.django.security.injection.tainted-url-host file: routes/doc_tools.py func: ai_excel_editor_process:-1]
[0m[22.58][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.flask.security.injection.raw-html-format file: attached_assets/DataAnalyzerPro/routes/doc_tools.py func: ai_excel_editor_process:-1]
[0m[22.65][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.boto3.security.hardcoded-token file: attached_assets/DataAnalyzerPro/routes/editor_tools.py func: certificate_editor_process:-1]
[0m[22.86][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.django.security.injection.tainted-sql-string file: routes/doc_tools.py func: ai_excel_editor_process:-1]
[0m[23.15][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.django.security.injection.raw-html-format file: routes/doc_tools.py func: ai_excel_editor_process:-1]
[0m[23.16][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.flask.security.audit.directly-returned-format-string file: attached_assets/DataAnalyzerPro/routes/doc_tools.py func: ai_excel_editor_process:-1]
[0m[23.26][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.boto3.security.hardcoded-token file: routes/pdf_tools.py func: pdf_merger_process:-1]
[0m[23.49][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.boto3.security.hardcoded-token file: routes/doc_tools.py func: ai_excel_editor_process:-1]
[0m[24.36][[33mWARNING[0m]: Fixpoint timeout while performing taint analysis [rule: config..semgrep.vendored-rules.python.boto3.security.hardcoded-token file: attached_assets/DataAnalyzerPro/routes/doc_tools.py func: ai_excel_editor_process:-1]
[0m[24.75][[34mINFO[0m]: Custom ignore pattern: None
[24.75][[34mINFO[0m]: Custom ignore pattern: None
--- end semgrep-core stderr ---
2025-06-07 10:42:11,475 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/main.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = 2f00bc35f808fbf726d2cf934edb514de6645fe5e5314147184f622328ee59e5cfa8fa1eb751f4118ab2dc94baecd2154dfec71655c5b8eb07a2e63ce9b2020e_0
2025-06-07 10:42:11,476 - semgrep.rule_match - DEBUG - match_key = ('app.run(..., "0.0.0.0", ...) app.run(..., host="0.0.0.0", ...)', PosixPath('attached_assets/DataAnalyzerPro/main.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = 52586cb4540fddd6702a43b0c5c3dd751942dd08c728282b877cfa6c4a7776536a902e1e9c73ed38bed7d67464ad0524348ff4ffb885e560f3024f762c01e1a3_0
2025-06-07 10:42:11,476 - semgrep.rule_match - DEBUG - match_key = ('app.run(..., "0.0.0.0", ...) app.run(..., host="0.0.0.0", ...)', PosixPath('attached_assets/DataAnalyzerPro/main.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = 52586cb4540fddd6702a43b0c5c3dd751942dd08c728282b877cfa6c4a7776536a902e1e9c73ed38bed7d67464ad0524348ff4ffb885e560f3024f762c01e1a3_0
2025-06-07 10:42:11,477 - semgrep.rule_match - DEBUG - match_key = ('app.run(..., "0.0.0.0", ...) app.run(..., host="0.0.0.0", ...)', PosixPath('attached_assets/DataAnalyzerPro/main.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = 52586cb4540fddd6702a43b0c5c3dd751942dd08c728282b877cfa6c4a7776536a902e1e9c73ed38bed7d67464ad0524348ff4ffb885e560f3024f762c01e1a3_0
2025-06-07 10:42:11,477 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/auth.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = affce616669bc1c38763228be3d71b87ff2f0647759a1e76f256e367df2b5fd002fd1cc5c00a02c2db521a56c7c280adcd4f02924a5ffff4787f042c307cb882_0
2025-06-07 10:42:11,478 - semgrep.rule_match - DEBUG - match_key = ('next_page = flask.request.args\n...\nflask.redirect(<... next_page ...>, ...)\n next_page = flask.request.args(...)\n...\nflask.redirect(<... next_page ...>, ...)\n next_page = flask.request.args.get(...)\n...\nflask.redirect(<... next_page ...>, ...)\n next_page = flask.request.args[...]\n...\nflask.redirect(<... next_page ...>, ...)\n flask.redirect(<... flask.request.args ...>, ...) flask.redirect(<... flask.request.args(...) ...>, ...) flask.redirect(<... flask.request.args.get(...) ...>, ...) flask.redirect(<... flask.request.args[...] ...>, ...) @auth.route(...)\ndef login(...):\n  ...\n @auth.route(...)\ndef login(...):\n  ...\n  if <... werkzeug.urls.url_parse(next_page) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/auth.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 74b547b3645899e2f586d44a24fcca7a083310647d92605fea8f587d72aaa3c0b175509c3c4c3d92f15fb8d34b76eea9c54e2bbd6fe69a248de2969e1a0e7f3b_0
2025-06-07 10:42:11,479 - semgrep.rule_match - DEBUG - match_key = ('next_page = flask.request.args\n...\nflask.redirect(<... next_page ...>, ...)\n next_page = flask.request.args(...)\n...\nflask.redirect(<... next_page ...>, ...)\n next_page = flask.request.args.get(...)\n...\nflask.redirect(<... next_page ...>, ...)\n next_page = flask.request.args[...]\n...\nflask.redirect(<... next_page ...>, ...)\n flask.redirect(<... flask.request.args ...>, ...) flask.redirect(<... flask.request.args(...) ...>, ...) flask.redirect(<... flask.request.args.get(...) ...>, ...) flask.redirect(<... flask.request.args[...] ...>, ...) @auth.route(...)\ndef login(...):\n  ...\n @auth.route(...)\ndef login(...):\n  ...\n  if <... werkzeug.urls.url_parse(next_page) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/auth.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 74b547b3645899e2f586d44a24fcca7a083310647d92605fea8f587d72aaa3c0b175509c3c4c3d92f15fb8d34b76eea9c54e2bbd6fe69a248de2969e1a0e7f3b_0
2025-06-07 10:42:11,480 - semgrep.rule_match - DEBUG - match_key = ('next_page = flask.request.args\n...\nflask.redirect(<... next_page ...>, ...)\n next_page = flask.request.args(...)\n...\nflask.redirect(<... next_page ...>, ...)\n next_page = flask.request.args.get(...)\n...\nflask.redirect(<... next_page ...>, ...)\n next_page = flask.request.args[...]\n...\nflask.redirect(<... next_page ...>, ...)\n flask.redirect(<... flask.request.args ...>, ...) flask.redirect(<... flask.request.args(...) ...>, ...) flask.redirect(<... flask.request.args.get(...) ...>, ...) flask.redirect(<... flask.request.args[...] ...>, ...) @auth.route(...)\ndef login(...):\n  ...\n @auth.route(...)\ndef login(...):\n  ...\n  if <... werkzeug.urls.url_parse(next_page) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/auth.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 74b547b3645899e2f586d44a24fcca7a083310647d92605fea8f587d72aaa3c0b175509c3c4c3d92f15fb8d34b76eea9c54e2bbd6fe69a248de2969e1a0e7f3b_0
2025-06-07 10:42:11,480 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/auth.py'), 'config..semgrep.vendored-rules.python.django.security.audit.unvalidated-password') match_id = 9eed344c1a0a26e3fb351432266d66ffcc70868031f3ab0145b17e3f7c5910e1933de37e00eb822a9997518597c7456c608e1c734af8a6be80475283522f66a8_0
2025-06-07 10:42:11,481 - semgrep.rule_match - DEBUG - match_key = ('new_user.set_password(password) UserModel().set_password(password) django.contrib.auth.password_validation.validate_password(...)\n...\n if <... django.contrib.auth.password_validation.validate_password(...) ...>:\n    ...\n try:\n  ...\n  django.contrib.auth.password_validation.validate_password(...)\n  ...\nexcept $EX as $E:\n  ...\n...\n try:\n  ...\n  django.contrib.auth.password_validation.validate_password(...)\n  ...\nexcept $EX:\n  ...\n...\n', PosixPath('attached_assets/DataAnalyzerPro/routes/auth.py'), 'config..semgrep.vendored-rules.python.django.security.audit.unvalidated-password') match_id = 267be4d97fec112f2f412742fb943bb567f84b686af44d3f40bc104752fd34ff60e235b2512bd98260f15fa04d598351065837660826d53e7d2e9e3089101fee_0
2025-06-07 10:42:11,482 - semgrep.rule_match - DEBUG - match_key = ('new_user.set_password(password) UserModel().set_password(password) django.contrib.auth.password_validation.validate_password(...)\n...\n if <... django.contrib.auth.password_validation.validate_password(...) ...>:\n    ...\n try:\n  ...\n  django.contrib.auth.password_validation.validate_password(...)\n  ...\nexcept $EX as $E:\n  ...\n...\n try:\n  ...\n  django.contrib.auth.password_validation.validate_password(...)\n  ...\nexcept $EX:\n  ...\n...\n', PosixPath('attached_assets/DataAnalyzerPro/routes/auth.py'), 'config..semgrep.vendored-rules.python.django.security.audit.unvalidated-password') match_id = 267be4d97fec112f2f412742fb943bb567f84b686af44d3f40bc104752fd34ff60e235b2512bd98260f15fa04d598351065837660826d53e7d2e9e3089101fee_0
2025-06-07 10:42:11,482 - semgrep.rule_match - DEBUG - match_key = ('new_user.set_password(password) UserModel().set_password(password) django.contrib.auth.password_validation.validate_password(...)\n...\n if <... django.contrib.auth.password_validation.validate_password(...) ...>:\n    ...\n try:\n  ...\n  django.contrib.auth.password_validation.validate_password(...)\n  ...\nexcept $EX as $E:\n  ...\n...\n try:\n  ...\n  django.contrib.auth.password_validation.validate_password(...)\n  ...\nexcept $EX:\n  ...\n...\n', PosixPath('attached_assets/DataAnalyzerPro/routes/auth.py'), 'config..semgrep.vendored-rules.python.django.security.audit.unvalidated-password') match_id = 267be4d97fec112f2f412742fb943bb567f84b686af44d3f40bc104752fd34ff60e235b2512bd98260f15fa04d598351065837660826d53e7d2e9e3089101fee_0
2025-06-07 10:42:11,483 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b101294b16143f46d42f1fb0f5a3458ca1c14961be28642fff46f49f2999c9a072ed6b63dd74a32b7988e0389975e0962620fb28576936dc0fa3ce15d5661e27_0
2025-06-07 10:42:11,484 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d9f3a5904237473c847b6aa15b1882a2e297304673b9177374a599f80cae96ced40cbc8258bb832bb900426daa1fe6c8cc70c414abd6e40897114698b704ae64_0
2025-06-07 10:42:11,484 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d9f3a5904237473c847b6aa15b1882a2e297304673b9177374a599f80cae96ced40cbc8258bb832bb900426daa1fe6c8cc70c414abd6e40897114698b704ae64_0
2025-06-07 10:42:11,485 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d9f3a5904237473c847b6aa15b1882a2e297304673b9177374a599f80cae96ced40cbc8258bb832bb900426daa1fe6c8cc70c414abd6e40897114698b704ae64_0
2025-06-07 10:42:11,486 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b101294b16143f46d42f1fb0f5a3458ca1c14961be28642fff46f49f2999c9a072ed6b63dd74a32b7988e0389975e0962620fb28576936dc0fa3ce15d5661e27_0
2025-06-07 10:42:11,486 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d9f3a5904237473c847b6aa15b1882a2e297304673b9177374a599f80cae96ced40cbc8258bb832bb900426daa1fe6c8cc70c414abd6e40897114698b704ae64_0
2025-06-07 10:42:11,487 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d9f3a5904237473c847b6aa15b1882a2e297304673b9177374a599f80cae96ced40cbc8258bb832bb900426daa1fe6c8cc70c414abd6e40897114698b704ae64_0
2025-06-07 10:42:11,487 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d9f3a5904237473c847b6aa15b1882a2e297304673b9177374a599f80cae96ced40cbc8258bb832bb900426daa1fe6c8cc70c414abd6e40897114698b704ae64_1
2025-06-07 10:42:11,488 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b101294b16143f46d42f1fb0f5a3458ca1c14961be28642fff46f49f2999c9a072ed6b63dd74a32b7988e0389975e0962620fb28576936dc0fa3ce15d5661e27_0
2025-06-07 10:42:11,489 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d9f3a5904237473c847b6aa15b1882a2e297304673b9177374a599f80cae96ced40cbc8258bb832bb900426daa1fe6c8cc70c414abd6e40897114698b704ae64_0
2025-06-07 10:42:11,489 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d9f3a5904237473c847b6aa15b1882a2e297304673b9177374a599f80cae96ced40cbc8258bb832bb900426daa1fe6c8cc70c414abd6e40897114698b704ae64_0
2025-06-07 10:42:11,490 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d9f3a5904237473c847b6aa15b1882a2e297304673b9177374a599f80cae96ced40cbc8258bb832bb900426daa1fe6c8cc70c414abd6e40897114698b704ae64_2
2025-06-07 10:42:11,491 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b101294b16143f46d42f1fb0f5a3458ca1c14961be28642fff46f49f2999c9a072ed6b63dd74a32b7988e0389975e0962620fb28576936dc0fa3ce15d5661e27_0
2025-06-07 10:42:11,491 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d9f3a5904237473c847b6aa15b1882a2e297304673b9177374a599f80cae96ced40cbc8258bb832bb900426daa1fe6c8cc70c414abd6e40897114698b704ae64_0
2025-06-07 10:42:11,492 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d9f3a5904237473c847b6aa15b1882a2e297304673b9177374a599f80cae96ced40cbc8258bb832bb900426daa1fe6c8cc70c414abd6e40897114698b704ae64_0
2025-06-07 10:42:11,493 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d9f3a5904237473c847b6aa15b1882a2e297304673b9177374a599f80cae96ced40cbc8258bb832bb900426daa1fe6c8cc70c414abd6e40897114698b704ae64_3
2025-06-07 10:42:11,493 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b101294b16143f46d42f1fb0f5a3458ca1c14961be28642fff46f49f2999c9a072ed6b63dd74a32b7988e0389975e0962620fb28576936dc0fa3ce15d5661e27_0
2025-06-07 10:42:11,494 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d9f3a5904237473c847b6aa15b1882a2e297304673b9177374a599f80cae96ced40cbc8258bb832bb900426daa1fe6c8cc70c414abd6e40897114698b704ae64_0
2025-06-07 10:42:11,495 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d9f3a5904237473c847b6aa15b1882a2e297304673b9177374a599f80cae96ced40cbc8258bb832bb900426daa1fe6c8cc70c414abd6e40897114698b704ae64_0
2025-06-07 10:42:11,495 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d9f3a5904237473c847b6aa15b1882a2e297304673b9177374a599f80cae96ced40cbc8258bb832bb900426daa1fe6c8cc70c414abd6e40897114698b704ae64_4
2025-06-07 10:42:11,496 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b101294b16143f46d42f1fb0f5a3458ca1c14961be28642fff46f49f2999c9a072ed6b63dd74a32b7988e0389975e0962620fb28576936dc0fa3ce15d5661e27_0
2025-06-07 10:42:11,497 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b8dbb43b283845e85b670de13941b027136c7c5aee6d88b4348493f21b2189db860b035a630d8352d53ff4764529fe1e62d2ef202a54b22ea301f85f367ed008_0
2025-06-07 10:42:11,503 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b8dbb43b283845e85b670de13941b027136c7c5aee6d88b4348493f21b2189db860b035a630d8352d53ff4764529fe1e62d2ef202a54b22ea301f85f367ed008_0
2025-06-07 10:42:11,504 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b8dbb43b283845e85b670de13941b027136c7c5aee6d88b4348493f21b2189db860b035a630d8352d53ff4764529fe1e62d2ef202a54b22ea301f85f367ed008_0
2025-06-07 10:42:11,504 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b101294b16143f46d42f1fb0f5a3458ca1c14961be28642fff46f49f2999c9a072ed6b63dd74a32b7988e0389975e0962620fb28576936dc0fa3ce15d5661e27_0
2025-06-07 10:42:11,505 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b8dbb43b283845e85b670de13941b027136c7c5aee6d88b4348493f21b2189db860b035a630d8352d53ff4764529fe1e62d2ef202a54b22ea301f85f367ed008_0
2025-06-07 10:42:11,506 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b8dbb43b283845e85b670de13941b027136c7c5aee6d88b4348493f21b2189db860b035a630d8352d53ff4764529fe1e62d2ef202a54b22ea301f85f367ed008_0
2025-06-07 10:42:11,506 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b8dbb43b283845e85b670de13941b027136c7c5aee6d88b4348493f21b2189db860b035a630d8352d53ff4764529fe1e62d2ef202a54b22ea301f85f367ed008_1
2025-06-07 10:42:11,507 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b101294b16143f46d42f1fb0f5a3458ca1c14961be28642fff46f49f2999c9a072ed6b63dd74a32b7988e0389975e0962620fb28576936dc0fa3ce15d5661e27_0
2025-06-07 10:42:11,507 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b8dbb43b283845e85b670de13941b027136c7c5aee6d88b4348493f21b2189db860b035a630d8352d53ff4764529fe1e62d2ef202a54b22ea301f85f367ed008_0
2025-06-07 10:42:11,508 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b8dbb43b283845e85b670de13941b027136c7c5aee6d88b4348493f21b2189db860b035a630d8352d53ff4764529fe1e62d2ef202a54b22ea301f85f367ed008_0
2025-06-07 10:42:11,508 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b8dbb43b283845e85b670de13941b027136c7c5aee6d88b4348493f21b2189db860b035a630d8352d53ff4764529fe1e62d2ef202a54b22ea301f85f367ed008_2
2025-06-07 10:42:11,509 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b101294b16143f46d42f1fb0f5a3458ca1c14961be28642fff46f49f2999c9a072ed6b63dd74a32b7988e0389975e0962620fb28576936dc0fa3ce15d5661e27_0
2025-06-07 10:42:11,509 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b8dbb43b283845e85b670de13941b027136c7c5aee6d88b4348493f21b2189db860b035a630d8352d53ff4764529fe1e62d2ef202a54b22ea301f85f367ed008_0
2025-06-07 10:42:11,510 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b8dbb43b283845e85b670de13941b027136c7c5aee6d88b4348493f21b2189db860b035a630d8352d53ff4764529fe1e62d2ef202a54b22ea301f85f367ed008_0
2025-06-07 10:42:11,510 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b8dbb43b283845e85b670de13941b027136c7c5aee6d88b4348493f21b2189db860b035a630d8352d53ff4764529fe1e62d2ef202a54b22ea301f85f367ed008_3
2025-06-07 10:42:11,511 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b101294b16143f46d42f1fb0f5a3458ca1c14961be28642fff46f49f2999c9a072ed6b63dd74a32b7988e0389975e0962620fb28576936dc0fa3ce15d5661e27_0
2025-06-07 10:42:11,511 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b8dbb43b283845e85b670de13941b027136c7c5aee6d88b4348493f21b2189db860b035a630d8352d53ff4764529fe1e62d2ef202a54b22ea301f85f367ed008_0
2025-06-07 10:42:11,512 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b8dbb43b283845e85b670de13941b027136c7c5aee6d88b4348493f21b2189db860b035a630d8352d53ff4764529fe1e62d2ef202a54b22ea301f85f367ed008_0
2025-06-07 10:42:11,512 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b8dbb43b283845e85b670de13941b027136c7c5aee6d88b4348493f21b2189db860b035a630d8352d53ff4764529fe1e62d2ef202a54b22ea301f85f367ed008_4
2025-06-07 10:42:11,513 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d4b2773197524004369dcd2c97960e7b38ab1d8bc3707d772dde09732281193643a0aa55b0efb997bfd630a8a20b8ae863a48ae2820955375e778d38cc1b70a1_0
2025-06-07 10:42:11,513 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 9b90a9859532b4b3ecf2e797b9d340a6117f27588a7ada15ae2b20f6dbca0f194b494f768b876b24edb803acc9dfbd8a1173dc92c4a0169d99c5a9ed5b63abda_0
2025-06-07 10:42:11,514 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 9b90a9859532b4b3ecf2e797b9d340a6117f27588a7ada15ae2b20f6dbca0f194b494f768b876b24edb803acc9dfbd8a1173dc92c4a0169d99c5a9ed5b63abda_0
2025-06-07 10:42:11,514 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 9b90a9859532b4b3ecf2e797b9d340a6117f27588a7ada15ae2b20f6dbca0f194b494f768b876b24edb803acc9dfbd8a1173dc92c4a0169d99c5a9ed5b63abda_0
2025-06-07 10:42:11,515 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d4b2773197524004369dcd2c97960e7b38ab1d8bc3707d772dde09732281193643a0aa55b0efb997bfd630a8a20b8ae863a48ae2820955375e778d38cc1b70a1_0
2025-06-07 10:42:11,515 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 9b90a9859532b4b3ecf2e797b9d340a6117f27588a7ada15ae2b20f6dbca0f194b494f768b876b24edb803acc9dfbd8a1173dc92c4a0169d99c5a9ed5b63abda_0
2025-06-07 10:42:11,516 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 9b90a9859532b4b3ecf2e797b9d340a6117f27588a7ada15ae2b20f6dbca0f194b494f768b876b24edb803acc9dfbd8a1173dc92c4a0169d99c5a9ed5b63abda_0
2025-06-07 10:42:11,516 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 9b90a9859532b4b3ecf2e797b9d340a6117f27588a7ada15ae2b20f6dbca0f194b494f768b876b24edb803acc9dfbd8a1173dc92c4a0169d99c5a9ed5b63abda_1
2025-06-07 10:42:11,517 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d4b2773197524004369dcd2c97960e7b38ab1d8bc3707d772dde09732281193643a0aa55b0efb997bfd630a8a20b8ae863a48ae2820955375e778d38cc1b70a1_0
2025-06-07 10:42:11,517 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 9b90a9859532b4b3ecf2e797b9d340a6117f27588a7ada15ae2b20f6dbca0f194b494f768b876b24edb803acc9dfbd8a1173dc92c4a0169d99c5a9ed5b63abda_0
2025-06-07 10:42:11,517 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 9b90a9859532b4b3ecf2e797b9d340a6117f27588a7ada15ae2b20f6dbca0f194b494f768b876b24edb803acc9dfbd8a1173dc92c4a0169d99c5a9ed5b63abda_0
2025-06-07 10:42:11,518 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 9b90a9859532b4b3ecf2e797b9d340a6117f27588a7ada15ae2b20f6dbca0f194b494f768b876b24edb803acc9dfbd8a1173dc92c4a0169d99c5a9ed5b63abda_2
2025-06-07 10:42:11,518 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d4b2773197524004369dcd2c97960e7b38ab1d8bc3707d772dde09732281193643a0aa55b0efb997bfd630a8a20b8ae863a48ae2820955375e778d38cc1b70a1_0
2025-06-07 10:42:11,519 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 9b90a9859532b4b3ecf2e797b9d340a6117f27588a7ada15ae2b20f6dbca0f194b494f768b876b24edb803acc9dfbd8a1173dc92c4a0169d99c5a9ed5b63abda_0
2025-06-07 10:42:11,519 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 9b90a9859532b4b3ecf2e797b9d340a6117f27588a7ada15ae2b20f6dbca0f194b494f768b876b24edb803acc9dfbd8a1173dc92c4a0169d99c5a9ed5b63abda_0
2025-06-07 10:42:11,520 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 9b90a9859532b4b3ecf2e797b9d340a6117f27588a7ada15ae2b20f6dbca0f194b494f768b876b24edb803acc9dfbd8a1173dc92c4a0169d99c5a9ed5b63abda_3
2025-06-07 10:42:11,520 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d4b2773197524004369dcd2c97960e7b38ab1d8bc3707d772dde09732281193643a0aa55b0efb997bfd630a8a20b8ae863a48ae2820955375e778d38cc1b70a1_0
2025-06-07 10:42:11,521 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 9b90a9859532b4b3ecf2e797b9d340a6117f27588a7ada15ae2b20f6dbca0f194b494f768b876b24edb803acc9dfbd8a1173dc92c4a0169d99c5a9ed5b63abda_0
2025-06-07 10:42:11,521 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 9b90a9859532b4b3ecf2e797b9d340a6117f27588a7ada15ae2b20f6dbca0f194b494f768b876b24edb803acc9dfbd8a1173dc92c4a0169d99c5a9ed5b63abda_0
2025-06-07 10:42:11,522 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 9b90a9859532b4b3ecf2e797b9d340a6117f27588a7ada15ae2b20f6dbca0f194b494f768b876b24edb803acc9dfbd8a1173dc92c4a0169d99c5a9ed5b63abda_4
2025-06-07 10:42:11,522 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d4b2773197524004369dcd2c97960e7b38ab1d8bc3707d772dde09732281193643a0aa55b0efb997bfd630a8a20b8ae863a48ae2820955375e778d38cc1b70a1_0
2025-06-07 10:42:11,522 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 9b90a9859532b4b3ecf2e797b9d340a6117f27588a7ada15ae2b20f6dbca0f194b494f768b876b24edb803acc9dfbd8a1173dc92c4a0169d99c5a9ed5b63abda_0
2025-06-07 10:42:11,523 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 9b90a9859532b4b3ecf2e797b9d340a6117f27588a7ada15ae2b20f6dbca0f194b494f768b876b24edb803acc9dfbd8a1173dc92c4a0169d99c5a9ed5b63abda_0
2025-06-07 10:42:11,524 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 9b90a9859532b4b3ecf2e797b9d340a6117f27588a7ada15ae2b20f6dbca0f194b494f768b876b24edb803acc9dfbd8a1173dc92c4a0169d99c5a9ed5b63abda_5
2025-06-07 10:42:11,524 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = f5ca308d88598e3fac5d60fa320585917951d9169662a5b42dbafc16333b272d9c65f3a1050e13f7660a83aa4059a3bf5f20c0ed03531e2e9f68aa240dc661fa_0
2025-06-07 10:42:11,525 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = edbf25763591c593de16a40be1af4f9e3f0c64d284fcb930f2d5b735a621c1076d9099cc74add56a57021eaa65e02048b555bd51685bdb736d979c4970869ac6_0
2025-06-07 10:42:11,525 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = edbf25763591c593de16a40be1af4f9e3f0c64d284fcb930f2d5b735a621c1076d9099cc74add56a57021eaa65e02048b555bd51685bdb736d979c4970869ac6_0
2025-06-07 10:42:11,525 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = edbf25763591c593de16a40be1af4f9e3f0c64d284fcb930f2d5b735a621c1076d9099cc74add56a57021eaa65e02048b555bd51685bdb736d979c4970869ac6_0
2025-06-07 10:42:11,526 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = f5ca308d88598e3fac5d60fa320585917951d9169662a5b42dbafc16333b272d9c65f3a1050e13f7660a83aa4059a3bf5f20c0ed03531e2e9f68aa240dc661fa_0
2025-06-07 10:42:11,526 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = edbf25763591c593de16a40be1af4f9e3f0c64d284fcb930f2d5b735a621c1076d9099cc74add56a57021eaa65e02048b555bd51685bdb736d979c4970869ac6_0
2025-06-07 10:42:11,527 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = edbf25763591c593de16a40be1af4f9e3f0c64d284fcb930f2d5b735a621c1076d9099cc74add56a57021eaa65e02048b555bd51685bdb736d979c4970869ac6_0
2025-06-07 10:42:11,527 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = edbf25763591c593de16a40be1af4f9e3f0c64d284fcb930f2d5b735a621c1076d9099cc74add56a57021eaa65e02048b555bd51685bdb736d979c4970869ac6_1
2025-06-07 10:42:11,528 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = f5ca308d88598e3fac5d60fa320585917951d9169662a5b42dbafc16333b272d9c65f3a1050e13f7660a83aa4059a3bf5f20c0ed03531e2e9f68aa240dc661fa_0
2025-06-07 10:42:11,528 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = edbf25763591c593de16a40be1af4f9e3f0c64d284fcb930f2d5b735a621c1076d9099cc74add56a57021eaa65e02048b555bd51685bdb736d979c4970869ac6_0
2025-06-07 10:42:11,529 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = edbf25763591c593de16a40be1af4f9e3f0c64d284fcb930f2d5b735a621c1076d9099cc74add56a57021eaa65e02048b555bd51685bdb736d979c4970869ac6_0
2025-06-07 10:42:11,529 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = edbf25763591c593de16a40be1af4f9e3f0c64d284fcb930f2d5b735a621c1076d9099cc74add56a57021eaa65e02048b555bd51685bdb736d979c4970869ac6_2
2025-06-07 10:42:11,530 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = f5ca308d88598e3fac5d60fa320585917951d9169662a5b42dbafc16333b272d9c65f3a1050e13f7660a83aa4059a3bf5f20c0ed03531e2e9f68aa240dc661fa_0
2025-06-07 10:42:11,530 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = edbf25763591c593de16a40be1af4f9e3f0c64d284fcb930f2d5b735a621c1076d9099cc74add56a57021eaa65e02048b555bd51685bdb736d979c4970869ac6_0
2025-06-07 10:42:11,530 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = edbf25763591c593de16a40be1af4f9e3f0c64d284fcb930f2d5b735a621c1076d9099cc74add56a57021eaa65e02048b555bd51685bdb736d979c4970869ac6_0
2025-06-07 10:42:11,531 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = edbf25763591c593de16a40be1af4f9e3f0c64d284fcb930f2d5b735a621c1076d9099cc74add56a57021eaa65e02048b555bd51685bdb736d979c4970869ac6_3
2025-06-07 10:42:11,531 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = f5ca308d88598e3fac5d60fa320585917951d9169662a5b42dbafc16333b272d9c65f3a1050e13f7660a83aa4059a3bf5f20c0ed03531e2e9f68aa240dc661fa_0
2025-06-07 10:42:11,532 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = edbf25763591c593de16a40be1af4f9e3f0c64d284fcb930f2d5b735a621c1076d9099cc74add56a57021eaa65e02048b555bd51685bdb736d979c4970869ac6_0
2025-06-07 10:42:11,532 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = edbf25763591c593de16a40be1af4f9e3f0c64d284fcb930f2d5b735a621c1076d9099cc74add56a57021eaa65e02048b555bd51685bdb736d979c4970869ac6_0
2025-06-07 10:42:11,533 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = edbf25763591c593de16a40be1af4f9e3f0c64d284fcb930f2d5b735a621c1076d9099cc74add56a57021eaa65e02048b555bd51685bdb736d979c4970869ac6_4
2025-06-07 10:42:11,534 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = f5ca308d88598e3fac5d60fa320585917951d9169662a5b42dbafc16333b272d9c65f3a1050e13f7660a83aa4059a3bf5f20c0ed03531e2e9f68aa240dc661fa_0
2025-06-07 10:42:11,534 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c6ac4876b265f047a16c1ff3d720cc4b0963211d7379b7f0383a46d08c4f3fcf58b1d21167ff8a11a1cff9b307d6e3434f7237d82746ea9c0477f40ba655b23a_0
2025-06-07 10:42:11,535 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c6ac4876b265f047a16c1ff3d720cc4b0963211d7379b7f0383a46d08c4f3fcf58b1d21167ff8a11a1cff9b307d6e3434f7237d82746ea9c0477f40ba655b23a_0
2025-06-07 10:42:11,535 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c6ac4876b265f047a16c1ff3d720cc4b0963211d7379b7f0383a46d08c4f3fcf58b1d21167ff8a11a1cff9b307d6e3434f7237d82746ea9c0477f40ba655b23a_0
2025-06-07 10:42:11,536 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = f5ca308d88598e3fac5d60fa320585917951d9169662a5b42dbafc16333b272d9c65f3a1050e13f7660a83aa4059a3bf5f20c0ed03531e2e9f68aa240dc661fa_0
2025-06-07 10:42:11,536 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c6ac4876b265f047a16c1ff3d720cc4b0963211d7379b7f0383a46d08c4f3fcf58b1d21167ff8a11a1cff9b307d6e3434f7237d82746ea9c0477f40ba655b23a_0
2025-06-07 10:42:11,537 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c6ac4876b265f047a16c1ff3d720cc4b0963211d7379b7f0383a46d08c4f3fcf58b1d21167ff8a11a1cff9b307d6e3434f7237d82746ea9c0477f40ba655b23a_0
2025-06-07 10:42:11,537 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c6ac4876b265f047a16c1ff3d720cc4b0963211d7379b7f0383a46d08c4f3fcf58b1d21167ff8a11a1cff9b307d6e3434f7237d82746ea9c0477f40ba655b23a_1
2025-06-07 10:42:11,538 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = f5ca308d88598e3fac5d60fa320585917951d9169662a5b42dbafc16333b272d9c65f3a1050e13f7660a83aa4059a3bf5f20c0ed03531e2e9f68aa240dc661fa_0
2025-06-07 10:42:11,538 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c6ac4876b265f047a16c1ff3d720cc4b0963211d7379b7f0383a46d08c4f3fcf58b1d21167ff8a11a1cff9b307d6e3434f7237d82746ea9c0477f40ba655b23a_0
2025-06-07 10:42:11,538 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c6ac4876b265f047a16c1ff3d720cc4b0963211d7379b7f0383a46d08c4f3fcf58b1d21167ff8a11a1cff9b307d6e3434f7237d82746ea9c0477f40ba655b23a_0
2025-06-07 10:42:11,539 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c6ac4876b265f047a16c1ff3d720cc4b0963211d7379b7f0383a46d08c4f3fcf58b1d21167ff8a11a1cff9b307d6e3434f7237d82746ea9c0477f40ba655b23a_2
2025-06-07 10:42:11,539 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = f5ca308d88598e3fac5d60fa320585917951d9169662a5b42dbafc16333b272d9c65f3a1050e13f7660a83aa4059a3bf5f20c0ed03531e2e9f68aa240dc661fa_0
2025-06-07 10:42:11,539 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c6ac4876b265f047a16c1ff3d720cc4b0963211d7379b7f0383a46d08c4f3fcf58b1d21167ff8a11a1cff9b307d6e3434f7237d82746ea9c0477f40ba655b23a_0
2025-06-07 10:42:11,540 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c6ac4876b265f047a16c1ff3d720cc4b0963211d7379b7f0383a46d08c4f3fcf58b1d21167ff8a11a1cff9b307d6e3434f7237d82746ea9c0477f40ba655b23a_0
2025-06-07 10:42:11,540 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c6ac4876b265f047a16c1ff3d720cc4b0963211d7379b7f0383a46d08c4f3fcf58b1d21167ff8a11a1cff9b307d6e3434f7237d82746ea9c0477f40ba655b23a_3
2025-06-07 10:42:11,541 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = f5ca308d88598e3fac5d60fa320585917951d9169662a5b42dbafc16333b272d9c65f3a1050e13f7660a83aa4059a3bf5f20c0ed03531e2e9f68aa240dc661fa_0
2025-06-07 10:42:11,541 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c6ac4876b265f047a16c1ff3d720cc4b0963211d7379b7f0383a46d08c4f3fcf58b1d21167ff8a11a1cff9b307d6e3434f7237d82746ea9c0477f40ba655b23a_0
2025-06-07 10:42:11,542 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c6ac4876b265f047a16c1ff3d720cc4b0963211d7379b7f0383a46d08c4f3fcf58b1d21167ff8a11a1cff9b307d6e3434f7237d82746ea9c0477f40ba655b23a_0
2025-06-07 10:42:11,542 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c6ac4876b265f047a16c1ff3d720cc4b0963211d7379b7f0383a46d08c4f3fcf58b1d21167ff8a11a1cff9b307d6e3434f7237d82746ea9c0477f40ba655b23a_4
2025-06-07 10:42:11,543 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = f5ca308d88598e3fac5d60fa320585917951d9169662a5b42dbafc16333b272d9c65f3a1050e13f7660a83aa4059a3bf5f20c0ed03531e2e9f68aa240dc661fa_0
2025-06-07 10:42:11,543 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = ccae1e0fb921626710dbb6723a7c27e131a7d2061c77bd26a04088b1f2fdb534ef4c6ff539809d0b9c41bc7a9322ad5a6dc28c356f3cf6c417e7239f28a26385_0
2025-06-07 10:42:11,544 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = ccae1e0fb921626710dbb6723a7c27e131a7d2061c77bd26a04088b1f2fdb534ef4c6ff539809d0b9c41bc7a9322ad5a6dc28c356f3cf6c417e7239f28a26385_0
2025-06-07 10:42:11,544 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = ccae1e0fb921626710dbb6723a7c27e131a7d2061c77bd26a04088b1f2fdb534ef4c6ff539809d0b9c41bc7a9322ad5a6dc28c356f3cf6c417e7239f28a26385_0
2025-06-07 10:42:11,545 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = f5ca308d88598e3fac5d60fa320585917951d9169662a5b42dbafc16333b272d9c65f3a1050e13f7660a83aa4059a3bf5f20c0ed03531e2e9f68aa240dc661fa_0
2025-06-07 10:42:11,545 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = ccae1e0fb921626710dbb6723a7c27e131a7d2061c77bd26a04088b1f2fdb534ef4c6ff539809d0b9c41bc7a9322ad5a6dc28c356f3cf6c417e7239f28a26385_0
2025-06-07 10:42:11,546 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = ccae1e0fb921626710dbb6723a7c27e131a7d2061c77bd26a04088b1f2fdb534ef4c6ff539809d0b9c41bc7a9322ad5a6dc28c356f3cf6c417e7239f28a26385_0
2025-06-07 10:42:11,546 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = ccae1e0fb921626710dbb6723a7c27e131a7d2061c77bd26a04088b1f2fdb534ef4c6ff539809d0b9c41bc7a9322ad5a6dc28c356f3cf6c417e7239f28a26385_1
2025-06-07 10:42:11,547 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = f5ca308d88598e3fac5d60fa320585917951d9169662a5b42dbafc16333b272d9c65f3a1050e13f7660a83aa4059a3bf5f20c0ed03531e2e9f68aa240dc661fa_0
2025-06-07 10:42:11,547 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = ccae1e0fb921626710dbb6723a7c27e131a7d2061c77bd26a04088b1f2fdb534ef4c6ff539809d0b9c41bc7a9322ad5a6dc28c356f3cf6c417e7239f28a26385_0
2025-06-07 10:42:11,548 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = ccae1e0fb921626710dbb6723a7c27e131a7d2061c77bd26a04088b1f2fdb534ef4c6ff539809d0b9c41bc7a9322ad5a6dc28c356f3cf6c417e7239f28a26385_0
2025-06-07 10:42:11,548 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = ccae1e0fb921626710dbb6723a7c27e131a7d2061c77bd26a04088b1f2fdb534ef4c6ff539809d0b9c41bc7a9322ad5a6dc28c356f3cf6c417e7239f28a26385_2
2025-06-07 10:42:11,549 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = f5ca308d88598e3fac5d60fa320585917951d9169662a5b42dbafc16333b272d9c65f3a1050e13f7660a83aa4059a3bf5f20c0ed03531e2e9f68aa240dc661fa_0
2025-06-07 10:42:11,549 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = ccae1e0fb921626710dbb6723a7c27e131a7d2061c77bd26a04088b1f2fdb534ef4c6ff539809d0b9c41bc7a9322ad5a6dc28c356f3cf6c417e7239f28a26385_0
2025-06-07 10:42:11,549 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = ccae1e0fb921626710dbb6723a7c27e131a7d2061c77bd26a04088b1f2fdb534ef4c6ff539809d0b9c41bc7a9322ad5a6dc28c356f3cf6c417e7239f28a26385_0
2025-06-07 10:42:11,550 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = ccae1e0fb921626710dbb6723a7c27e131a7d2061c77bd26a04088b1f2fdb534ef4c6ff539809d0b9c41bc7a9322ad5a6dc28c356f3cf6c417e7239f28a26385_3
2025-06-07 10:42:11,550 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = af1a82f87e93363dce253c1d383684a092d18d0202d09f2d1940e96261c2e808adae9892b3320d504bcb61cbf3f33e95db1b048d173c09c99fe7180147181e6b_0
2025-06-07 10:42:11,551 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 3cf2b138855c2bd1566c77940710309c90b858fd36e954989b1c1cbc52a3b4c87c05f2d8b2c2ce1288b8c851e5f792c5e6fcd8dedaa4ecc0dc6658a2ad3ebeb6_0
2025-06-07 10:42:11,551 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 3cf2b138855c2bd1566c77940710309c90b858fd36e954989b1c1cbc52a3b4c87c05f2d8b2c2ce1288b8c851e5f792c5e6fcd8dedaa4ecc0dc6658a2ad3ebeb6_0
2025-06-07 10:42:11,552 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 3cf2b138855c2bd1566c77940710309c90b858fd36e954989b1c1cbc52a3b4c87c05f2d8b2c2ce1288b8c851e5f792c5e6fcd8dedaa4ecc0dc6658a2ad3ebeb6_0
2025-06-07 10:42:11,552 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = af1a82f87e93363dce253c1d383684a092d18d0202d09f2d1940e96261c2e808adae9892b3320d504bcb61cbf3f33e95db1b048d173c09c99fe7180147181e6b_0
2025-06-07 10:42:11,552 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 3cf2b138855c2bd1566c77940710309c90b858fd36e954989b1c1cbc52a3b4c87c05f2d8b2c2ce1288b8c851e5f792c5e6fcd8dedaa4ecc0dc6658a2ad3ebeb6_0
2025-06-07 10:42:11,553 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 3cf2b138855c2bd1566c77940710309c90b858fd36e954989b1c1cbc52a3b4c87c05f2d8b2c2ce1288b8c851e5f792c5e6fcd8dedaa4ecc0dc6658a2ad3ebeb6_0
2025-06-07 10:42:11,553 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 3cf2b138855c2bd1566c77940710309c90b858fd36e954989b1c1cbc52a3b4c87c05f2d8b2c2ce1288b8c851e5f792c5e6fcd8dedaa4ecc0dc6658a2ad3ebeb6_1
2025-06-07 10:42:11,554 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = af1a82f87e93363dce253c1d383684a092d18d0202d09f2d1940e96261c2e808adae9892b3320d504bcb61cbf3f33e95db1b048d173c09c99fe7180147181e6b_0
2025-06-07 10:42:11,554 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 3cf2b138855c2bd1566c77940710309c90b858fd36e954989b1c1cbc52a3b4c87c05f2d8b2c2ce1288b8c851e5f792c5e6fcd8dedaa4ecc0dc6658a2ad3ebeb6_0
2025-06-07 10:42:11,554 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 3cf2b138855c2bd1566c77940710309c90b858fd36e954989b1c1cbc52a3b4c87c05f2d8b2c2ce1288b8c851e5f792c5e6fcd8dedaa4ecc0dc6658a2ad3ebeb6_0
2025-06-07 10:42:11,555 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 3cf2b138855c2bd1566c77940710309c90b858fd36e954989b1c1cbc52a3b4c87c05f2d8b2c2ce1288b8c851e5f792c5e6fcd8dedaa4ecc0dc6658a2ad3ebeb6_2
2025-06-07 10:42:11,556 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = af1a82f87e93363dce253c1d383684a092d18d0202d09f2d1940e96261c2e808adae9892b3320d504bcb61cbf3f33e95db1b048d173c09c99fe7180147181e6b_0
2025-06-07 10:42:11,556 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 3cf2b138855c2bd1566c77940710309c90b858fd36e954989b1c1cbc52a3b4c87c05f2d8b2c2ce1288b8c851e5f792c5e6fcd8dedaa4ecc0dc6658a2ad3ebeb6_0
2025-06-07 10:42:11,557 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 3cf2b138855c2bd1566c77940710309c90b858fd36e954989b1c1cbc52a3b4c87c05f2d8b2c2ce1288b8c851e5f792c5e6fcd8dedaa4ecc0dc6658a2ad3ebeb6_0
2025-06-07 10:42:11,557 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 3cf2b138855c2bd1566c77940710309c90b858fd36e954989b1c1cbc52a3b4c87c05f2d8b2c2ce1288b8c851e5f792c5e6fcd8dedaa4ecc0dc6658a2ad3ebeb6_3
2025-06-07 10:42:11,558 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = af1a82f87e93363dce253c1d383684a092d18d0202d09f2d1940e96261c2e808adae9892b3320d504bcb61cbf3f33e95db1b048d173c09c99fe7180147181e6b_0
2025-06-07 10:42:11,558 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 3cf2b138855c2bd1566c77940710309c90b858fd36e954989b1c1cbc52a3b4c87c05f2d8b2c2ce1288b8c851e5f792c5e6fcd8dedaa4ecc0dc6658a2ad3ebeb6_0
2025-06-07 10:42:11,559 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 3cf2b138855c2bd1566c77940710309c90b858fd36e954989b1c1cbc52a3b4c87c05f2d8b2c2ce1288b8c851e5f792c5e6fcd8dedaa4ecc0dc6658a2ad3ebeb6_0
2025-06-07 10:42:11,559 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 3cf2b138855c2bd1566c77940710309c90b858fd36e954989b1c1cbc52a3b4c87c05f2d8b2c2ce1288b8c851e5f792c5e6fcd8dedaa4ecc0dc6658a2ad3ebeb6_4
2025-06-07 10:42:11,560 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c273160395f5d7bc2aadef43f2a528519c12dbe9834ffadc6e3c017fa98f996e53ca7649f81ae860b639e7fb9b50279a44401bf3d5ea0618f50584830708938e_0
2025-06-07 10:42:11,560 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = fbe035660b4b26b65b6b3bc55b020736aa4ee7a9f94f7cb82a7c639ed5efdbc88bf90dd23aace6a24f081cbfd4a0376e31c543ce7320d98c38ad0258db3e020a_0
2025-06-07 10:42:11,561 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = fbe035660b4b26b65b6b3bc55b020736aa4ee7a9f94f7cb82a7c639ed5efdbc88bf90dd23aace6a24f081cbfd4a0376e31c543ce7320d98c38ad0258db3e020a_0
2025-06-07 10:42:11,561 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = fbe035660b4b26b65b6b3bc55b020736aa4ee7a9f94f7cb82a7c639ed5efdbc88bf90dd23aace6a24f081cbfd4a0376e31c543ce7320d98c38ad0258db3e020a_0
2025-06-07 10:42:11,561 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c273160395f5d7bc2aadef43f2a528519c12dbe9834ffadc6e3c017fa98f996e53ca7649f81ae860b639e7fb9b50279a44401bf3d5ea0618f50584830708938e_0
2025-06-07 10:42:11,562 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = fbe035660b4b26b65b6b3bc55b020736aa4ee7a9f94f7cb82a7c639ed5efdbc88bf90dd23aace6a24f081cbfd4a0376e31c543ce7320d98c38ad0258db3e020a_0
2025-06-07 10:42:11,562 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = fbe035660b4b26b65b6b3bc55b020736aa4ee7a9f94f7cb82a7c639ed5efdbc88bf90dd23aace6a24f081cbfd4a0376e31c543ce7320d98c38ad0258db3e020a_0
2025-06-07 10:42:11,563 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = fbe035660b4b26b65b6b3bc55b020736aa4ee7a9f94f7cb82a7c639ed5efdbc88bf90dd23aace6a24f081cbfd4a0376e31c543ce7320d98c38ad0258db3e020a_1
2025-06-07 10:42:11,563 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c273160395f5d7bc2aadef43f2a528519c12dbe9834ffadc6e3c017fa98f996e53ca7649f81ae860b639e7fb9b50279a44401bf3d5ea0618f50584830708938e_0
2025-06-07 10:42:11,564 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = fbe035660b4b26b65b6b3bc55b020736aa4ee7a9f94f7cb82a7c639ed5efdbc88bf90dd23aace6a24f081cbfd4a0376e31c543ce7320d98c38ad0258db3e020a_0
2025-06-07 10:42:11,564 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = fbe035660b4b26b65b6b3bc55b020736aa4ee7a9f94f7cb82a7c639ed5efdbc88bf90dd23aace6a24f081cbfd4a0376e31c543ce7320d98c38ad0258db3e020a_0
2025-06-07 10:42:11,565 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = fbe035660b4b26b65b6b3bc55b020736aa4ee7a9f94f7cb82a7c639ed5efdbc88bf90dd23aace6a24f081cbfd4a0376e31c543ce7320d98c38ad0258db3e020a_2
2025-06-07 10:42:11,565 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c273160395f5d7bc2aadef43f2a528519c12dbe9834ffadc6e3c017fa98f996e53ca7649f81ae860b639e7fb9b50279a44401bf3d5ea0618f50584830708938e_0
2025-06-07 10:42:11,565 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = fbe035660b4b26b65b6b3bc55b020736aa4ee7a9f94f7cb82a7c639ed5efdbc88bf90dd23aace6a24f081cbfd4a0376e31c543ce7320d98c38ad0258db3e020a_0
2025-06-07 10:42:11,566 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = fbe035660b4b26b65b6b3bc55b020736aa4ee7a9f94f7cb82a7c639ed5efdbc88bf90dd23aace6a24f081cbfd4a0376e31c543ce7320d98c38ad0258db3e020a_0
2025-06-07 10:42:11,566 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = fbe035660b4b26b65b6b3bc55b020736aa4ee7a9f94f7cb82a7c639ed5efdbc88bf90dd23aace6a24f081cbfd4a0376e31c543ce7320d98c38ad0258db3e020a_3
2025-06-07 10:42:11,567 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c273160395f5d7bc2aadef43f2a528519c12dbe9834ffadc6e3c017fa98f996e53ca7649f81ae860b639e7fb9b50279a44401bf3d5ea0618f50584830708938e_0
2025-06-07 10:42:11,567 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = fbe035660b4b26b65b6b3bc55b020736aa4ee7a9f94f7cb82a7c639ed5efdbc88bf90dd23aace6a24f081cbfd4a0376e31c543ce7320d98c38ad0258db3e020a_0
2025-06-07 10:42:11,568 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = fbe035660b4b26b65b6b3bc55b020736aa4ee7a9f94f7cb82a7c639ed5efdbc88bf90dd23aace6a24f081cbfd4a0376e31c543ce7320d98c38ad0258db3e020a_0
2025-06-07 10:42:11,568 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = fbe035660b4b26b65b6b3bc55b020736aa4ee7a9f94f7cb82a7c639ed5efdbc88bf90dd23aace6a24f081cbfd4a0376e31c543ce7320d98c38ad0258db3e020a_4
2025-06-07 10:42:11,568 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c273160395f5d7bc2aadef43f2a528519c12dbe9834ffadc6e3c017fa98f996e53ca7649f81ae860b639e7fb9b50279a44401bf3d5ea0618f50584830708938e_0
2025-06-07 10:42:11,569 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = ee0832718da8938cf3dd1a181a453772f64d74a3b4b9f8dbbcc07f7cb3091ff74f509e2762178e436f0f63484def9cc53f1d500fdbd75acd51ad1796cc6d7bd7_0
2025-06-07 10:42:11,569 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = ee0832718da8938cf3dd1a181a453772f64d74a3b4b9f8dbbcc07f7cb3091ff74f509e2762178e436f0f63484def9cc53f1d500fdbd75acd51ad1796cc6d7bd7_0
2025-06-07 10:42:11,570 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = ee0832718da8938cf3dd1a181a453772f64d74a3b4b9f8dbbcc07f7cb3091ff74f509e2762178e436f0f63484def9cc53f1d500fdbd75acd51ad1796cc6d7bd7_0
2025-06-07 10:42:11,570 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c273160395f5d7bc2aadef43f2a528519c12dbe9834ffadc6e3c017fa98f996e53ca7649f81ae860b639e7fb9b50279a44401bf3d5ea0618f50584830708938e_0
2025-06-07 10:42:11,571 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = ee0832718da8938cf3dd1a181a453772f64d74a3b4b9f8dbbcc07f7cb3091ff74f509e2762178e436f0f63484def9cc53f1d500fdbd75acd51ad1796cc6d7bd7_0
2025-06-07 10:42:11,571 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = ee0832718da8938cf3dd1a181a453772f64d74a3b4b9f8dbbcc07f7cb3091ff74f509e2762178e436f0f63484def9cc53f1d500fdbd75acd51ad1796cc6d7bd7_0
2025-06-07 10:42:11,572 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = ee0832718da8938cf3dd1a181a453772f64d74a3b4b9f8dbbcc07f7cb3091ff74f509e2762178e436f0f63484def9cc53f1d500fdbd75acd51ad1796cc6d7bd7_1
2025-06-07 10:42:11,572 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c273160395f5d7bc2aadef43f2a528519c12dbe9834ffadc6e3c017fa98f996e53ca7649f81ae860b639e7fb9b50279a44401bf3d5ea0618f50584830708938e_0
2025-06-07 10:42:11,573 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = ee0832718da8938cf3dd1a181a453772f64d74a3b4b9f8dbbcc07f7cb3091ff74f509e2762178e436f0f63484def9cc53f1d500fdbd75acd51ad1796cc6d7bd7_0
2025-06-07 10:42:11,573 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = ee0832718da8938cf3dd1a181a453772f64d74a3b4b9f8dbbcc07f7cb3091ff74f509e2762178e436f0f63484def9cc53f1d500fdbd75acd51ad1796cc6d7bd7_0
2025-06-07 10:42:11,574 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = ee0832718da8938cf3dd1a181a453772f64d74a3b4b9f8dbbcc07f7cb3091ff74f509e2762178e436f0f63484def9cc53f1d500fdbd75acd51ad1796cc6d7bd7_2
2025-06-07 10:42:11,574 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c273160395f5d7bc2aadef43f2a528519c12dbe9834ffadc6e3c017fa98f996e53ca7649f81ae860b639e7fb9b50279a44401bf3d5ea0618f50584830708938e_0
2025-06-07 10:42:11,576 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = ee0832718da8938cf3dd1a181a453772f64d74a3b4b9f8dbbcc07f7cb3091ff74f509e2762178e436f0f63484def9cc53f1d500fdbd75acd51ad1796cc6d7bd7_0
2025-06-07 10:42:11,576 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = ee0832718da8938cf3dd1a181a453772f64d74a3b4b9f8dbbcc07f7cb3091ff74f509e2762178e436f0f63484def9cc53f1d500fdbd75acd51ad1796cc6d7bd7_0
2025-06-07 10:42:11,577 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = ee0832718da8938cf3dd1a181a453772f64d74a3b4b9f8dbbcc07f7cb3091ff74f509e2762178e436f0f63484def9cc53f1d500fdbd75acd51ad1796cc6d7bd7_3
2025-06-07 10:42:11,577 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c273160395f5d7bc2aadef43f2a528519c12dbe9834ffadc6e3c017fa98f996e53ca7649f81ae860b639e7fb9b50279a44401bf3d5ea0618f50584830708938e_0
2025-06-07 10:42:11,578 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 87b8234d343f432a6be12d12c1065f1939baaaa980ee7c96afd59c219c25977c7c697dce063395cc1b6b21ec37a31cbf851342565745ebd619493d8edfd79d98_0
2025-06-07 10:42:11,578 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 87b8234d343f432a6be12d12c1065f1939baaaa980ee7c96afd59c219c25977c7c697dce063395cc1b6b21ec37a31cbf851342565745ebd619493d8edfd79d98_0
2025-06-07 10:42:11,579 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 87b8234d343f432a6be12d12c1065f1939baaaa980ee7c96afd59c219c25977c7c697dce063395cc1b6b21ec37a31cbf851342565745ebd619493d8edfd79d98_0
2025-06-07 10:42:11,579 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c273160395f5d7bc2aadef43f2a528519c12dbe9834ffadc6e3c017fa98f996e53ca7649f81ae860b639e7fb9b50279a44401bf3d5ea0618f50584830708938e_0
2025-06-07 10:42:11,580 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 87b8234d343f432a6be12d12c1065f1939baaaa980ee7c96afd59c219c25977c7c697dce063395cc1b6b21ec37a31cbf851342565745ebd619493d8edfd79d98_0
2025-06-07 10:42:11,580 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 87b8234d343f432a6be12d12c1065f1939baaaa980ee7c96afd59c219c25977c7c697dce063395cc1b6b21ec37a31cbf851342565745ebd619493d8edfd79d98_0
2025-06-07 10:42:11,581 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 87b8234d343f432a6be12d12c1065f1939baaaa980ee7c96afd59c219c25977c7c697dce063395cc1b6b21ec37a31cbf851342565745ebd619493d8edfd79d98_1
2025-06-07 10:42:11,581 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c273160395f5d7bc2aadef43f2a528519c12dbe9834ffadc6e3c017fa98f996e53ca7649f81ae860b639e7fb9b50279a44401bf3d5ea0618f50584830708938e_0
2025-06-07 10:42:11,582 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 87b8234d343f432a6be12d12c1065f1939baaaa980ee7c96afd59c219c25977c7c697dce063395cc1b6b21ec37a31cbf851342565745ebd619493d8edfd79d98_0
2025-06-07 10:42:11,582 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 87b8234d343f432a6be12d12c1065f1939baaaa980ee7c96afd59c219c25977c7c697dce063395cc1b6b21ec37a31cbf851342565745ebd619493d8edfd79d98_0
2025-06-07 10:42:11,583 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 87b8234d343f432a6be12d12c1065f1939baaaa980ee7c96afd59c219c25977c7c697dce063395cc1b6b21ec37a31cbf851342565745ebd619493d8edfd79d98_2
2025-06-07 10:42:11,583 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c273160395f5d7bc2aadef43f2a528519c12dbe9834ffadc6e3c017fa98f996e53ca7649f81ae860b639e7fb9b50279a44401bf3d5ea0618f50584830708938e_0
2025-06-07 10:42:11,583 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 87b8234d343f432a6be12d12c1065f1939baaaa980ee7c96afd59c219c25977c7c697dce063395cc1b6b21ec37a31cbf851342565745ebd619493d8edfd79d98_0
2025-06-07 10:42:11,584 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 87b8234d343f432a6be12d12c1065f1939baaaa980ee7c96afd59c219c25977c7c697dce063395cc1b6b21ec37a31cbf851342565745ebd619493d8edfd79d98_0
2025-06-07 10:42:11,585 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 87b8234d343f432a6be12d12c1065f1939baaaa980ee7c96afd59c219c25977c7c697dce063395cc1b6b21ec37a31cbf851342565745ebd619493d8edfd79d98_3
2025-06-07 10:42:11,585 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c273160395f5d7bc2aadef43f2a528519c12dbe9834ffadc6e3c017fa98f996e53ca7649f81ae860b639e7fb9b50279a44401bf3d5ea0618f50584830708938e_0
2025-06-07 10:42:11,586 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 87b8234d343f432a6be12d12c1065f1939baaaa980ee7c96afd59c219c25977c7c697dce063395cc1b6b21ec37a31cbf851342565745ebd619493d8edfd79d98_0
2025-06-07 10:42:11,586 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 87b8234d343f432a6be12d12c1065f1939baaaa980ee7c96afd59c219c25977c7c697dce063395cc1b6b21ec37a31cbf851342565745ebd619493d8edfd79d98_0
2025-06-07 10:42:11,587 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 87b8234d343f432a6be12d12c1065f1939baaaa980ee7c96afd59c219c25977c7c697dce063395cc1b6b21ec37a31cbf851342565745ebd619493d8edfd79d98_4
2025-06-07 10:42:11,587 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 40bf3b67d76bce4477c840d9fd482e8b89259be12c530e68486b6025b39aaf7ff08620460dbeee3d3b7df15f617c5f0fdd4139aca296589b4bcbff236e85f5db_0
2025-06-07 10:42:11,588 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 5a0b228ae555b263e3f4274f46ba35291948c7c8700707010ded0e5285c8272c2655f59f2d9c1ae53036155f39463f6455c53a0b04760567862894feb0312924_0
2025-06-07 10:42:11,588 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 5a0b228ae555b263e3f4274f46ba35291948c7c8700707010ded0e5285c8272c2655f59f2d9c1ae53036155f39463f6455c53a0b04760567862894feb0312924_0
2025-06-07 10:42:11,588 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 5a0b228ae555b263e3f4274f46ba35291948c7c8700707010ded0e5285c8272c2655f59f2d9c1ae53036155f39463f6455c53a0b04760567862894feb0312924_0
2025-06-07 10:42:11,589 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 40bf3b67d76bce4477c840d9fd482e8b89259be12c530e68486b6025b39aaf7ff08620460dbeee3d3b7df15f617c5f0fdd4139aca296589b4bcbff236e85f5db_0
2025-06-07 10:42:11,589 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 5a0b228ae555b263e3f4274f46ba35291948c7c8700707010ded0e5285c8272c2655f59f2d9c1ae53036155f39463f6455c53a0b04760567862894feb0312924_0
2025-06-07 10:42:11,590 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 5a0b228ae555b263e3f4274f46ba35291948c7c8700707010ded0e5285c8272c2655f59f2d9c1ae53036155f39463f6455c53a0b04760567862894feb0312924_0
2025-06-07 10:42:11,590 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 5a0b228ae555b263e3f4274f46ba35291948c7c8700707010ded0e5285c8272c2655f59f2d9c1ae53036155f39463f6455c53a0b04760567862894feb0312924_1
2025-06-07 10:42:11,590 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 40bf3b67d76bce4477c840d9fd482e8b89259be12c530e68486b6025b39aaf7ff08620460dbeee3d3b7df15f617c5f0fdd4139aca296589b4bcbff236e85f5db_0
2025-06-07 10:42:11,591 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 5a0b228ae555b263e3f4274f46ba35291948c7c8700707010ded0e5285c8272c2655f59f2d9c1ae53036155f39463f6455c53a0b04760567862894feb0312924_0
2025-06-07 10:42:11,591 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 5a0b228ae555b263e3f4274f46ba35291948c7c8700707010ded0e5285c8272c2655f59f2d9c1ae53036155f39463f6455c53a0b04760567862894feb0312924_0
2025-06-07 10:42:11,592 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 5a0b228ae555b263e3f4274f46ba35291948c7c8700707010ded0e5285c8272c2655f59f2d9c1ae53036155f39463f6455c53a0b04760567862894feb0312924_2
2025-06-07 10:42:11,592 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 40bf3b67d76bce4477c840d9fd482e8b89259be12c530e68486b6025b39aaf7ff08620460dbeee3d3b7df15f617c5f0fdd4139aca296589b4bcbff236e85f5db_0
2025-06-07 10:42:11,593 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 5a0b228ae555b263e3f4274f46ba35291948c7c8700707010ded0e5285c8272c2655f59f2d9c1ae53036155f39463f6455c53a0b04760567862894feb0312924_0
2025-06-07 10:42:11,593 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 5a0b228ae555b263e3f4274f46ba35291948c7c8700707010ded0e5285c8272c2655f59f2d9c1ae53036155f39463f6455c53a0b04760567862894feb0312924_0
2025-06-07 10:42:11,594 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 5a0b228ae555b263e3f4274f46ba35291948c7c8700707010ded0e5285c8272c2655f59f2d9c1ae53036155f39463f6455c53a0b04760567862894feb0312924_3
2025-06-07 10:42:11,594 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 40bf3b67d76bce4477c840d9fd482e8b89259be12c530e68486b6025b39aaf7ff08620460dbeee3d3b7df15f617c5f0fdd4139aca296589b4bcbff236e85f5db_0
2025-06-07 10:42:11,595 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 5a0b228ae555b263e3f4274f46ba35291948c7c8700707010ded0e5285c8272c2655f59f2d9c1ae53036155f39463f6455c53a0b04760567862894feb0312924_0
2025-06-07 10:42:11,595 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 5a0b228ae555b263e3f4274f46ba35291948c7c8700707010ded0e5285c8272c2655f59f2d9c1ae53036155f39463f6455c53a0b04760567862894feb0312924_0
2025-06-07 10:42:11,595 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 5a0b228ae555b263e3f4274f46ba35291948c7c8700707010ded0e5285c8272c2655f59f2d9c1ae53036155f39463f6455c53a0b04760567862894feb0312924_4
2025-06-07 10:42:11,596 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 40bf3b67d76bce4477c840d9fd482e8b89259be12c530e68486b6025b39aaf7ff08620460dbeee3d3b7df15f617c5f0fdd4139aca296589b4bcbff236e85f5db_0
2025-06-07 10:42:11,596 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 5a0b228ae555b263e3f4274f46ba35291948c7c8700707010ded0e5285c8272c2655f59f2d9c1ae53036155f39463f6455c53a0b04760567862894feb0312924_0
2025-06-07 10:42:11,597 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 5a0b228ae555b263e3f4274f46ba35291948c7c8700707010ded0e5285c8272c2655f59f2d9c1ae53036155f39463f6455c53a0b04760567862894feb0312924_0
2025-06-07 10:42:11,597 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('attached_assets/DataAnalyzerPro/routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 5a0b228ae555b263e3f4274f46ba35291948c7c8700707010ded0e5285c8272c2655f59f2d9c1ae53036155f39463f6455c53a0b04760567862894feb0312924_5
2025-06-07 10:42:11,598 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = a5e39e6eb580258dd7539b51fc783c7401ae41818b4a9414ce047b843018f1c58f17ec2a80920e05f5988e0f13d3ed9f5fc4eb331f6f9780d4f3169fc73944b5_0
2025-06-07 10:42:11,598 - semgrep.rule_match - DEBUG - match_key = ('fileItem.innerHTML = "...";\n fileItem.innerHTML = `\n                    <div class="file-name">file.name</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                ;\n', PosixPath('attached_assets/DataAnalyzerPro/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 84920d7e00be1c8ffdaab3b064cecad718dbad177e19ce1b6552c2e53da9edcf3d6383d6b89c6457e948e31f3bf2ebee3fd0ccdb72553a100c53a65f0b571c85_0
2025-06-07 10:42:11,599 - semgrep.rule_match - DEBUG - match_key = ('fileItem.innerHTML = "...";\n fileItem.innerHTML = `\n                    <div class="file-name">file.name</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                ;\n', PosixPath('attached_assets/DataAnalyzerPro/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 84920d7e00be1c8ffdaab3b064cecad718dbad177e19ce1b6552c2e53da9edcf3d6383d6b89c6457e948e31f3bf2ebee3fd0ccdb72553a100c53a65f0b571c85_0
2025-06-07 10:42:11,599 - semgrep.rule_match - DEBUG - match_key = ('fileItem.innerHTML = "...";\n fileItem.innerHTML = `\n                    <div class="file-name">file.name</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                ;\n', PosixPath('attached_assets/DataAnalyzerPro/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 84920d7e00be1c8ffdaab3b064cecad718dbad177e19ce1b6552c2e53da9edcf3d6383d6b89c6457e948e31f3bf2ebee3fd0ccdb72553a100c53a65f0b571c85_0
2025-06-07 10:42:11,600 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 1d6e9a3bcda0b337f05b68bf00bb516f272929ad8752a6d22634514d3aaa9a654e2e3e3054dc3371ea226a2130599b793fc549f1a062f3e085321d9ad4c0da10_0
2025-06-07 10:42:11,600 - semgrep.rule_match - DEBUG - match_key = ('fileItem.innerHTML = "...";\n fileItem.innerHTML = `\n                    <div class="file-name">file.name</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                ;\n fileItem.outerHTML = `\n                    <div class="file-name">file.name</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                ;\n document.write(...) fileItem.outerHTML = "...";\n document.write("...")', PosixPath('attached_assets/DataAnalyzerPro/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 288718f5496d2ecf0e8fa04d5e029cfb4d0dd0d950f9030e0d2e7b35651fe01ddc697529cee4bd8f4fbcfdfd6cbefd0f4cbeefa0d603a4e494b3b858d9f66bd4_0
2025-06-07 10:42:11,601 - semgrep.rule_match - DEBUG - match_key = ('fileItem.innerHTML = "...";\n fileItem.innerHTML = `\n                    <div class="file-name">file.name</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                ;\n fileItem.outerHTML = `\n                    <div class="file-name">file.name</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                ;\n document.write(...) fileItem.outerHTML = "...";\n document.write("...")', PosixPath('attached_assets/DataAnalyzerPro/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 288718f5496d2ecf0e8fa04d5e029cfb4d0dd0d950f9030e0d2e7b35651fe01ddc697529cee4bd8f4fbcfdfd6cbefd0f4cbeefa0d603a4e494b3b858d9f66bd4_0
2025-06-07 10:42:11,601 - semgrep.rule_match - DEBUG - match_key = ('fileItem.innerHTML = "...";\n fileItem.innerHTML = `\n                    <div class="file-name">file.name</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                ;\n fileItem.outerHTML = `\n                    <div class="file-name">file.name</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                ;\n document.write(...) fileItem.outerHTML = "...";\n document.write("...")', PosixPath('attached_assets/DataAnalyzerPro/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 288718f5496d2ecf0e8fa04d5e029cfb4d0dd0d950f9030e0d2e7b35651fe01ddc697529cee4bd8f4fbcfdfd6cbefd0f4cbeefa0d603a4e494b3b858d9f66bd4_0
2025-06-07 10:42:11,602 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = a247f4ff586f06aab4e6dc1dc43ca9babbd9fa3fb402c343afc55683e8cf6a7fc756357ca3c1e37136d059d11a52db0af0a4bd4ca70bff5b691a277562114783_0
2025-06-07 10:42:11,602 - semgrep.rule_match - DEBUG - match_key = ('</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                 .*</?[a-zA-Z] `</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                ${file.name}...`\n `...${file.name}</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                `\n', PosixPath('attached_assets/DataAnalyzerPro/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 05a473ccc744f532e86a12256f49f42c3bd018910af74d45713985d1573753418cc82634ef7a115d400621ba08bba4572456a63a3411113539a275653f00a973_0
2025-06-07 10:42:11,608 - semgrep.rule_match - DEBUG - match_key = ('</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                 .*</?[a-zA-Z] `</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                ${file.name}...`\n `...${file.name}</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                `\n', PosixPath('attached_assets/DataAnalyzerPro/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 05a473ccc744f532e86a12256f49f42c3bd018910af74d45713985d1573753418cc82634ef7a115d400621ba08bba4572456a63a3411113539a275653f00a973_0
2025-06-07 10:42:11,608 - semgrep.rule_match - DEBUG - match_key = ('</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                 .*</?[a-zA-Z] `</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                ${file.name}...`\n `...${file.name}</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                `\n', PosixPath('attached_assets/DataAnalyzerPro/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = 05a473ccc744f532e86a12256f49f42c3bd018910af74d45713985d1573753418cc82634ef7a115d400621ba08bba4572456a63a3411113539a275653f00a973_0
2025-06-07 10:42:11,609 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = a5e39e6eb580258dd7539b51fc783c7401ae41818b4a9414ce047b843018f1c58f17ec2a80920e05f5988e0f13d3ed9f5fc4eb331f6f9780d4f3169fc73944b5_0
2025-06-07 10:42:11,609 - semgrep.rule_match - DEBUG - match_key = ('alert.innerHTML = "...";\n alert.innerHTML = `\n                message\n                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n            ;\n', PosixPath('attached_assets/DataAnalyzerPro/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = e25b470d970331407604791540c57d6f96f60caaf2cab86329483a7144cf69a48a39228caf48abfaebad3fe6dd969214988542aae42df1c668026bbfe937358a_0
2025-06-07 10:42:11,610 - semgrep.rule_match - DEBUG - match_key = ('alert.innerHTML = "...";\n alert.innerHTML = `\n                message\n                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n            ;\n', PosixPath('attached_assets/DataAnalyzerPro/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = e25b470d970331407604791540c57d6f96f60caaf2cab86329483a7144cf69a48a39228caf48abfaebad3fe6dd969214988542aae42df1c668026bbfe937358a_0
2025-06-07 10:42:11,610 - semgrep.rule_match - DEBUG - match_key = ('alert.innerHTML = "...";\n alert.innerHTML = `\n                message\n                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n            ;\n', PosixPath('attached_assets/DataAnalyzerPro/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = e25b470d970331407604791540c57d6f96f60caaf2cab86329483a7144cf69a48a39228caf48abfaebad3fe6dd969214988542aae42df1c668026bbfe937358a_0
2025-06-07 10:42:11,611 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 1d6e9a3bcda0b337f05b68bf00bb516f272929ad8752a6d22634514d3aaa9a654e2e3e3054dc3371ea226a2130599b793fc549f1a062f3e085321d9ad4c0da10_0
2025-06-07 10:42:11,611 - semgrep.rule_match - DEBUG - match_key = ('alert.innerHTML = "...";\n alert.innerHTML = `\n                message\n                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n            ;\n alert.outerHTML = `\n                message\n                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n            ;\n document.write(...) alert.outerHTML = "...";\n document.write("...")', PosixPath('attached_assets/DataAnalyzerPro/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 462a9e250b4df6ff44a240fbcc6a63c66d424ca8205211dd9256dfca6002f072351ba0fe08e72b1fe4bd314fdbf9bcc64d13eae327818aa51e2e9a876801df3a_0
2025-06-07 10:42:11,612 - semgrep.rule_match - DEBUG - match_key = ('alert.innerHTML = "...";\n alert.innerHTML = `\n                message\n                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n            ;\n alert.outerHTML = `\n                message\n                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n            ;\n document.write(...) alert.outerHTML = "...";\n document.write("...")', PosixPath('attached_assets/DataAnalyzerPro/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 462a9e250b4df6ff44a240fbcc6a63c66d424ca8205211dd9256dfca6002f072351ba0fe08e72b1fe4bd314fdbf9bcc64d13eae327818aa51e2e9a876801df3a_0
2025-06-07 10:42:11,612 - semgrep.rule_match - DEBUG - match_key = ('alert.innerHTML = "...";\n alert.innerHTML = `\n                message\n                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n            ;\n alert.outerHTML = `\n                message\n                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n            ;\n document.write(...) alert.outerHTML = "...";\n document.write("...")', PosixPath('attached_assets/DataAnalyzerPro/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 462a9e250b4df6ff44a240fbcc6a63c66d424ca8205211dd9256dfca6002f072351ba0fe08e72b1fe4bd314fdbf9bcc64d13eae327818aa51e2e9a876801df3a_0
2025-06-07 10:42:11,613 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = a5e39e6eb580258dd7539b51fc783c7401ae41818b4a9414ce047b843018f1c58f17ec2a80920e05f5988e0f13d3ed9f5fc4eb331f6f9780d4f3169fc73944b5_0
2025-06-07 10:42:11,614 - semgrep.rule_match - DEBUG - match_key = ('responseContainer.innerHTML = "...";\n responseContainer.innerHTML = `\n                    <div class="card bg-dark text-light mb-3">\n                        <div class="card-header">Your question: query</div>\n                        <div class="card-body">\n                            <p class="card-text">data.response</p>\n                        </div>\n                    </div>\n                ;\n', PosixPath('attached_assets/DataAnalyzerPro/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 098441f85e5adf04227a15f80136a53e856dd544fdcdb3a68473057388a3c6e162de35a9f2f9aea24ce46917547b4e9ff9b5dafe150492b5cb73845f38997a8a_0
2025-06-07 10:42:11,614 - semgrep.rule_match - DEBUG - match_key = ('responseContainer.innerHTML = "...";\n responseContainer.innerHTML = `\n                    <div class="card bg-dark text-light mb-3">\n                        <div class="card-header">Your question: query</div>\n                        <div class="card-body">\n                            <p class="card-text">data.response</p>\n                        </div>\n                    </div>\n                ;\n', PosixPath('attached_assets/DataAnalyzerPro/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 098441f85e5adf04227a15f80136a53e856dd544fdcdb3a68473057388a3c6e162de35a9f2f9aea24ce46917547b4e9ff9b5dafe150492b5cb73845f38997a8a_0
2025-06-07 10:42:11,615 - semgrep.rule_match - DEBUG - match_key = ('responseContainer.innerHTML = "...";\n responseContainer.innerHTML = `\n                    <div class="card bg-dark text-light mb-3">\n                        <div class="card-header">Your question: query</div>\n                        <div class="card-body">\n                            <p class="card-text">data.response</p>\n                        </div>\n                    </div>\n                ;\n', PosixPath('attached_assets/DataAnalyzerPro/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 098441f85e5adf04227a15f80136a53e856dd544fdcdb3a68473057388a3c6e162de35a9f2f9aea24ce46917547b4e9ff9b5dafe150492b5cb73845f38997a8a_0
2025-06-07 10:42:11,615 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 1d6e9a3bcda0b337f05b68bf00bb516f272929ad8752a6d22634514d3aaa9a654e2e3e3054dc3371ea226a2130599b793fc549f1a062f3e085321d9ad4c0da10_0
2025-06-07 10:42:11,616 - semgrep.rule_match - DEBUG - match_key = ('responseContainer.innerHTML = "...";\n responseContainer.innerHTML = `\n                    <div class="card bg-dark text-light mb-3">\n                        <div class="card-header">Your question: query</div>\n                        <div class="card-body">\n                            <p class="card-text">data.response</p>\n                        </div>\n                    </div>\n                ;\n responseContainer.outerHTML = `\n                    <div class="card bg-dark text-light mb-3">\n                        <div class="card-header">Your question: query</div>\n                        <div class="card-body">\n                            <p class="card-text">data.response</p>\n                        </div>\n                    </div>\n                ;\n document.write(...) responseContainer.outerHTML = "...";\n document.write("...")', PosixPath('attached_assets/DataAnalyzerPro/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 89ecf3ec30bc736d3e092cb9a332e006a2bfaa521acd399bddfc79a7a906257bc44d18789f81f2183b54aef004f5dc8b660ff07bb8daff3b586ac0b6d91226ce_0
2025-06-07 10:42:11,616 - semgrep.rule_match - DEBUG - match_key = ('responseContainer.innerHTML = "...";\n responseContainer.innerHTML = `\n                    <div class="card bg-dark text-light mb-3">\n                        <div class="card-header">Your question: query</div>\n                        <div class="card-body">\n                            <p class="card-text">data.response</p>\n                        </div>\n                    </div>\n                ;\n responseContainer.outerHTML = `\n                    <div class="card bg-dark text-light mb-3">\n                        <div class="card-header">Your question: query</div>\n                        <div class="card-body">\n                            <p class="card-text">data.response</p>\n                        </div>\n                    </div>\n                ;\n document.write(...) responseContainer.outerHTML = "...";\n document.write("...")', PosixPath('attached_assets/DataAnalyzerPro/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 89ecf3ec30bc736d3e092cb9a332e006a2bfaa521acd399bddfc79a7a906257bc44d18789f81f2183b54aef004f5dc8b660ff07bb8daff3b586ac0b6d91226ce_0
2025-06-07 10:42:11,617 - semgrep.rule_match - DEBUG - match_key = ('responseContainer.innerHTML = "...";\n responseContainer.innerHTML = `\n                    <div class="card bg-dark text-light mb-3">\n                        <div class="card-header">Your question: query</div>\n                        <div class="card-body">\n                            <p class="card-text">data.response</p>\n                        </div>\n                    </div>\n                ;\n responseContainer.outerHTML = `\n                    <div class="card bg-dark text-light mb-3">\n                        <div class="card-header">Your question: query</div>\n                        <div class="card-body">\n                            <p class="card-text">data.response</p>\n                        </div>\n                    </div>\n                ;\n document.write(...) responseContainer.outerHTML = "...";\n document.write("...")', PosixPath('attached_assets/DataAnalyzerPro/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 89ecf3ec30bc736d3e092cb9a332e006a2bfaa521acd399bddfc79a7a906257bc44d18789f81f2183b54aef004f5dc8b660ff07bb8daff3b586ac0b6d91226ce_0
2025-06-07 10:42:11,617 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = a247f4ff586f06aab4e6dc1dc43ca9babbd9fa3fb402c343afc55683e8cf6a7fc756357ca3c1e37136d059d11a52db0af0a4bd4ca70bff5b691a277562114783_0
2025-06-07 10:42:11,618 - semgrep.rule_match - DEBUG - match_key = ('</p>\n                        </div>\n                    </div>\n                 .*</?[a-zA-Z] `</p>\n                        </div>\n                    </div>\n                ${data.response}...`\n `...${data.response}</p>\n                        </div>\n                    </div>\n                `\n', PosixPath('attached_assets/DataAnalyzerPro/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = f0103659f440065ac4cfb4ccc6d91381c0b7c5ae62691e908812d02107c8486da01f862bfda3a015ad78f326156dc15174becb8015f7c0997ce0d63602f8b593_0
2025-06-07 10:42:11,618 - semgrep.rule_match - DEBUG - match_key = ('</p>\n                        </div>\n                    </div>\n                 .*</?[a-zA-Z] `</p>\n                        </div>\n                    </div>\n                ${data.response}...`\n `...${data.response}</p>\n                        </div>\n                    </div>\n                `\n', PosixPath('attached_assets/DataAnalyzerPro/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = f0103659f440065ac4cfb4ccc6d91381c0b7c5ae62691e908812d02107c8486da01f862bfda3a015ad78f326156dc15174becb8015f7c0997ce0d63602f8b593_0
2025-06-07 10:42:11,619 - semgrep.rule_match - DEBUG - match_key = ('</p>\n                        </div>\n                    </div>\n                 .*</?[a-zA-Z] `</p>\n                        </div>\n                    </div>\n                ${data.response}...`\n `...${data.response}</p>\n                        </div>\n                    </div>\n                `\n', PosixPath('attached_assets/DataAnalyzerPro/static/js/main.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = f0103659f440065ac4cfb4ccc6d91381c0b7c5ae62691e908812d02107c8486da01f862bfda3a015ad78f326156dc15174becb8015f7c0997ce0d63602f8b593_0
2025-06-07 10:42:11,620 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/templates/auth/edit_profile.html'), 'config..semgrep.vendored-rules.python.django.security.django-no-csrf-token') match_id = 63500eed634f2ff6d09a375f8bf51529bb24979207c83da43feb539045a59d1f3fad7093b8e376cd559f8ab72f8cece4b3ab0247920bedfb2a825f1c6f8e8083_0
2025-06-07 10:42:11,620 - semgrep.rule_match - DEBUG - match_key = ('POST (?i)(post|put|delete|patch) <form ... method="POST" ...>...</form>\n <form ... method=POST ...>...</form>\n <form ... method=\'POST\' ...>...</form>\n <form...>...</form> <form...>...{% csrf_token %}...</form> <form...>...{{ $VAR.csrf_token }}...</form>', PosixPath('attached_assets/DataAnalyzerPro/templates/auth/edit_profile.html'), 'config..semgrep.vendored-rules.python.django.security.django-no-csrf-token') match_id = 59c25555f44bfcbcbd1e5352f7425b9bd9e59b7b316a2a06ceb43948860e63e007fa0bf75df5e0b6e66eb29c0cf0ce4e0682987ac1db9e972055df10c445c625_0
2025-06-07 10:42:11,621 - semgrep.rule_match - DEBUG - match_key = ('POST (?i)(post|put|delete|patch) <form ... method="POST" ...>...</form>\n <form ... method=POST ...>...</form>\n <form ... method=\'POST\' ...>...</form>\n <form...>...</form> <form...>...{% csrf_token %}...</form> <form...>...{{ $VAR.csrf_token }}...</form>', PosixPath('attached_assets/DataAnalyzerPro/templates/auth/edit_profile.html'), 'config..semgrep.vendored-rules.python.django.security.django-no-csrf-token') match_id = 59c25555f44bfcbcbd1e5352f7425b9bd9e59b7b316a2a06ceb43948860e63e007fa0bf75df5e0b6e66eb29c0cf0ce4e0682987ac1db9e972055df10c445c625_0
2025-06-07 10:42:11,622 - semgrep.rule_match - DEBUG - match_key = ('POST (?i)(post|put|delete|patch) <form ... method="POST" ...>...</form>\n <form ... method=POST ...>...</form>\n <form ... method=\'POST\' ...>...</form>\n <form...>...</form> <form...>...{% csrf_token %}...</form> <form...>...{{ $VAR.csrf_token }}...</form>', PosixPath('attached_assets/DataAnalyzerPro/templates/auth/edit_profile.html'), 'config..semgrep.vendored-rules.python.django.security.django-no-csrf-token') match_id = 59c25555f44bfcbcbd1e5352f7425b9bd9e59b7b316a2a06ceb43948860e63e007fa0bf75df5e0b6e66eb29c0cf0ce4e0682987ac1db9e972055df10c445c625_0
2025-06-07 10:42:11,622 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/templates/auth/login.html'), 'config..semgrep.vendored-rules.python.django.security.django-no-csrf-token') match_id = 633e617eb06ee131091ef2dadac9bcf3b530405d539138bc2a718e4c95463d71d1935969bec73a89140b76ce7323bdbd495ff4a32f5931c748451448999d6c05_0
2025-06-07 10:42:11,623 - semgrep.rule_match - DEBUG - match_key = ('POST (?i)(post|put|delete|patch) <form ... method="POST" ...>...</form>\n <form ... method=POST ...>...</form>\n <form ... method=\'POST\' ...>...</form>\n <form...>...</form> <form...>...{% csrf_token %}...</form> <form...>...{{ $VAR.csrf_token }}...</form>', PosixPath('attached_assets/DataAnalyzerPro/templates/auth/login.html'), 'config..semgrep.vendored-rules.python.django.security.django-no-csrf-token') match_id = e79fd0bd7c3952e9f4b74cdb4a6c0cc9b491107cfc895effa06962b79de8bac6a9412104e2a2c257e0a8e16f3aca2fa6e6d1a82969cd70e89097dfd4a6b8d4ff_0
2025-06-07 10:42:11,624 - semgrep.rule_match - DEBUG - match_key = ('POST (?i)(post|put|delete|patch) <form ... method="POST" ...>...</form>\n <form ... method=POST ...>...</form>\n <form ... method=\'POST\' ...>...</form>\n <form...>...</form> <form...>...{% csrf_token %}...</form> <form...>...{{ $VAR.csrf_token }}...</form>', PosixPath('attached_assets/DataAnalyzerPro/templates/auth/login.html'), 'config..semgrep.vendored-rules.python.django.security.django-no-csrf-token') match_id = e79fd0bd7c3952e9f4b74cdb4a6c0cc9b491107cfc895effa06962b79de8bac6a9412104e2a2c257e0a8e16f3aca2fa6e6d1a82969cd70e89097dfd4a6b8d4ff_0
2025-06-07 10:42:11,624 - semgrep.rule_match - DEBUG - match_key = ('POST (?i)(post|put|delete|patch) <form ... method="POST" ...>...</form>\n <form ... method=POST ...>...</form>\n <form ... method=\'POST\' ...>...</form>\n <form...>...</form> <form...>...{% csrf_token %}...</form> <form...>...{{ $VAR.csrf_token }}...</form>', PosixPath('attached_assets/DataAnalyzerPro/templates/auth/login.html'), 'config..semgrep.vendored-rules.python.django.security.django-no-csrf-token') match_id = e79fd0bd7c3952e9f4b74cdb4a6c0cc9b491107cfc895effa06962b79de8bac6a9412104e2a2c257e0a8e16f3aca2fa6e6d1a82969cd70e89097dfd4a6b8d4ff_0
2025-06-07 10:42:11,625 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/templates/background_remover.html'), 'config..semgrep.vendored-rules.python.django.security.django-no-csrf-token') match_id = 04b0b453027fc884d77071b4025ba17fc862e78bddb88e51df308f53dd7e04a0dfa2a1f43006abaed3a9d213212759089481aa0fef65e1f86787637b50672e04_0
2025-06-07 10:42:11,626 - semgrep.rule_match - DEBUG - match_key = ('post (?i)(post|put|delete|patch) <form ... method="post" ...>...</form>\n <form ... method=post ...>...</form>\n <form ... method=\'post\' ...>...</form>\n <form...>...</form> <form...>...{% csrf_token %}...</form> <form...>...{{ $VAR.csrf_token }}...</form>', PosixPath('attached_assets/DataAnalyzerPro/templates/background_remover.html'), 'config..semgrep.vendored-rules.python.django.security.django-no-csrf-token') match_id = 712e91f95072ce8b5438377e9d0471cd11d56bf974017f82ff132cd599a9bacd1a5e37d481ca93d93386160cce37a3eb3d69e9787a191685b0390e4839d96c68_0
2025-06-07 10:42:11,627 - semgrep.rule_match - DEBUG - match_key = ('post (?i)(post|put|delete|patch) <form ... method="post" ...>...</form>\n <form ... method=post ...>...</form>\n <form ... method=\'post\' ...>...</form>\n <form...>...</form> <form...>...{% csrf_token %}...</form> <form...>...{{ $VAR.csrf_token }}...</form>', PosixPath('attached_assets/DataAnalyzerPro/templates/background_remover.html'), 'config..semgrep.vendored-rules.python.django.security.django-no-csrf-token') match_id = 712e91f95072ce8b5438377e9d0471cd11d56bf974017f82ff132cd599a9bacd1a5e37d481ca93d93386160cce37a3eb3d69e9787a191685b0390e4839d96c68_0
2025-06-07 10:42:11,628 - semgrep.rule_match - DEBUG - match_key = ('post (?i)(post|put|delete|patch) <form ... method="post" ...>...</form>\n <form ... method=post ...>...</form>\n <form ... method=\'post\' ...>...</form>\n <form...>...</form> <form...>...{% csrf_token %}...</form> <form...>...{{ $VAR.csrf_token }}...</form>', PosixPath('attached_assets/DataAnalyzerPro/templates/background_remover.html'), 'config..semgrep.vendored-rules.python.django.security.django-no-csrf-token') match_id = 712e91f95072ce8b5438377e9d0471cd11d56bf974017f82ff132cd599a9bacd1a5e37d481ca93d93386160cce37a3eb3d69e9787a191685b0390e4839d96c68_0
2025-06-07 10:42:11,628 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 5b2f4f7854b6703f32c714ed59727ee394396e646e5dfc947c4a6a52bc577d4d055947c2da2f23797380707650bd4f8144e599a5e434001ba55bc0e1cc48ad3e_0
2025-06-07 10:42:11,629 - semgrep.rule_match - DEBUG - match_key = (' href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" > <script  href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" >...</script>', PosixPath('attached_assets/DataAnalyzerPro/templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 5f541e489ccef370da9c6bf5019f4282ad63d5d6018e52a9d47834594a4daa8d8028e683bdd3a52d1fbe91c452375ab9d290bde8eadbb1c1d66ee84586ca8852_0
2025-06-07 10:42:11,629 - semgrep.rule_match - DEBUG - match_key = (' href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" > <script  href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" >...</script>', PosixPath('attached_assets/DataAnalyzerPro/templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 5f541e489ccef370da9c6bf5019f4282ad63d5d6018e52a9d47834594a4daa8d8028e683bdd3a52d1fbe91c452375ab9d290bde8eadbb1c1d66ee84586ca8852_0
2025-06-07 10:42:11,630 - semgrep.rule_match - DEBUG - match_key = (' href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" > <script  href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" >...</script>', PosixPath('attached_assets/DataAnalyzerPro/templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 5f541e489ccef370da9c6bf5019f4282ad63d5d6018e52a9d47834594a4daa8d8028e683bdd3a52d1fbe91c452375ab9d290bde8eadbb1c1d66ee84586ca8852_0
2025-06-07 10:42:11,630 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 5b2f4f7854b6703f32c714ed59727ee394396e646e5dfc947c4a6a52bc577d4d055947c2da2f23797380707650bd4f8144e599a5e434001ba55bc0e1cc48ad3e_0
2025-06-07 10:42:11,631 - semgrep.rule_match - DEBUG - match_key = (' href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" > <script  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" >...</script>', PosixPath('attached_assets/DataAnalyzerPro/templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 36574e54f9245d0c5a8efabf77cabfab5d6cfa7502e0097c36608d729f25ac788b1030920d05d5db58ba7df7b3788ccca29b3fd22a9c38da62d25b376df237e2_0
2025-06-07 10:42:11,631 - semgrep.rule_match - DEBUG - match_key = (' href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" > <script  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" >...</script>', PosixPath('attached_assets/DataAnalyzerPro/templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 36574e54f9245d0c5a8efabf77cabfab5d6cfa7502e0097c36608d729f25ac788b1030920d05d5db58ba7df7b3788ccca29b3fd22a9c38da62d25b376df237e2_0
2025-06-07 10:42:11,632 - semgrep.rule_match - DEBUG - match_key = (' href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" > <script  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" >...</script>', PosixPath('attached_assets/DataAnalyzerPro/templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 36574e54f9245d0c5a8efabf77cabfab5d6cfa7502e0097c36608d729f25ac788b1030920d05d5db58ba7df7b3788ccca29b3fd22a9c38da62d25b376df237e2_0
2025-06-07 10:42:11,632 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 5b2f4f7854b6703f32c714ed59727ee394396e646e5dfc947c4a6a52bc577d4d055947c2da2f23797380707650bd4f8144e599a5e434001ba55bc0e1cc48ad3e_0
2025-06-07 10:42:11,633 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" > <script  src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" >...</script>', PosixPath('attached_assets/DataAnalyzerPro/templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = c7eacf95a86136cc8d14740dbbf5f56386c2be0a7fd6c4b44e188e8991c22e2090f8a55a13587b26fe913006a4758830e167330580d0cd4cf016febff192e521_0
2025-06-07 10:42:11,634 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" > <script  src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" >...</script>', PosixPath('attached_assets/DataAnalyzerPro/templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = c7eacf95a86136cc8d14740dbbf5f56386c2be0a7fd6c4b44e188e8991c22e2090f8a55a13587b26fe913006a4758830e167330580d0cd4cf016febff192e521_0
2025-06-07 10:42:11,634 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" > <script  src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" >...</script>', PosixPath('attached_assets/DataAnalyzerPro/templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = c7eacf95a86136cc8d14740dbbf5f56386c2be0a7fd6c4b44e188e8991c22e2090f8a55a13587b26fe913006a4758830e167330580d0cd4cf016febff192e521_0
2025-06-07 10:42:11,635 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/templates/base.html'), 'config..semgrep.vendored-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag') match_id = ad63b8d63a6e0dbb172207e7c160b0c653bc6ceff80431dc8a8814c92a4290d083059aced4c7647be812f66452f0d31de4cb718018200be776693217e7a52f9b_0
2025-06-07 10:42:11,635 - semgrep.rule_match - DEBUG - match_key = ('<script ...> ... </script> {{ ... }}', PosixPath('attached_assets/DataAnalyzerPro/templates/base.html'), 'config..semgrep.vendored-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag') match_id = 840b860f38d46773425c1ff1eb60170533e4b36a788e3c84eba5075d38dcf8c138bf82384711761d6b407d1c35e1700933b03da7372de04aafd6d87949b5c0cc_0
2025-06-07 10:42:11,636 - semgrep.rule_match - DEBUG - match_key = ('<script ...> ... </script> {{ ... }}', PosixPath('attached_assets/DataAnalyzerPro/templates/base.html'), 'config..semgrep.vendored-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag') match_id = 840b860f38d46773425c1ff1eb60170533e4b36a788e3c84eba5075d38dcf8c138bf82384711761d6b407d1c35e1700933b03da7372de04aafd6d87949b5c0cc_0
2025-06-07 10:42:11,636 - semgrep.rule_match - DEBUG - match_key = ('<script ...> ... </script> {{ ... }}', PosixPath('attached_assets/DataAnalyzerPro/templates/base.html'), 'config..semgrep.vendored-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag') match_id = 840b860f38d46773425c1ff1eb60170533e4b36a788e3c84eba5075d38dcf8c138bf82384711761d6b407d1c35e1700933b03da7372de04aafd6d87949b5c0cc_0
2025-06-07 10:42:11,639 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/templates/editor/certificate_editor.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 2ca09b7c4f3b09841774c39c5eb75cac0096660a93880425cf6fddb30f77903d14686d38ad4572c0cb9c927f9fb3d7f1f3047af0613c8d0fbd386a1b448dd175_0
2025-06-07 10:42:11,639 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/fabric@5.2.1/dist/fabric.min.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/fabric@5.2.1/dist/fabric.min.js" > <script  src="https://cdn.jsdelivr.net/npm/fabric@5.2.1/dist/fabric.min.js" >...</script>', PosixPath('attached_assets/DataAnalyzerPro/templates/editor/certificate_editor.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 8c01a1e105c5d7c4e1ec66389c391bb223a9d2007aedf485476e04b64345a586fdf9801d0c85313293f68ee9ad7e13fdab25ee099cf40f6b02e92202ad0a90ec_0
2025-06-07 10:42:11,640 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/fabric@5.2.1/dist/fabric.min.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/fabric@5.2.1/dist/fabric.min.js" > <script  src="https://cdn.jsdelivr.net/npm/fabric@5.2.1/dist/fabric.min.js" >...</script>', PosixPath('attached_assets/DataAnalyzerPro/templates/editor/certificate_editor.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 8c01a1e105c5d7c4e1ec66389c391bb223a9d2007aedf485476e04b64345a586fdf9801d0c85313293f68ee9ad7e13fdab25ee099cf40f6b02e92202ad0a90ec_0
2025-06-07 10:42:11,640 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/fabric@5.2.1/dist/fabric.min.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/fabric@5.2.1/dist/fabric.min.js" > <script  src="https://cdn.jsdelivr.net/npm/fabric@5.2.1/dist/fabric.min.js" >...</script>', PosixPath('attached_assets/DataAnalyzerPro/templates/editor/certificate_editor.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 8c01a1e105c5d7c4e1ec66389c391bb223a9d2007aedf485476e04b64345a586fdf9801d0c85313293f68ee9ad7e13fdab25ee099cf40f6b02e92202ad0a90ec_0
2025-06-07 10:42:11,642 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/templates/pages/support.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 78eb6cab2a2cbacf6b9e78fe8e8234556a160095dc8b6ea409d693684ab6060abfbf7d845b11b58bb31ea022869140099eba9d05bd323e7762d97da249ab806a_0
2025-06-07 10:42:11,644 - semgrep.rule_match - DEBUG - match_key = ('\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        const chatForm = document.getElementById(\'chatForm\');\n        const userMessageInput = document.getElementById(\'userMessage\');\n        const chatMessages = document.getElementById(\'chatMessages\');\n\n        // Sample responses for the chatbot\n        const botResponses = {\n            \'hello\': \'Hello! How can I help you today?\',\n            \'hi\': \'Hi there! How can I assist you with Fixio?\',\n            \'help\': \'I\\\'m here to help! What specifically do you need assistance with?\',\n            \'merge pdf\': \'To merge PDF files, go to our PDF Merger tool in the PDF Tools section. Upload the PDF files you want to combine, arrange them in the desired order, and click "Merge PDFs". You can then download the merged file.\',\n            \'remove background\': \'To remove an image background, navigate to the Background Remover tool in the Image Tools section. Upload your image, and our AI will automatically detect and remove the background, creating a transparent PNG.\',\n            \'edit excel\': \'You can edit Excel files using our AI Excel Assistant. Simply upload your Excel file, then describe in plain language what changes you want to make. For example, "Sort column A alphabetically" or "Create a sum of all values in column B".\',\n            \'subscription\': \'For subscription-related questions, please go to your Account Settings > Billing section. There you can view your current plan, update payment methods, or manage your subscription.\',\n            \'password\': \'To reset your password, click on the "Forgot Password" link on the login page. We\\\'ll send you an email with instructions to create a new password.\',\n            \'contact\': \'You can reach our support team via email at support@fixio.tools. For Pro and Enterprise users, we also offer priority support with faster response times.\',\n            \'pricing\': \'We offer three plans: Free, Pro ($5/month), and Enterprise (custom pricing). You can view detailed pricing information on our Pricing page.\',\n            \'refund\': \'We offer a 14-day money-back guarantee for Pro subscriptions. Please contact our support team to request a refund if you\\\'re within this period.\',\n            \'default\': \'I don\\\'t have specific information about that yet. Please email our support team at support@fixio.tools for more detailed assistance.\'\n        };\n\n        // Handle form submission\n        chatForm.addEventListener(\'submit\', function(e) {\n            e.preventDefault();\n\n            const userMessage = userMessageInput.value.trim();\n            if (!userMessage) return;\n\n            // Add user message to chat\n            addMessage(userMessage, \'user\');\n\n            // Clear input\n            userMessageInput.value = \'\';\n\n            // Simulate bot "typing"\n            setTimeout(function() {\n                // Get bot response\n                const botResponse = getBotResponse(userMessage);\n\n                // Add bot response to chat\n                addMessage(botResponse, \'bot\');\n\n                // Scroll to bottom\n                chatMessages.scrollTop = chatMessages.scrollHeight;\n            }, 1000);\n        });\n\n        // Function to add message to chat\n        function addMessage(message, sender) {\n            const messageDiv = document.createElement(\'div\');\n            messageDiv.className = `message ${sender}-message`;\n\n            const messageContent = document.createElement(\'div\');\n            messageContent.className = \'message-content\';\n            messageContent.innerHTML = `<p>${message}</p>`;\n\n            messageDiv.appendChild(messageContent);\n            chatMessages.appendChild(messageDiv);\n\n            // Scroll to bottom\n            chatMessages.scrollTop = chatMessages.scrollHeight;\n        }\n\n        // Function to get bot response based on user message\n        function getBotResponse(userMessage) {\n            userMessage = userMessage.toLowerCase();\n\n            // Check each keyword for a match\n            for (const [keyword, response] of Object.entries(botResponses)) {\n                if (userMessage.includes(keyword)) {\n                    return response;\n                }\n            }\n\n            // If no match, return default response\n            return botResponses.default;\n        }\n    });\n $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        const chatForm = document.getElementById(\'chatForm\');\n        const userMessageInput = document.getElementById(\'userMessage\');\n        const chatMessages = document.getElementById(\'chatMessages\');\n\n        // Sample responses for the chatbot\n        const botResponses = {\n            \'hello\': \'Hello! How can I help you today?\',\n            \'hi\': \'Hi there! How can I assist you with Fixio?\',\n            \'help\': \'I\\\'m here to help! What specifically do you need assistance with?\',\n            \'merge pdf\': \'To merge PDF files, go to our PDF Merger tool in the PDF Tools section. Upload the PDF files you want to combine, arrange them in the desired order, and click "Merge PDFs". You can then download the merged file.\',\n            \'remove background\': \'To remove an image background, navigate to the Background Remover tool in the Image Tools section. Upload your image, and our AI will automatically detect and remove the background, creating a transparent PNG.\',\n            \'edit excel\': \'You can edit Excel files using our AI Excel Assistant. Simply upload your Excel file, then describe in plain language what changes you want to make. For example, "Sort column A alphabetically" or "Create a sum of all values in column B".\',\n            \'subscription\': \'For subscription-related questions, please go to your Account Settings > Billing section. There you can view your current plan, update payment methods, or manage your subscription.\',\n            \'password\': \'To reset your password, click on the "Forgot Password" link on the login page. We\\\'ll send you an email with instructions to create a new password.\',\n            \'contact\': \'You can reach our support team via email at support@fixio.tools. For Pro and Enterprise users, we also offer priority support with faster response times.\',\n            \'pricing\': \'We offer three plans: Free, Pro ($5/month), and Enterprise (custom pricing). You can view detailed pricing information on our Pricing page.\',\n            \'refund\': \'We offer a 14-day money-back guarantee for Pro subscriptions. Please contact our support team to request a refund if you\\\'re within this period.\',\n            \'default\': \'I don\\\'t have specific information about that yet. Please email our support team at support@fixio.tools for more detailed assistance.\'\n        };\n\n        // Handle form submission\n        chatForm.addEventListener(\'submit\', function(e) {\n            e.preventDefault();\n\n            const userMessage = userMessageInput.value.trim();\n            if (!userMessage) return;\n\n            // Add user message to chat\n            addMessage(userMessage, \'user\');\n\n            // Clear input\n            userMessageInput.value = \'\';\n\n            // Simulate bot "typing"\n            setTimeout(function() {\n                // Get bot response\n                const botResponse = getBotResponse(userMessage);\n\n                // Add bot response to chat\n                addMessage(botResponse, \'bot\');\n\n                // Scroll to bottom\n                chatMessages.scrollTop = chatMessages.scrollHeight;\n            }, 1000);\n        });\n\n        // Function to add message to chat\n        function addMessage(message, sender) {\n            const messageDiv = document.createElement(\'div\');\n            messageDiv.className = `message ${sender}-message`;\n\n            const messageContent = document.createElement(\'div\');\n            messageContent.className = \'message-content\';\n            messageContent.innerHTML = `<p>${message}</p>`;\n\n            messageDiv.appendChild(messageContent);\n            chatMessages.appendChild(messageDiv);\n\n            // Scroll to bottom\n            chatMessages.scrollTop = chatMessages.scrollHeight;\n        }\n\n        // Function to get bot response based on user message\n        function getBotResponse(userMessage) {\n            userMessage = userMessage.toLowerCase();\n\n            // Check each keyword for a match\n            for (const [keyword, response] of Object.entries(botResponses)) {\n                if (userMessage.includes(keyword)) {\n                    return response;\n                }\n            }\n\n            // If no match, return default response\n            return botResponses.default;\n        }\n    });\n</script>\n', PosixPath('attached_assets/DataAnalyzerPro/templates/pages/support.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 55d18ef339bd49335ceeaee9a9844ca25205b52e30790284f256dd71e6b8a21e4b1aface92e6ec5ddcc26e47e7f7ee90e4b5e3dd975e7bc9e236c460ee04eaff_0
2025-06-07 10:42:11,646 - semgrep.rule_match - DEBUG - match_key = ('\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        const chatForm = document.getElementById(\'chatForm\');\n        const userMessageInput = document.getElementById(\'userMessage\');\n        const chatMessages = document.getElementById(\'chatMessages\');\n\n        // Sample responses for the chatbot\n        const botResponses = {\n            \'hello\': \'Hello! How can I help you today?\',\n            \'hi\': \'Hi there! How can I assist you with Fixio?\',\n            \'help\': \'I\\\'m here to help! What specifically do you need assistance with?\',\n            \'merge pdf\': \'To merge PDF files, go to our PDF Merger tool in the PDF Tools section. Upload the PDF files you want to combine, arrange them in the desired order, and click "Merge PDFs". You can then download the merged file.\',\n            \'remove background\': \'To remove an image background, navigate to the Background Remover tool in the Image Tools section. Upload your image, and our AI will automatically detect and remove the background, creating a transparent PNG.\',\n            \'edit excel\': \'You can edit Excel files using our AI Excel Assistant. Simply upload your Excel file, then describe in plain language what changes you want to make. For example, "Sort column A alphabetically" or "Create a sum of all values in column B".\',\n            \'subscription\': \'For subscription-related questions, please go to your Account Settings > Billing section. There you can view your current plan, update payment methods, or manage your subscription.\',\n            \'password\': \'To reset your password, click on the "Forgot Password" link on the login page. We\\\'ll send you an email with instructions to create a new password.\',\n            \'contact\': \'You can reach our support team via email at support@fixio.tools. For Pro and Enterprise users, we also offer priority support with faster response times.\',\n            \'pricing\': \'We offer three plans: Free, Pro ($5/month), and Enterprise (custom pricing). You can view detailed pricing information on our Pricing page.\',\n            \'refund\': \'We offer a 14-day money-back guarantee for Pro subscriptions. Please contact our support team to request a refund if you\\\'re within this period.\',\n            \'default\': \'I don\\\'t have specific information about that yet. Please email our support team at support@fixio.tools for more detailed assistance.\'\n        };\n\n        // Handle form submission\n        chatForm.addEventListener(\'submit\', function(e) {\n            e.preventDefault();\n\n            const userMessage = userMessageInput.value.trim();\n            if (!userMessage) return;\n\n            // Add user message to chat\n            addMessage(userMessage, \'user\');\n\n            // Clear input\n            userMessageInput.value = \'\';\n\n            // Simulate bot "typing"\n            setTimeout(function() {\n                // Get bot response\n                const botResponse = getBotResponse(userMessage);\n\n                // Add bot response to chat\n                addMessage(botResponse, \'bot\');\n\n                // Scroll to bottom\n                chatMessages.scrollTop = chatMessages.scrollHeight;\n            }, 1000);\n        });\n\n        // Function to add message to chat\n        function addMessage(message, sender) {\n            const messageDiv = document.createElement(\'div\');\n            messageDiv.className = `message ${sender}-message`;\n\n            const messageContent = document.createElement(\'div\');\n            messageContent.className = \'message-content\';\n            messageContent.innerHTML = `<p>${message}</p>`;\n\n            messageDiv.appendChild(messageContent);\n            chatMessages.appendChild(messageDiv);\n\n            // Scroll to bottom\n            chatMessages.scrollTop = chatMessages.scrollHeight;\n        }\n\n        // Function to get bot response based on user message\n        function getBotResponse(userMessage) {\n            userMessage = userMessage.toLowerCase();\n\n            // Check each keyword for a match\n            for (const [keyword, response] of Object.entries(botResponses)) {\n                if (userMessage.includes(keyword)) {\n                    return response;\n                }\n            }\n\n            // If no match, return default response\n            return botResponses.default;\n        }\n    });\n $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        const chatForm = document.getElementById(\'chatForm\');\n        const userMessageInput = document.getElementById(\'userMessage\');\n        const chatMessages = document.getElementById(\'chatMessages\');\n\n        // Sample responses for the chatbot\n        const botResponses = {\n            \'hello\': \'Hello! How can I help you today?\',\n            \'hi\': \'Hi there! How can I assist you with Fixio?\',\n            \'help\': \'I\\\'m here to help! What specifically do you need assistance with?\',\n            \'merge pdf\': \'To merge PDF files, go to our PDF Merger tool in the PDF Tools section. Upload the PDF files you want to combine, arrange them in the desired order, and click "Merge PDFs". You can then download the merged file.\',\n            \'remove background\': \'To remove an image background, navigate to the Background Remover tool in the Image Tools section. Upload your image, and our AI will automatically detect and remove the background, creating a transparent PNG.\',\n            \'edit excel\': \'You can edit Excel files using our AI Excel Assistant. Simply upload your Excel file, then describe in plain language what changes you want to make. For example, "Sort column A alphabetically" or "Create a sum of all values in column B".\',\n            \'subscription\': \'For subscription-related questions, please go to your Account Settings > Billing section. There you can view your current plan, update payment methods, or manage your subscription.\',\n            \'password\': \'To reset your password, click on the "Forgot Password" link on the login page. We\\\'ll send you an email with instructions to create a new password.\',\n            \'contact\': \'You can reach our support team via email at support@fixio.tools. For Pro and Enterprise users, we also offer priority support with faster response times.\',\n            \'pricing\': \'We offer three plans: Free, Pro ($5/month), and Enterprise (custom pricing). You can view detailed pricing information on our Pricing page.\',\n            \'refund\': \'We offer a 14-day money-back guarantee for Pro subscriptions. Please contact our support team to request a refund if you\\\'re within this period.\',\n            \'default\': \'I don\\\'t have specific information about that yet. Please email our support team at support@fixio.tools for more detailed assistance.\'\n        };\n\n        // Handle form submission\n        chatForm.addEventListener(\'submit\', function(e) {\n            e.preventDefault();\n\n            const userMessage = userMessageInput.value.trim();\n            if (!userMessage) return;\n\n            // Add user message to chat\n            addMessage(userMessage, \'user\');\n\n            // Clear input\n            userMessageInput.value = \'\';\n\n            // Simulate bot "typing"\n            setTimeout(function() {\n                // Get bot response\n                const botResponse = getBotResponse(userMessage);\n\n                // Add bot response to chat\n                addMessage(botResponse, \'bot\');\n\n                // Scroll to bottom\n                chatMessages.scrollTop = chatMessages.scrollHeight;\n            }, 1000);\n        });\n\n        // Function to add message to chat\n        function addMessage(message, sender) {\n            const messageDiv = document.createElement(\'div\');\n            messageDiv.className = `message ${sender}-message`;\n\n            const messageContent = document.createElement(\'div\');\n            messageContent.className = \'message-content\';\n            messageContent.innerHTML = `<p>${message}</p>`;\n\n            messageDiv.appendChild(messageContent);\n            chatMessages.appendChild(messageDiv);\n\n            // Scroll to bottom\n            chatMessages.scrollTop = chatMessages.scrollHeight;\n        }\n\n        // Function to get bot response based on user message\n        function getBotResponse(userMessage) {\n            userMessage = userMessage.toLowerCase();\n\n            // Check each keyword for a match\n            for (const [keyword, response] of Object.entries(botResponses)) {\n                if (userMessage.includes(keyword)) {\n                    return response;\n                }\n            }\n\n            // If no match, return default response\n            return botResponses.default;\n        }\n    });\n</script>\n', PosixPath('attached_assets/DataAnalyzerPro/templates/pages/support.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 55d18ef339bd49335ceeaee9a9844ca25205b52e30790284f256dd71e6b8a21e4b1aface92e6ec5ddcc26e47e7f7ee90e4b5e3dd975e7bc9e236c460ee04eaff_0
2025-06-07 10:42:11,647 - semgrep.rule_match - DEBUG - match_key = ('\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        const chatForm = document.getElementById(\'chatForm\');\n        const userMessageInput = document.getElementById(\'userMessage\');\n        const chatMessages = document.getElementById(\'chatMessages\');\n\n        // Sample responses for the chatbot\n        const botResponses = {\n            \'hello\': \'Hello! How can I help you today?\',\n            \'hi\': \'Hi there! How can I assist you with Fixio?\',\n            \'help\': \'I\\\'m here to help! What specifically do you need assistance with?\',\n            \'merge pdf\': \'To merge PDF files, go to our PDF Merger tool in the PDF Tools section. Upload the PDF files you want to combine, arrange them in the desired order, and click "Merge PDFs". You can then download the merged file.\',\n            \'remove background\': \'To remove an image background, navigate to the Background Remover tool in the Image Tools section. Upload your image, and our AI will automatically detect and remove the background, creating a transparent PNG.\',\n            \'edit excel\': \'You can edit Excel files using our AI Excel Assistant. Simply upload your Excel file, then describe in plain language what changes you want to make. For example, "Sort column A alphabetically" or "Create a sum of all values in column B".\',\n            \'subscription\': \'For subscription-related questions, please go to your Account Settings > Billing section. There you can view your current plan, update payment methods, or manage your subscription.\',\n            \'password\': \'To reset your password, click on the "Forgot Password" link on the login page. We\\\'ll send you an email with instructions to create a new password.\',\n            \'contact\': \'You can reach our support team via email at support@fixio.tools. For Pro and Enterprise users, we also offer priority support with faster response times.\',\n            \'pricing\': \'We offer three plans: Free, Pro ($5/month), and Enterprise (custom pricing). You can view detailed pricing information on our Pricing page.\',\n            \'refund\': \'We offer a 14-day money-back guarantee for Pro subscriptions. Please contact our support team to request a refund if you\\\'re within this period.\',\n            \'default\': \'I don\\\'t have specific information about that yet. Please email our support team at support@fixio.tools for more detailed assistance.\'\n        };\n\n        // Handle form submission\n        chatForm.addEventListener(\'submit\', function(e) {\n            e.preventDefault();\n\n            const userMessage = userMessageInput.value.trim();\n            if (!userMessage) return;\n\n            // Add user message to chat\n            addMessage(userMessage, \'user\');\n\n            // Clear input\n            userMessageInput.value = \'\';\n\n            // Simulate bot "typing"\n            setTimeout(function() {\n                // Get bot response\n                const botResponse = getBotResponse(userMessage);\n\n                // Add bot response to chat\n                addMessage(botResponse, \'bot\');\n\n                // Scroll to bottom\n                chatMessages.scrollTop = chatMessages.scrollHeight;\n            }, 1000);\n        });\n\n        // Function to add message to chat\n        function addMessage(message, sender) {\n            const messageDiv = document.createElement(\'div\');\n            messageDiv.className = `message ${sender}-message`;\n\n            const messageContent = document.createElement(\'div\');\n            messageContent.className = \'message-content\';\n            messageContent.innerHTML = `<p>${message}</p>`;\n\n            messageDiv.appendChild(messageContent);\n            chatMessages.appendChild(messageDiv);\n\n            // Scroll to bottom\n            chatMessages.scrollTop = chatMessages.scrollHeight;\n        }\n\n        // Function to get bot response based on user message\n        function getBotResponse(userMessage) {\n            userMessage = userMessage.toLowerCase();\n\n            // Check each keyword for a match\n            for (const [keyword, response] of Object.entries(botResponses)) {\n                if (userMessage.includes(keyword)) {\n                    return response;\n                }\n            }\n\n            // If no match, return default response\n            return botResponses.default;\n        }\n    });\n $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        const chatForm = document.getElementById(\'chatForm\');\n        const userMessageInput = document.getElementById(\'userMessage\');\n        const chatMessages = document.getElementById(\'chatMessages\');\n\n        // Sample responses for the chatbot\n        const botResponses = {\n            \'hello\': \'Hello! How can I help you today?\',\n            \'hi\': \'Hi there! How can I assist you with Fixio?\',\n            \'help\': \'I\\\'m here to help! What specifically do you need assistance with?\',\n            \'merge pdf\': \'To merge PDF files, go to our PDF Merger tool in the PDF Tools section. Upload the PDF files you want to combine, arrange them in the desired order, and click "Merge PDFs". You can then download the merged file.\',\n            \'remove background\': \'To remove an image background, navigate to the Background Remover tool in the Image Tools section. Upload your image, and our AI will automatically detect and remove the background, creating a transparent PNG.\',\n            \'edit excel\': \'You can edit Excel files using our AI Excel Assistant. Simply upload your Excel file, then describe in plain language what changes you want to make. For example, "Sort column A alphabetically" or "Create a sum of all values in column B".\',\n            \'subscription\': \'For subscription-related questions, please go to your Account Settings > Billing section. There you can view your current plan, update payment methods, or manage your subscription.\',\n            \'password\': \'To reset your password, click on the "Forgot Password" link on the login page. We\\\'ll send you an email with instructions to create a new password.\',\n            \'contact\': \'You can reach our support team via email at support@fixio.tools. For Pro and Enterprise users, we also offer priority support with faster response times.\',\n            \'pricing\': \'We offer three plans: Free, Pro ($5/month), and Enterprise (custom pricing). You can view detailed pricing information on our Pricing page.\',\n            \'refund\': \'We offer a 14-day money-back guarantee for Pro subscriptions. Please contact our support team to request a refund if you\\\'re within this period.\',\n            \'default\': \'I don\\\'t have specific information about that yet. Please email our support team at support@fixio.tools for more detailed assistance.\'\n        };\n\n        // Handle form submission\n        chatForm.addEventListener(\'submit\', function(e) {\n            e.preventDefault();\n\n            const userMessage = userMessageInput.value.trim();\n            if (!userMessage) return;\n\n            // Add user message to chat\n            addMessage(userMessage, \'user\');\n\n            // Clear input\n            userMessageInput.value = \'\';\n\n            // Simulate bot "typing"\n            setTimeout(function() {\n                // Get bot response\n                const botResponse = getBotResponse(userMessage);\n\n                // Add bot response to chat\n                addMessage(botResponse, \'bot\');\n\n                // Scroll to bottom\n                chatMessages.scrollTop = chatMessages.scrollHeight;\n            }, 1000);\n        });\n\n        // Function to add message to chat\n        function addMessage(message, sender) {\n            const messageDiv = document.createElement(\'div\');\n            messageDiv.className = `message ${sender}-message`;\n\n            const messageContent = document.createElement(\'div\');\n            messageContent.className = \'message-content\';\n            messageContent.innerHTML = `<p>${message}</p>`;\n\n            messageDiv.appendChild(messageContent);\n            chatMessages.appendChild(messageDiv);\n\n            // Scroll to bottom\n            chatMessages.scrollTop = chatMessages.scrollHeight;\n        }\n\n        // Function to get bot response based on user message\n        function getBotResponse(userMessage) {\n            userMessage = userMessage.toLowerCase();\n\n            // Check each keyword for a match\n            for (const [keyword, response] of Object.entries(botResponses)) {\n                if (userMessage.includes(keyword)) {\n                    return response;\n                }\n            }\n\n            // If no match, return default response\n            return botResponses.default;\n        }\n    });\n</script>\n', PosixPath('attached_assets/DataAnalyzerPro/templates/pages/support.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 55d18ef339bd49335ceeaee9a9844ca25205b52e30790284f256dd71e6b8a21e4b1aface92e6ec5ddcc26e47e7f7ee90e4b5e3dd975e7bc9e236c460ee04eaff_0
2025-06-07 10:42:11,649 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/templates/pdf_merger.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 9a2a676283343cee2a696b139f88acf0f6067b4c709e89caea3efa7b3950cd3ea8ece0e2e6ec4b4d6263052d1412c58f0f493af900051aa5af367f495337aad6_0
2025-06-07 10:42:11,651 - semgrep.rule_match - DEBUG - match_key = ('\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        const fileCountInput = document.getElementById(\'file_count\');\n        const dynamicFileUploads = document.getElementById(\'dynamic-file-uploads\');\n        const bulkUploadCheckbox = document.getElementById(\'use_multiple_upload\');\n        const bulkUploadContainer = document.getElementById(\'bulk-upload-container\');\n        \n        // Initialize file upload containers\n        setupFileUploadContainers();\n        \n        // Update file upload fields when file count changes\n        fileCountInput.addEventListener(\'change\', function() {\n            updateFileUploadFields();\n        });\n        \n        // Toggle between individual uploads and bulk upload\n        bulkUploadCheckbox.addEventListener(\'change\', function() {\n            if (this.checked) {\n                dynamicFileUploads.style.display = \'none\';\n                bulkUploadContainer.style.display = \'block\';\n                \n                // Make individual file inputs not required\n                const fileInputs = dynamicFileUploads.querySelectorAll(\'input[type="file"]\');\n                fileInputs.forEach(input => {\n                    input.required = false;\n                });\n            } else {\n                dynamicFileUploads.style.display = \'block\';\n                bulkUploadContainer.style.display = \'none\';\n                \n                // Make individual file inputs required again\n                const fileInputs = dynamicFileUploads.querySelectorAll(\'input[type="file"]\');\n                fileInputs.forEach(input => {\n                    input.required = true;\n                });\n            }\n        });\n        \n        // Update file upload fields based on count\n        function updateFileUploadFields() {\n            let count = parseInt(fileCountInput.value);\n            \n            // Enforce min/max constraints\n            if (count < 2) {\n                count = 2;\n                fileCountInput.value = 2;\n            } else if (count > 20) {\n                count = 20;\n                fileCountInput.value = 20;\n            }\n            \n            // Clear existing file upload containers\n            dynamicFileUploads.innerHTML = \'\';\n            \n            // Create file upload containers based on count\n            for (let i = 1; i <= count; i++) {\n                const container = document.createElement(\'div\');\n                container.className = \'file-upload-container mb-3\';\n                container.innerHTML = `\n                    <label class="form-label">File ${i}</label>\n                    <div class="file-upload">\n                        <i class="fas fa-file-pdf file-upload-icon"></i>\n                        <p class="upload-text mb-2">Click to upload PDF</p>\n                        <input type="file" name="file_${i}" accept=".pdf" class="file-input d-none" required>\n                    </div>\n                    <div class="file-info"></div>\n                `;\n                dynamicFileUploads.appendChild(container);\n            }\n            \n            // Setup event listeners for new file upload containers\n            setupFileUploadContainers();\n        }\n        \n        // Setup file upload containers with event listeners\n        function setupFileUploadContainers() {\n            // Setup dynamic file uploads\n            const dynamicContainers = dynamicFileUploads.querySelectorAll(\'.file-upload-container\');\n            dynamicContainers.forEach(container => {\n                const fileUpload = container.querySelector(\'.file-upload\');\n                const fileInput = container.querySelector(\'input[type="file"]\');\n                const fileInfo = container.querySelector(\'.file-info\');\n                \n                fileUpload.addEventListener(\'click\', function() {\n                    fileInput.click();\n                });\n                \n                fileInput.addEventListener(\'change\', function() {\n                    handleFileSelection(this, fileInfo, fileUpload);\n                });\n            });\n            \n            // Setup bulk file upload\n            const bulkFileUpload = bulkUploadContainer.querySelector(\'.file-upload\');\n            const bulkFileInput = bulkUploadContainer.querySelector(\'input[type="file"]\');\n            const bulkFileList = bulkUploadContainer.querySelector(\'.file-list\');\n            \n            bulkFileUpload.addEventListener(\'click\', function() {\n                bulkFileInput.click();\n            });\n            \n            bulkFileInput.addEventListener(\'change\', function() {\n                handleBulkFileSelection(this, bulkFileList);\n            });\n        }\n        \n        // Handle individual file selection\n        function handleFileSelection(input, fileInfo, fileUpload) {\n            if (input.files && input.files[0]) {\n                const file = input.files[0];\n                fileInfo.innerHTML = `\n                    <div class="file-item mt-2">\n                        <i class="fas fa-file-pdf me-2 text-primary"></i>\n                        <span class="file-name">${file.name}</span>\n                        <span class="file-size ms-2 text-muted">(${formatFileSize(file.size)})</span>\n                    </div>\n                `;\n                fileUpload.classList.add(\'file-selected\');\n            } else {\n                fileInfo.innerHTML = \'\';\n                fileUpload.classList.remove(\'file-selected\');\n            }\n        }\n        \n        // Handle bulk file selection\n        function handleBulkFileSelection(input, fileList) {\n            fileList.innerHTML = \'\';\n            \n            if (input.files && input.files.length > 0) {\n                for (let i = 0; i < input.files.length; i++) {\n                    const file = input.files[i];\n                    const fileItem = document.createElement(\'div\');\n                    fileItem.className = \'file-item\';\n                    fileItem.innerHTML = `\n                        <i class="fas fa-file-pdf me-2 text-primary"></i>\n                        <span class="file-name">${file.name}</span>\n                        <span class="file-size ms-2 text-muted">(${formatFileSize(file.size)})</span>\n                    `;\n                    fileList.appendChild(fileItem);\n                }\n            }\n        }\n        \n        // Format file size\n        function formatFileSize(bytes) {\n            if (bytes === 0) return \'0 Bytes\';\n            \n            const k = 1024;\n            const sizes = [\'Bytes\', \'KB\', \'MB\', \'GB\'];\n            const i = Math.floor(Math.log(bytes) / Math.log(k));\n            \n            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \' \' + sizes[i];\n        }\n    });\n $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        const fileCountInput = document.getElementById(\'file_count\');\n        const dynamicFileUploads = document.getElementById(\'dynamic-file-uploads\');\n        const bulkUploadCheckbox = document.getElementById(\'use_multiple_upload\');\n        const bulkUploadContainer = document.getElementById(\'bulk-upload-container\');\n        \n        // Initialize file upload containers\n        setupFileUploadContainers();\n        \n        // Update file upload fields when file count changes\n        fileCountInput.addEventListener(\'change\', function() {\n            updateFileUploadFields();\n        });\n        \n        // Toggle between individual uploads and bulk upload\n        bulkUploadCheckbox.addEventListener(\'change\', function() {\n            if (this.checked) {\n                dynamicFileUploads.style.display = \'none\';\n                bulkUploadContainer.style.display = \'block\';\n                \n                // Make individual file inputs not required\n                const fileInputs = dynamicFileUploads.querySelectorAll(\'input[type="file"]\');\n                fileInputs.forEach(input => {\n                    input.required = false;\n                });\n            } else {\n                dynamicFileUploads.style.display = \'block\';\n                bulkUploadContainer.style.display = \'none\';\n                \n                // Make individual file inputs required again\n                const fileInputs = dynamicFileUploads.querySelectorAll(\'input[type="file"]\');\n                fileInputs.forEach(input => {\n                    input.required = true;\n                });\n            }\n        });\n        \n        // Update file upload fields based on count\n        function updateFileUploadFields() {\n            let count = parseInt(fileCountInput.value);\n            \n            // Enforce min/max constraints\n            if (count < 2) {\n                count = 2;\n                fileCountInput.value = 2;\n            } else if (count > 20) {\n                count = 20;\n                fileCountInput.value = 20;\n            }\n            \n            // Clear existing file upload containers\n            dynamicFileUploads.innerHTML = \'\';\n            \n            // Create file upload containers based on count\n            for (let i = 1; i <= count; i++) {\n                const container = document.createElement(\'div\');\n                container.className = \'file-upload-container mb-3\';\n                container.innerHTML = `\n                    <label class="form-label">File ${i}</label>\n                    <div class="file-upload">\n                        <i class="fas fa-file-pdf file-upload-icon"></i>\n                        <p class="upload-text mb-2">Click to upload PDF</p>\n                        <input type="file" name="file_${i}" accept=".pdf" class="file-input d-none" required>\n                    </div>\n                    <div class="file-info"></div>\n                `;\n                dynamicFileUploads.appendChild(container);\n            }\n            \n            // Setup event listeners for new file upload containers\n            setupFileUploadContainers();\n        }\n        \n        // Setup file upload containers with event listeners\n        function setupFileUploadContainers() {\n            // Setup dynamic file uploads\n            const dynamicContainers = dynamicFileUploads.querySelectorAll(\'.file-upload-container\');\n            dynamicContainers.forEach(container => {\n                const fileUpload = container.querySelector(\'.file-upload\');\n                const fileInput = container.querySelector(\'input[type="file"]\');\n                const fileInfo = container.querySelector(\'.file-info\');\n                \n                fileUpload.addEventListener(\'click\', function() {\n                    fileInput.click();\n                });\n                \n                fileInput.addEventListener(\'change\', function() {\n                    handleFileSelection(this, fileInfo, fileUpload);\n                });\n            });\n            \n            // Setup bulk file upload\n            const bulkFileUpload = bulkUploadContainer.querySelector(\'.file-upload\');\n            const bulkFileInput = bulkUploadContainer.querySelector(\'input[type="file"]\');\n            const bulkFileList = bulkUploadContainer.querySelector(\'.file-list\');\n            \n            bulkFileUpload.addEventListener(\'click\', function() {\n                bulkFileInput.click();\n            });\n            \n            bulkFileInput.addEventListener(\'change\', function() {\n                handleBulkFileSelection(this, bulkFileList);\n            });\n        }\n        \n        // Handle individual file selection\n        function handleFileSelection(input, fileInfo, fileUpload) {\n            if (input.files && input.files[0]) {\n                const file = input.files[0];\n                fileInfo.innerHTML = `\n                    <div class="file-item mt-2">\n                        <i class="fas fa-file-pdf me-2 text-primary"></i>\n                        <span class="file-name">${file.name}</span>\n                        <span class="file-size ms-2 text-muted">(${formatFileSize(file.size)})</span>\n                    </div>\n                `;\n                fileUpload.classList.add(\'file-selected\');\n            } else {\n                fileInfo.innerHTML = \'\';\n                fileUpload.classList.remove(\'file-selected\');\n            }\n        }\n        \n        // Handle bulk file selection\n        function handleBulkFileSelection(input, fileList) {\n            fileList.innerHTML = \'\';\n            \n            if (input.files && input.files.length > 0) {\n                for (let i = 0; i < input.files.length; i++) {\n                    const file = input.files[i];\n                    const fileItem = document.createElement(\'div\');\n                    fileItem.className = \'file-item\';\n                    fileItem.innerHTML = `\n                        <i class="fas fa-file-pdf me-2 text-primary"></i>\n                        <span class="file-name">${file.name}</span>\n                        <span class="file-size ms-2 text-muted">(${formatFileSize(file.size)})</span>\n                    `;\n                    fileList.appendChild(fileItem);\n                }\n            }\n        }\n        \n        // Format file size\n        function formatFileSize(bytes) {\n            if (bytes === 0) return \'0 Bytes\';\n            \n            const k = 1024;\n            const sizes = [\'Bytes\', \'KB\', \'MB\', \'GB\'];\n            const i = Math.floor(Math.log(bytes) / Math.log(k));\n            \n            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \' \' + sizes[i];\n        }\n    });\n</script>\n', PosixPath('attached_assets/DataAnalyzerPro/templates/pdf_merger.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 62d0ef3515a0aa610fd8672f84fefd3cac8ebfe567b5cb719a1ed53bba39178131b24ac75f86f5faac2b37ad614d913585b4667da8bfded7673095428474c504_0
2025-06-07 10:42:11,652 - semgrep.rule_match - DEBUG - match_key = ('\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        const fileCountInput = document.getElementById(\'file_count\');\n        const dynamicFileUploads = document.getElementById(\'dynamic-file-uploads\');\n        const bulkUploadCheckbox = document.getElementById(\'use_multiple_upload\');\n        const bulkUploadContainer = document.getElementById(\'bulk-upload-container\');\n        \n        // Initialize file upload containers\n        setupFileUploadContainers();\n        \n        // Update file upload fields when file count changes\n        fileCountInput.addEventListener(\'change\', function() {\n            updateFileUploadFields();\n        });\n        \n        // Toggle between individual uploads and bulk upload\n        bulkUploadCheckbox.addEventListener(\'change\', function() {\n            if (this.checked) {\n                dynamicFileUploads.style.display = \'none\';\n                bulkUploadContainer.style.display = \'block\';\n                \n                // Make individual file inputs not required\n                const fileInputs = dynamicFileUploads.querySelectorAll(\'input[type="file"]\');\n                fileInputs.forEach(input => {\n                    input.required = false;\n                });\n            } else {\n                dynamicFileUploads.style.display = \'block\';\n                bulkUploadContainer.style.display = \'none\';\n                \n                // Make individual file inputs required again\n                const fileInputs = dynamicFileUploads.querySelectorAll(\'input[type="file"]\');\n                fileInputs.forEach(input => {\n                    input.required = true;\n                });\n            }\n        });\n        \n        // Update file upload fields based on count\n        function updateFileUploadFields() {\n            let count = parseInt(fileCountInput.value);\n            \n            // Enforce min/max constraints\n            if (count < 2) {\n                count = 2;\n                fileCountInput.value = 2;\n            } else if (count > 20) {\n                count = 20;\n                fileCountInput.value = 20;\n            }\n            \n            // Clear existing file upload containers\n            dynamicFileUploads.innerHTML = \'\';\n            \n            // Create file upload containers based on count\n            for (let i = 1; i <= count; i++) {\n                const container = document.createElement(\'div\');\n                container.className = \'file-upload-container mb-3\';\n                container.innerHTML = `\n                    <label class="form-label">File ${i}</label>\n                    <div class="file-upload">\n                        <i class="fas fa-file-pdf file-upload-icon"></i>\n                        <p class="upload-text mb-2">Click to upload PDF</p>\n                        <input type="file" name="file_${i}" accept=".pdf" class="file-input d-none" required>\n                    </div>\n                    <div class="file-info"></div>\n                `;\n                dynamicFileUploads.appendChild(container);\n            }\n            \n            // Setup event listeners for new file upload containers\n            setupFileUploadContainers();\n        }\n        \n        // Setup file upload containers with event listeners\n        function setupFileUploadContainers() {\n            // Setup dynamic file uploads\n            const dynamicContainers = dynamicFileUploads.querySelectorAll(\'.file-upload-container\');\n            dynamicContainers.forEach(container => {\n                const fileUpload = container.querySelector(\'.file-upload\');\n                const fileInput = container.querySelector(\'input[type="file"]\');\n                const fileInfo = container.querySelector(\'.file-info\');\n                \n                fileUpload.addEventListener(\'click\', function() {\n                    fileInput.click();\n                });\n                \n                fileInput.addEventListener(\'change\', function() {\n                    handleFileSelection(this, fileInfo, fileUpload);\n                });\n            });\n            \n            // Setup bulk file upload\n            const bulkFileUpload = bulkUploadContainer.querySelector(\'.file-upload\');\n            const bulkFileInput = bulkUploadContainer.querySelector(\'input[type="file"]\');\n            const bulkFileList = bulkUploadContainer.querySelector(\'.file-list\');\n            \n            bulkFileUpload.addEventListener(\'click\', function() {\n                bulkFileInput.click();\n            });\n            \n            bulkFileInput.addEventListener(\'change\', function() {\n                handleBulkFileSelection(this, bulkFileList);\n            });\n        }\n        \n        // Handle individual file selection\n        function handleFileSelection(input, fileInfo, fileUpload) {\n            if (input.files && input.files[0]) {\n                const file = input.files[0];\n                fileInfo.innerHTML = `\n                    <div class="file-item mt-2">\n                        <i class="fas fa-file-pdf me-2 text-primary"></i>\n                        <span class="file-name">${file.name}</span>\n                        <span class="file-size ms-2 text-muted">(${formatFileSize(file.size)})</span>\n                    </div>\n                `;\n                fileUpload.classList.add(\'file-selected\');\n            } else {\n                fileInfo.innerHTML = \'\';\n                fileUpload.classList.remove(\'file-selected\');\n            }\n        }\n        \n        // Handle bulk file selection\n        function handleBulkFileSelection(input, fileList) {\n            fileList.innerHTML = \'\';\n            \n            if (input.files && input.files.length > 0) {\n                for (let i = 0; i < input.files.length; i++) {\n                    const file = input.files[i];\n                    const fileItem = document.createElement(\'div\');\n                    fileItem.className = \'file-item\';\n                    fileItem.innerHTML = `\n                        <i class="fas fa-file-pdf me-2 text-primary"></i>\n                        <span class="file-name">${file.name}</span>\n                        <span class="file-size ms-2 text-muted">(${formatFileSize(file.size)})</span>\n                    `;\n                    fileList.appendChild(fileItem);\n                }\n            }\n        }\n        \n        // Format file size\n        function formatFileSize(bytes) {\n            if (bytes === 0) return \'0 Bytes\';\n            \n            const k = 1024;\n            const sizes = [\'Bytes\', \'KB\', \'MB\', \'GB\'];\n            const i = Math.floor(Math.log(bytes) / Math.log(k));\n            \n            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \' \' + sizes[i];\n        }\n    });\n $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        const fileCountInput = document.getElementById(\'file_count\');\n        const dynamicFileUploads = document.getElementById(\'dynamic-file-uploads\');\n        const bulkUploadCheckbox = document.getElementById(\'use_multiple_upload\');\n        const bulkUploadContainer = document.getElementById(\'bulk-upload-container\');\n        \n        // Initialize file upload containers\n        setupFileUploadContainers();\n        \n        // Update file upload fields when file count changes\n        fileCountInput.addEventListener(\'change\', function() {\n            updateFileUploadFields();\n        });\n        \n        // Toggle between individual uploads and bulk upload\n        bulkUploadCheckbox.addEventListener(\'change\', function() {\n            if (this.checked) {\n                dynamicFileUploads.style.display = \'none\';\n                bulkUploadContainer.style.display = \'block\';\n                \n                // Make individual file inputs not required\n                const fileInputs = dynamicFileUploads.querySelectorAll(\'input[type="file"]\');\n                fileInputs.forEach(input => {\n                    input.required = false;\n                });\n            } else {\n                dynamicFileUploads.style.display = \'block\';\n                bulkUploadContainer.style.display = \'none\';\n                \n                // Make individual file inputs required again\n                const fileInputs = dynamicFileUploads.querySelectorAll(\'input[type="file"]\');\n                fileInputs.forEach(input => {\n                    input.required = true;\n                });\n            }\n        });\n        \n        // Update file upload fields based on count\n        function updateFileUploadFields() {\n            let count = parseInt(fileCountInput.value);\n            \n            // Enforce min/max constraints\n            if (count < 2) {\n                count = 2;\n                fileCountInput.value = 2;\n            } else if (count > 20) {\n                count = 20;\n                fileCountInput.value = 20;\n            }\n            \n            // Clear existing file upload containers\n            dynamicFileUploads.innerHTML = \'\';\n            \n            // Create file upload containers based on count\n            for (let i = 1; i <= count; i++) {\n                const container = document.createElement(\'div\');\n                container.className = \'file-upload-container mb-3\';\n                container.innerHTML = `\n                    <label class="form-label">File ${i}</label>\n                    <div class="file-upload">\n                        <i class="fas fa-file-pdf file-upload-icon"></i>\n                        <p class="upload-text mb-2">Click to upload PDF</p>\n                        <input type="file" name="file_${i}" accept=".pdf" class="file-input d-none" required>\n                    </div>\n                    <div class="file-info"></div>\n                `;\n                dynamicFileUploads.appendChild(container);\n            }\n            \n            // Setup event listeners for new file upload containers\n            setupFileUploadContainers();\n        }\n        \n        // Setup file upload containers with event listeners\n        function setupFileUploadContainers() {\n            // Setup dynamic file uploads\n            const dynamicContainers = dynamicFileUploads.querySelectorAll(\'.file-upload-container\');\n            dynamicContainers.forEach(container => {\n                const fileUpload = container.querySelector(\'.file-upload\');\n                const fileInput = container.querySelector(\'input[type="file"]\');\n                const fileInfo = container.querySelector(\'.file-info\');\n                \n                fileUpload.addEventListener(\'click\', function() {\n                    fileInput.click();\n                });\n                \n                fileInput.addEventListener(\'change\', function() {\n                    handleFileSelection(this, fileInfo, fileUpload);\n                });\n            });\n            \n            // Setup bulk file upload\n            const bulkFileUpload = bulkUploadContainer.querySelector(\'.file-upload\');\n            const bulkFileInput = bulkUploadContainer.querySelector(\'input[type="file"]\');\n            const bulkFileList = bulkUploadContainer.querySelector(\'.file-list\');\n            \n            bulkFileUpload.addEventListener(\'click\', function() {\n                bulkFileInput.click();\n            });\n            \n            bulkFileInput.addEventListener(\'change\', function() {\n                handleBulkFileSelection(this, bulkFileList);\n            });\n        }\n        \n        // Handle individual file selection\n        function handleFileSelection(input, fileInfo, fileUpload) {\n            if (input.files && input.files[0]) {\n                const file = input.files[0];\n                fileInfo.innerHTML = `\n                    <div class="file-item mt-2">\n                        <i class="fas fa-file-pdf me-2 text-primary"></i>\n                        <span class="file-name">${file.name}</span>\n                        <span class="file-size ms-2 text-muted">(${formatFileSize(file.size)})</span>\n                    </div>\n                `;\n                fileUpload.classList.add(\'file-selected\');\n            } else {\n                fileInfo.innerHTML = \'\';\n                fileUpload.classList.remove(\'file-selected\');\n            }\n        }\n        \n        // Handle bulk file selection\n        function handleBulkFileSelection(input, fileList) {\n            fileList.innerHTML = \'\';\n            \n            if (input.files && input.files.length > 0) {\n                for (let i = 0; i < input.files.length; i++) {\n                    const file = input.files[i];\n                    const fileItem = document.createElement(\'div\');\n                    fileItem.className = \'file-item\';\n                    fileItem.innerHTML = `\n                        <i class="fas fa-file-pdf me-2 text-primary"></i>\n                        <span class="file-name">${file.name}</span>\n                        <span class="file-size ms-2 text-muted">(${formatFileSize(file.size)})</span>\n                    `;\n                    fileList.appendChild(fileItem);\n                }\n            }\n        }\n        \n        // Format file size\n        function formatFileSize(bytes) {\n            if (bytes === 0) return \'0 Bytes\';\n            \n            const k = 1024;\n            const sizes = [\'Bytes\', \'KB\', \'MB\', \'GB\'];\n            const i = Math.floor(Math.log(bytes) / Math.log(k));\n            \n            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \' \' + sizes[i];\n        }\n    });\n</script>\n', PosixPath('attached_assets/DataAnalyzerPro/templates/pdf_merger.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 62d0ef3515a0aa610fd8672f84fefd3cac8ebfe567b5cb719a1ed53bba39178131b24ac75f86f5faac2b37ad614d913585b4667da8bfded7673095428474c504_0
2025-06-07 10:42:11,654 - semgrep.rule_match - DEBUG - match_key = ('\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        const fileCountInput = document.getElementById(\'file_count\');\n        const dynamicFileUploads = document.getElementById(\'dynamic-file-uploads\');\n        const bulkUploadCheckbox = document.getElementById(\'use_multiple_upload\');\n        const bulkUploadContainer = document.getElementById(\'bulk-upload-container\');\n        \n        // Initialize file upload containers\n        setupFileUploadContainers();\n        \n        // Update file upload fields when file count changes\n        fileCountInput.addEventListener(\'change\', function() {\n            updateFileUploadFields();\n        });\n        \n        // Toggle between individual uploads and bulk upload\n        bulkUploadCheckbox.addEventListener(\'change\', function() {\n            if (this.checked) {\n                dynamicFileUploads.style.display = \'none\';\n                bulkUploadContainer.style.display = \'block\';\n                \n                // Make individual file inputs not required\n                const fileInputs = dynamicFileUploads.querySelectorAll(\'input[type="file"]\');\n                fileInputs.forEach(input => {\n                    input.required = false;\n                });\n            } else {\n                dynamicFileUploads.style.display = \'block\';\n                bulkUploadContainer.style.display = \'none\';\n                \n                // Make individual file inputs required again\n                const fileInputs = dynamicFileUploads.querySelectorAll(\'input[type="file"]\');\n                fileInputs.forEach(input => {\n                    input.required = true;\n                });\n            }\n        });\n        \n        // Update file upload fields based on count\n        function updateFileUploadFields() {\n            let count = parseInt(fileCountInput.value);\n            \n            // Enforce min/max constraints\n            if (count < 2) {\n                count = 2;\n                fileCountInput.value = 2;\n            } else if (count > 20) {\n                count = 20;\n                fileCountInput.value = 20;\n            }\n            \n            // Clear existing file upload containers\n            dynamicFileUploads.innerHTML = \'\';\n            \n            // Create file upload containers based on count\n            for (let i = 1; i <= count; i++) {\n                const container = document.createElement(\'div\');\n                container.className = \'file-upload-container mb-3\';\n                container.innerHTML = `\n                    <label class="form-label">File ${i}</label>\n                    <div class="file-upload">\n                        <i class="fas fa-file-pdf file-upload-icon"></i>\n                        <p class="upload-text mb-2">Click to upload PDF</p>\n                        <input type="file" name="file_${i}" accept=".pdf" class="file-input d-none" required>\n                    </div>\n                    <div class="file-info"></div>\n                `;\n                dynamicFileUploads.appendChild(container);\n            }\n            \n            // Setup event listeners for new file upload containers\n            setupFileUploadContainers();\n        }\n        \n        // Setup file upload containers with event listeners\n        function setupFileUploadContainers() {\n            // Setup dynamic file uploads\n            const dynamicContainers = dynamicFileUploads.querySelectorAll(\'.file-upload-container\');\n            dynamicContainers.forEach(container => {\n                const fileUpload = container.querySelector(\'.file-upload\');\n                const fileInput = container.querySelector(\'input[type="file"]\');\n                const fileInfo = container.querySelector(\'.file-info\');\n                \n                fileUpload.addEventListener(\'click\', function() {\n                    fileInput.click();\n                });\n                \n                fileInput.addEventListener(\'change\', function() {\n                    handleFileSelection(this, fileInfo, fileUpload);\n                });\n            });\n            \n            // Setup bulk file upload\n            const bulkFileUpload = bulkUploadContainer.querySelector(\'.file-upload\');\n            const bulkFileInput = bulkUploadContainer.querySelector(\'input[type="file"]\');\n            const bulkFileList = bulkUploadContainer.querySelector(\'.file-list\');\n            \n            bulkFileUpload.addEventListener(\'click\', function() {\n                bulkFileInput.click();\n            });\n            \n            bulkFileInput.addEventListener(\'change\', function() {\n                handleBulkFileSelection(this, bulkFileList);\n            });\n        }\n        \n        // Handle individual file selection\n        function handleFileSelection(input, fileInfo, fileUpload) {\n            if (input.files && input.files[0]) {\n                const file = input.files[0];\n                fileInfo.innerHTML = `\n                    <div class="file-item mt-2">\n                        <i class="fas fa-file-pdf me-2 text-primary"></i>\n                        <span class="file-name">${file.name}</span>\n                        <span class="file-size ms-2 text-muted">(${formatFileSize(file.size)})</span>\n                    </div>\n                `;\n                fileUpload.classList.add(\'file-selected\');\n            } else {\n                fileInfo.innerHTML = \'\';\n                fileUpload.classList.remove(\'file-selected\');\n            }\n        }\n        \n        // Handle bulk file selection\n        function handleBulkFileSelection(input, fileList) {\n            fileList.innerHTML = \'\';\n            \n            if (input.files && input.files.length > 0) {\n                for (let i = 0; i < input.files.length; i++) {\n                    const file = input.files[i];\n                    const fileItem = document.createElement(\'div\');\n                    fileItem.className = \'file-item\';\n                    fileItem.innerHTML = `\n                        <i class="fas fa-file-pdf me-2 text-primary"></i>\n                        <span class="file-name">${file.name}</span>\n                        <span class="file-size ms-2 text-muted">(${formatFileSize(file.size)})</span>\n                    `;\n                    fileList.appendChild(fileItem);\n                }\n            }\n        }\n        \n        // Format file size\n        function formatFileSize(bytes) {\n            if (bytes === 0) return \'0 Bytes\';\n            \n            const k = 1024;\n            const sizes = [\'Bytes\', \'KB\', \'MB\', \'GB\'];\n            const i = Math.floor(Math.log(bytes) / Math.log(k));\n            \n            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \' \' + sizes[i];\n        }\n    });\n $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        const fileCountInput = document.getElementById(\'file_count\');\n        const dynamicFileUploads = document.getElementById(\'dynamic-file-uploads\');\n        const bulkUploadCheckbox = document.getElementById(\'use_multiple_upload\');\n        const bulkUploadContainer = document.getElementById(\'bulk-upload-container\');\n        \n        // Initialize file upload containers\n        setupFileUploadContainers();\n        \n        // Update file upload fields when file count changes\n        fileCountInput.addEventListener(\'change\', function() {\n            updateFileUploadFields();\n        });\n        \n        // Toggle between individual uploads and bulk upload\n        bulkUploadCheckbox.addEventListener(\'change\', function() {\n            if (this.checked) {\n                dynamicFileUploads.style.display = \'none\';\n                bulkUploadContainer.style.display = \'block\';\n                \n                // Make individual file inputs not required\n                const fileInputs = dynamicFileUploads.querySelectorAll(\'input[type="file"]\');\n                fileInputs.forEach(input => {\n                    input.required = false;\n                });\n            } else {\n                dynamicFileUploads.style.display = \'block\';\n                bulkUploadContainer.style.display = \'none\';\n                \n                // Make individual file inputs required again\n                const fileInputs = dynamicFileUploads.querySelectorAll(\'input[type="file"]\');\n                fileInputs.forEach(input => {\n                    input.required = true;\n                });\n            }\n        });\n        \n        // Update file upload fields based on count\n        function updateFileUploadFields() {\n            let count = parseInt(fileCountInput.value);\n            \n            // Enforce min/max constraints\n            if (count < 2) {\n                count = 2;\n                fileCountInput.value = 2;\n            } else if (count > 20) {\n                count = 20;\n                fileCountInput.value = 20;\n            }\n            \n            // Clear existing file upload containers\n            dynamicFileUploads.innerHTML = \'\';\n            \n            // Create file upload containers based on count\n            for (let i = 1; i <= count; i++) {\n                const container = document.createElement(\'div\');\n                container.className = \'file-upload-container mb-3\';\n                container.innerHTML = `\n                    <label class="form-label">File ${i}</label>\n                    <div class="file-upload">\n                        <i class="fas fa-file-pdf file-upload-icon"></i>\n                        <p class="upload-text mb-2">Click to upload PDF</p>\n                        <input type="file" name="file_${i}" accept=".pdf" class="file-input d-none" required>\n                    </div>\n                    <div class="file-info"></div>\n                `;\n                dynamicFileUploads.appendChild(container);\n            }\n            \n            // Setup event listeners for new file upload containers\n            setupFileUploadContainers();\n        }\n        \n        // Setup file upload containers with event listeners\n        function setupFileUploadContainers() {\n            // Setup dynamic file uploads\n            const dynamicContainers = dynamicFileUploads.querySelectorAll(\'.file-upload-container\');\n            dynamicContainers.forEach(container => {\n                const fileUpload = container.querySelector(\'.file-upload\');\n                const fileInput = container.querySelector(\'input[type="file"]\');\n                const fileInfo = container.querySelector(\'.file-info\');\n                \n                fileUpload.addEventListener(\'click\', function() {\n                    fileInput.click();\n                });\n                \n                fileInput.addEventListener(\'change\', function() {\n                    handleFileSelection(this, fileInfo, fileUpload);\n                });\n            });\n            \n            // Setup bulk file upload\n            const bulkFileUpload = bulkUploadContainer.querySelector(\'.file-upload\');\n            const bulkFileInput = bulkUploadContainer.querySelector(\'input[type="file"]\');\n            const bulkFileList = bulkUploadContainer.querySelector(\'.file-list\');\n            \n            bulkFileUpload.addEventListener(\'click\', function() {\n                bulkFileInput.click();\n            });\n            \n            bulkFileInput.addEventListener(\'change\', function() {\n                handleBulkFileSelection(this, bulkFileList);\n            });\n        }\n        \n        // Handle individual file selection\n        function handleFileSelection(input, fileInfo, fileUpload) {\n            if (input.files && input.files[0]) {\n                const file = input.files[0];\n                fileInfo.innerHTML = `\n                    <div class="file-item mt-2">\n                        <i class="fas fa-file-pdf me-2 text-primary"></i>\n                        <span class="file-name">${file.name}</span>\n                        <span class="file-size ms-2 text-muted">(${formatFileSize(file.size)})</span>\n                    </div>\n                `;\n                fileUpload.classList.add(\'file-selected\');\n            } else {\n                fileInfo.innerHTML = \'\';\n                fileUpload.classList.remove(\'file-selected\');\n            }\n        }\n        \n        // Handle bulk file selection\n        function handleBulkFileSelection(input, fileList) {\n            fileList.innerHTML = \'\';\n            \n            if (input.files && input.files.length > 0) {\n                for (let i = 0; i < input.files.length; i++) {\n                    const file = input.files[i];\n                    const fileItem = document.createElement(\'div\');\n                    fileItem.className = \'file-item\';\n                    fileItem.innerHTML = `\n                        <i class="fas fa-file-pdf me-2 text-primary"></i>\n                        <span class="file-name">${file.name}</span>\n                        <span class="file-size ms-2 text-muted">(${formatFileSize(file.size)})</span>\n                    `;\n                    fileList.appendChild(fileItem);\n                }\n            }\n        }\n        \n        // Format file size\n        function formatFileSize(bytes) {\n            if (bytes === 0) return \'0 Bytes\';\n            \n            const k = 1024;\n            const sizes = [\'Bytes\', \'KB\', \'MB\', \'GB\'];\n            const i = Math.floor(Math.log(bytes) / Math.log(k));\n            \n            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \' \' + sizes[i];\n        }\n    });\n</script>\n', PosixPath('attached_assets/DataAnalyzerPro/templates/pdf_merger.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 62d0ef3515a0aa610fd8672f84fefd3cac8ebfe567b5cb719a1ed53bba39178131b24ac75f86f5faac2b37ad614d913585b4667da8bfded7673095428474c504_0
2025-06-07 10:42:11,655 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('attached_assets/DataAnalyzerPro/utils/media_utils.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = bc9b04251cc53d9bc207b879fc939919b626eaf232c7a92b21206380d9e8381ef842caa43fcb587bf73ab84b6e959b995d9c3fd6df8c9d30c85edd564618d2d4_0
2025-06-07 10:42:11,655 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.run(*$ARR, ...) subprocess.run([*$ARR, ...]) subprocess.run("...", ...) subprocess.run(("...",...), ...) subprocess.run(...) subprocess.run(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.run("=~/(python)/","...",...) subprocess.run("=~/(python)/",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.run(("=~/(python)/","...",...),...) subprocess.run(("=~/(python)/",...),...) subprocess.run(["=~/(python)/",...],...) subprocess.run(["=~/(python)/","...",...],...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('attached_assets/DataAnalyzerPro/utils/media_utils.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 6deba8a5a430b2488ac23351a883374216b8ae31e1562e1bf34a468455d4b653ce1a7d1bfa6125cbf3c7a68e30975a73cc0d841cdf077843eb542f133c14b964_0
2025-06-07 10:42:11,656 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.run(*$ARR, ...) subprocess.run([*$ARR, ...]) subprocess.run("...", ...) subprocess.run(("...",...), ...) subprocess.run(...) subprocess.run(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.run("=~/(python)/","...",...) subprocess.run("=~/(python)/",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.run(("=~/(python)/","...",...),...) subprocess.run(("=~/(python)/",...),...) subprocess.run(["=~/(python)/",...],...) subprocess.run(["=~/(python)/","...",...],...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('attached_assets/DataAnalyzerPro/utils/media_utils.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 6deba8a5a430b2488ac23351a883374216b8ae31e1562e1bf34a468455d4b653ce1a7d1bfa6125cbf3c7a68e30975a73cc0d841cdf077843eb542f133c14b964_0
2025-06-07 10:42:11,656 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.run(*$ARR, ...) subprocess.run([*$ARR, ...]) subprocess.run("...", ...) subprocess.run(("...",...), ...) subprocess.run(...) subprocess.run(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.run("=~/(python)/","...",...) subprocess.run("=~/(python)/",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.run(("=~/(python)/","...",...),...) subprocess.run(("=~/(python)/",...),...) subprocess.run(["=~/(python)/",...],...) subprocess.run(["=~/(python)/","...",...],...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('attached_assets/DataAnalyzerPro/utils/media_utils.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = 6deba8a5a430b2488ac23351a883374216b8ae31e1562e1bf34a468455d4b653ce1a7d1bfa6125cbf3c7a68e30975a73cc0d841cdf077843eb542f133c14b964_0
2025-06-07 10:42:11,657 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = f5a1d78d28043340433dedc0a20165e63b50d9aa4305aede97be74105c8207b5b89db08fa6703decc4ec27aafa081254be07d38814f40c19f447cf4721551845_0
2025-06-07 10:42:11,657 - semgrep.rule_match - DEBUG - match_key = ('app.run(..., "0.0.0.0", ...) app.run(..., host="0.0.0.0", ...)', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = 5c1cbbc54bfaa7420b881ae9f997ad4b5ed5aa16b127a74e037d220112ac891aa501638c0e19641f765822573b5e6f14657485c6b72c0846fdec9bc63200dc57_0
2025-06-07 10:42:11,657 - semgrep.rule_match - DEBUG - match_key = ('app.run(..., "0.0.0.0", ...) app.run(..., host="0.0.0.0", ...)', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = 5c1cbbc54bfaa7420b881ae9f997ad4b5ed5aa16b127a74e037d220112ac891aa501638c0e19641f765822573b5e6f14657485c6b72c0846fdec9bc63200dc57_0
2025-06-07 10:42:11,658 - semgrep.rule_match - DEBUG - match_key = ('app.run(..., "0.0.0.0", ...) app.run(..., host="0.0.0.0", ...)', PosixPath('main.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = 5c1cbbc54bfaa7420b881ae9f997ad4b5ed5aa16b127a74e037d220112ac891aa501638c0e19641f765822573b5e6f14657485c6b72c0846fdec9bc63200dc57_0
2025-06-07 10:42:11,658 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/auth.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = aeef4980957b179b4d0b7069556c3688f45c8b590095eca9f0798bd53f5c795e11aa8d73d574d7a3d0fa6edf6882bf36f9c6094062d9d5d70a7e1ef5d6f1317a_0
2025-06-07 10:42:11,659 - semgrep.rule_match - DEBUG - match_key = ('next_page = flask.request.args\n...\nflask.redirect(<... next_page ...>, ...)\n next_page = flask.request.args(...)\n...\nflask.redirect(<... next_page ...>, ...)\n next_page = flask.request.args.get(...)\n...\nflask.redirect(<... next_page ...>, ...)\n next_page = flask.request.args[...]\n...\nflask.redirect(<... next_page ...>, ...)\n flask.redirect(<... flask.request.args ...>, ...) flask.redirect(<... flask.request.args(...) ...>, ...) flask.redirect(<... flask.request.args.get(...) ...>, ...) flask.redirect(<... flask.request.args[...] ...>, ...) @auth.route(...)\ndef login(...):\n  ...\n @auth.route(...)\ndef login(...):\n  ...\n  if <... werkzeug.urls.url_parse(next_page) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/auth.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 2f03653181ce4786f694187f6dad47815684d7a15282065a129b693e89f42d571a70609fcde1612a3dd99a053dde94344475c3bbc9483f569e315e43f420a85e_0
2025-06-07 10:42:11,659 - semgrep.rule_match - DEBUG - match_key = ('next_page = flask.request.args\n...\nflask.redirect(<... next_page ...>, ...)\n next_page = flask.request.args(...)\n...\nflask.redirect(<... next_page ...>, ...)\n next_page = flask.request.args.get(...)\n...\nflask.redirect(<... next_page ...>, ...)\n next_page = flask.request.args[...]\n...\nflask.redirect(<... next_page ...>, ...)\n flask.redirect(<... flask.request.args ...>, ...) flask.redirect(<... flask.request.args(...) ...>, ...) flask.redirect(<... flask.request.args.get(...) ...>, ...) flask.redirect(<... flask.request.args[...] ...>, ...) @auth.route(...)\ndef login(...):\n  ...\n @auth.route(...)\ndef login(...):\n  ...\n  if <... werkzeug.urls.url_parse(next_page) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/auth.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 2f03653181ce4786f694187f6dad47815684d7a15282065a129b693e89f42d571a70609fcde1612a3dd99a053dde94344475c3bbc9483f569e315e43f420a85e_0
2025-06-07 10:42:11,660 - semgrep.rule_match - DEBUG - match_key = ('next_page = flask.request.args\n...\nflask.redirect(<... next_page ...>, ...)\n next_page = flask.request.args(...)\n...\nflask.redirect(<... next_page ...>, ...)\n next_page = flask.request.args.get(...)\n...\nflask.redirect(<... next_page ...>, ...)\n next_page = flask.request.args[...]\n...\nflask.redirect(<... next_page ...>, ...)\n flask.redirect(<... flask.request.args ...>, ...) flask.redirect(<... flask.request.args(...) ...>, ...) flask.redirect(<... flask.request.args.get(...) ...>, ...) flask.redirect(<... flask.request.args[...] ...>, ...) @auth.route(...)\ndef login(...):\n  ...\n @auth.route(...)\ndef login(...):\n  ...\n  if <... werkzeug.urls.url_parse(next_page) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/auth.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 2f03653181ce4786f694187f6dad47815684d7a15282065a129b693e89f42d571a70609fcde1612a3dd99a053dde94344475c3bbc9483f569e315e43f420a85e_0
2025-06-07 10:42:11,660 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/auth.py'), 'config..semgrep.vendored-rules.python.django.security.audit.unvalidated-password') match_id = 4a6e5b3f578c57c74bdb45856e6a4b492357dd392b6d986b32d0444da30b7f23d075f6f5656f68cec129f07d8317db35b7fec4e7477b7c19e8d32bef17c35c37_0
2025-06-07 10:42:11,661 - semgrep.rule_match - DEBUG - match_key = ('new_user.set_password(password) UserModel().set_password(password) django.contrib.auth.password_validation.validate_password(...)\n...\n if <... django.contrib.auth.password_validation.validate_password(...) ...>:\n    ...\n try:\n  ...\n  django.contrib.auth.password_validation.validate_password(...)\n  ...\nexcept $EX as $E:\n  ...\n...\n try:\n  ...\n  django.contrib.auth.password_validation.validate_password(...)\n  ...\nexcept $EX:\n  ...\n...\n', PosixPath('routes/auth.py'), 'config..semgrep.vendored-rules.python.django.security.audit.unvalidated-password') match_id = 98908e30658e46e7434d04f9ff4b5635aa897418e0c5e6bf5e42a8a09cf536982642d472ae012b818732e2eb44178d3155efc45b64f64c6f451a93914d8464c6_0
2025-06-07 10:42:11,661 - semgrep.rule_match - DEBUG - match_key = ('new_user.set_password(password) UserModel().set_password(password) django.contrib.auth.password_validation.validate_password(...)\n...\n if <... django.contrib.auth.password_validation.validate_password(...) ...>:\n    ...\n try:\n  ...\n  django.contrib.auth.password_validation.validate_password(...)\n  ...\nexcept $EX as $E:\n  ...\n...\n try:\n  ...\n  django.contrib.auth.password_validation.validate_password(...)\n  ...\nexcept $EX:\n  ...\n...\n', PosixPath('routes/auth.py'), 'config..semgrep.vendored-rules.python.django.security.audit.unvalidated-password') match_id = 98908e30658e46e7434d04f9ff4b5635aa897418e0c5e6bf5e42a8a09cf536982642d472ae012b818732e2eb44178d3155efc45b64f64c6f451a93914d8464c6_0
2025-06-07 10:42:11,661 - semgrep.rule_match - DEBUG - match_key = ('new_user.set_password(password) UserModel().set_password(password) django.contrib.auth.password_validation.validate_password(...)\n...\n if <... django.contrib.auth.password_validation.validate_password(...) ...>:\n    ...\n try:\n  ...\n  django.contrib.auth.password_validation.validate_password(...)\n  ...\nexcept $EX as $E:\n  ...\n...\n try:\n  ...\n  django.contrib.auth.password_validation.validate_password(...)\n  ...\nexcept $EX:\n  ...\n...\n', PosixPath('routes/auth.py'), 'config..semgrep.vendored-rules.python.django.security.audit.unvalidated-password') match_id = 98908e30658e46e7434d04f9ff4b5635aa897418e0c5e6bf5e42a8a09cf536982642d472ae012b818732e2eb44178d3155efc45b64f64c6f451a93914d8464c6_0
2025-06-07 10:42:11,662 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 47e1ea2662cb4466a9982626ea95d442a14a513767e3b8cacb2f609e7b658fec4cfe9b5dd545f53d523356a77e3c3e43bc68da518362024051af0d6dd4fbee62_0
2025-06-07 10:42:11,663 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d1d23ffb903215b128b12b08152c04e6855308d22396ea62312fd251a1c8f13bb6626ea8a6e17718a8547665f0044440239541da82f7f7d2940e292f23600065_0
2025-06-07 10:42:11,663 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d1d23ffb903215b128b12b08152c04e6855308d22396ea62312fd251a1c8f13bb6626ea8a6e17718a8547665f0044440239541da82f7f7d2940e292f23600065_0
2025-06-07 10:42:11,663 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d1d23ffb903215b128b12b08152c04e6855308d22396ea62312fd251a1c8f13bb6626ea8a6e17718a8547665f0044440239541da82f7f7d2940e292f23600065_0
2025-06-07 10:42:11,664 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 47e1ea2662cb4466a9982626ea95d442a14a513767e3b8cacb2f609e7b658fec4cfe9b5dd545f53d523356a77e3c3e43bc68da518362024051af0d6dd4fbee62_0
2025-06-07 10:42:11,664 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d1d23ffb903215b128b12b08152c04e6855308d22396ea62312fd251a1c8f13bb6626ea8a6e17718a8547665f0044440239541da82f7f7d2940e292f23600065_0
2025-06-07 10:42:11,665 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d1d23ffb903215b128b12b08152c04e6855308d22396ea62312fd251a1c8f13bb6626ea8a6e17718a8547665f0044440239541da82f7f7d2940e292f23600065_0
2025-06-07 10:42:11,665 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d1d23ffb903215b128b12b08152c04e6855308d22396ea62312fd251a1c8f13bb6626ea8a6e17718a8547665f0044440239541da82f7f7d2940e292f23600065_1
2025-06-07 10:42:11,666 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 47e1ea2662cb4466a9982626ea95d442a14a513767e3b8cacb2f609e7b658fec4cfe9b5dd545f53d523356a77e3c3e43bc68da518362024051af0d6dd4fbee62_0
2025-06-07 10:42:11,666 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d1d23ffb903215b128b12b08152c04e6855308d22396ea62312fd251a1c8f13bb6626ea8a6e17718a8547665f0044440239541da82f7f7d2940e292f23600065_0
2025-06-07 10:42:11,667 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d1d23ffb903215b128b12b08152c04e6855308d22396ea62312fd251a1c8f13bb6626ea8a6e17718a8547665f0044440239541da82f7f7d2940e292f23600065_0
2025-06-07 10:42:11,667 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d1d23ffb903215b128b12b08152c04e6855308d22396ea62312fd251a1c8f13bb6626ea8a6e17718a8547665f0044440239541da82f7f7d2940e292f23600065_2
2025-06-07 10:42:11,667 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 47e1ea2662cb4466a9982626ea95d442a14a513767e3b8cacb2f609e7b658fec4cfe9b5dd545f53d523356a77e3c3e43bc68da518362024051af0d6dd4fbee62_0
2025-06-07 10:42:11,668 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d1d23ffb903215b128b12b08152c04e6855308d22396ea62312fd251a1c8f13bb6626ea8a6e17718a8547665f0044440239541da82f7f7d2940e292f23600065_0
2025-06-07 10:42:11,668 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d1d23ffb903215b128b12b08152c04e6855308d22396ea62312fd251a1c8f13bb6626ea8a6e17718a8547665f0044440239541da82f7f7d2940e292f23600065_0
2025-06-07 10:42:11,669 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d1d23ffb903215b128b12b08152c04e6855308d22396ea62312fd251a1c8f13bb6626ea8a6e17718a8547665f0044440239541da82f7f7d2940e292f23600065_3
2025-06-07 10:42:11,669 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 47e1ea2662cb4466a9982626ea95d442a14a513767e3b8cacb2f609e7b658fec4cfe9b5dd545f53d523356a77e3c3e43bc68da518362024051af0d6dd4fbee62_0
2025-06-07 10:42:11,670 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d1d23ffb903215b128b12b08152c04e6855308d22396ea62312fd251a1c8f13bb6626ea8a6e17718a8547665f0044440239541da82f7f7d2940e292f23600065_0
2025-06-07 10:42:11,670 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d1d23ffb903215b128b12b08152c04e6855308d22396ea62312fd251a1c8f13bb6626ea8a6e17718a8547665f0044440239541da82f7f7d2940e292f23600065_0
2025-06-07 10:42:11,670 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n @doc_tools.route(...)\ndef doc_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d1d23ffb903215b128b12b08152c04e6855308d22396ea62312fd251a1c8f13bb6626ea8a6e17718a8547665f0044440239541da82f7f7d2940e292f23600065_4
2025-06-07 10:42:11,671 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 47e1ea2662cb4466a9982626ea95d442a14a513767e3b8cacb2f609e7b658fec4cfe9b5dd545f53d523356a77e3c3e43bc68da518362024051af0d6dd4fbee62_0
2025-06-07 10:42:11,671 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 59ae4aab3e4a8f4ce09e4476ff4cf976fb6c2109c58767b9b0d9a47c186b04b93c4156c6785ddf19f277bf55bdcc4a9681ef58e21da4e6159be2bd424104528e_0
2025-06-07 10:42:11,672 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 59ae4aab3e4a8f4ce09e4476ff4cf976fb6c2109c58767b9b0d9a47c186b04b93c4156c6785ddf19f277bf55bdcc4a9681ef58e21da4e6159be2bd424104528e_0
2025-06-07 10:42:11,672 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 59ae4aab3e4a8f4ce09e4476ff4cf976fb6c2109c58767b9b0d9a47c186b04b93c4156c6785ddf19f277bf55bdcc4a9681ef58e21da4e6159be2bd424104528e_0
2025-06-07 10:42:11,673 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 47e1ea2662cb4466a9982626ea95d442a14a513767e3b8cacb2f609e7b658fec4cfe9b5dd545f53d523356a77e3c3e43bc68da518362024051af0d6dd4fbee62_0
2025-06-07 10:42:11,674 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 59ae4aab3e4a8f4ce09e4476ff4cf976fb6c2109c58767b9b0d9a47c186b04b93c4156c6785ddf19f277bf55bdcc4a9681ef58e21da4e6159be2bd424104528e_0
2025-06-07 10:42:11,674 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 59ae4aab3e4a8f4ce09e4476ff4cf976fb6c2109c58767b9b0d9a47c186b04b93c4156c6785ddf19f277bf55bdcc4a9681ef58e21da4e6159be2bd424104528e_0
2025-06-07 10:42:11,675 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 59ae4aab3e4a8f4ce09e4476ff4cf976fb6c2109c58767b9b0d9a47c186b04b93c4156c6785ddf19f277bf55bdcc4a9681ef58e21da4e6159be2bd424104528e_1
2025-06-07 10:42:11,675 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 47e1ea2662cb4466a9982626ea95d442a14a513767e3b8cacb2f609e7b658fec4cfe9b5dd545f53d523356a77e3c3e43bc68da518362024051af0d6dd4fbee62_0
2025-06-07 10:42:11,675 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 59ae4aab3e4a8f4ce09e4476ff4cf976fb6c2109c58767b9b0d9a47c186b04b93c4156c6785ddf19f277bf55bdcc4a9681ef58e21da4e6159be2bd424104528e_0
2025-06-07 10:42:11,676 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 59ae4aab3e4a8f4ce09e4476ff4cf976fb6c2109c58767b9b0d9a47c186b04b93c4156c6785ddf19f277bf55bdcc4a9681ef58e21da4e6159be2bd424104528e_0
2025-06-07 10:42:11,676 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 59ae4aab3e4a8f4ce09e4476ff4cf976fb6c2109c58767b9b0d9a47c186b04b93c4156c6785ddf19f277bf55bdcc4a9681ef58e21da4e6159be2bd424104528e_2
2025-06-07 10:42:11,677 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 47e1ea2662cb4466a9982626ea95d442a14a513767e3b8cacb2f609e7b658fec4cfe9b5dd545f53d523356a77e3c3e43bc68da518362024051af0d6dd4fbee62_0
2025-06-07 10:42:11,677 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 59ae4aab3e4a8f4ce09e4476ff4cf976fb6c2109c58767b9b0d9a47c186b04b93c4156c6785ddf19f277bf55bdcc4a9681ef58e21da4e6159be2bd424104528e_0
2025-06-07 10:42:11,678 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 59ae4aab3e4a8f4ce09e4476ff4cf976fb6c2109c58767b9b0d9a47c186b04b93c4156c6785ddf19f277bf55bdcc4a9681ef58e21da4e6159be2bd424104528e_0
2025-06-07 10:42:11,678 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 59ae4aab3e4a8f4ce09e4476ff4cf976fb6c2109c58767b9b0d9a47c186b04b93c4156c6785ddf19f277bf55bdcc4a9681ef58e21da4e6159be2bd424104528e_3
2025-06-07 10:42:11,678 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 47e1ea2662cb4466a9982626ea95d442a14a513767e3b8cacb2f609e7b658fec4cfe9b5dd545f53d523356a77e3c3e43bc68da518362024051af0d6dd4fbee62_0
2025-06-07 10:42:11,679 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 59ae4aab3e4a8f4ce09e4476ff4cf976fb6c2109c58767b9b0d9a47c186b04b93c4156c6785ddf19f277bf55bdcc4a9681ef58e21da4e6159be2bd424104528e_0
2025-06-07 10:42:11,679 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 59ae4aab3e4a8f4ce09e4476ff4cf976fb6c2109c58767b9b0d9a47c186b04b93c4156c6785ddf19f277bf55bdcc4a9681ef58e21da4e6159be2bd424104528e_0
2025-06-07 10:42:11,680 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n @doc_tools.route(...)\ndef ai_excel_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/doc_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 59ae4aab3e4a8f4ce09e4476ff4cf976fb6c2109c58767b9b0d9a47c186b04b93c4156c6785ddf19f277bf55bdcc4a9681ef58e21da4e6159be2bd424104528e_4
2025-06-07 10:42:11,680 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 12caa96115c082aaca7d780a8e6e234a6fe3695846e4a6d14325d9e71060f10798d1d057b2365c2d03004c5704b5e7baf62fd31e0701d76b90b56614e9e15d2a_0
2025-06-07 10:42:11,681 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 6feb8e3608f4df57634c709513fc7a1e75bbdbc9e403ce286ab86a77e2775969debb67a2387760445ebe42b1d8ac1e5321199be2e98d2e72ff1cf96d507bd20a_0
2025-06-07 10:42:11,681 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 6feb8e3608f4df57634c709513fc7a1e75bbdbc9e403ce286ab86a77e2775969debb67a2387760445ebe42b1d8ac1e5321199be2e98d2e72ff1cf96d507bd20a_0
2025-06-07 10:42:11,681 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 6feb8e3608f4df57634c709513fc7a1e75bbdbc9e403ce286ab86a77e2775969debb67a2387760445ebe42b1d8ac1e5321199be2e98d2e72ff1cf96d507bd20a_0
2025-06-07 10:42:11,682 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 12caa96115c082aaca7d780a8e6e234a6fe3695846e4a6d14325d9e71060f10798d1d057b2365c2d03004c5704b5e7baf62fd31e0701d76b90b56614e9e15d2a_0
2025-06-07 10:42:11,682 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 6feb8e3608f4df57634c709513fc7a1e75bbdbc9e403ce286ab86a77e2775969debb67a2387760445ebe42b1d8ac1e5321199be2e98d2e72ff1cf96d507bd20a_0
2025-06-07 10:42:11,683 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 6feb8e3608f4df57634c709513fc7a1e75bbdbc9e403ce286ab86a77e2775969debb67a2387760445ebe42b1d8ac1e5321199be2e98d2e72ff1cf96d507bd20a_0
2025-06-07 10:42:11,683 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 6feb8e3608f4df57634c709513fc7a1e75bbdbc9e403ce286ab86a77e2775969debb67a2387760445ebe42b1d8ac1e5321199be2e98d2e72ff1cf96d507bd20a_1
2025-06-07 10:42:11,683 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 12caa96115c082aaca7d780a8e6e234a6fe3695846e4a6d14325d9e71060f10798d1d057b2365c2d03004c5704b5e7baf62fd31e0701d76b90b56614e9e15d2a_0
2025-06-07 10:42:11,684 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 6feb8e3608f4df57634c709513fc7a1e75bbdbc9e403ce286ab86a77e2775969debb67a2387760445ebe42b1d8ac1e5321199be2e98d2e72ff1cf96d507bd20a_0
2025-06-07 10:42:11,684 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 6feb8e3608f4df57634c709513fc7a1e75bbdbc9e403ce286ab86a77e2775969debb67a2387760445ebe42b1d8ac1e5321199be2e98d2e72ff1cf96d507bd20a_0
2025-06-07 10:42:11,685 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 6feb8e3608f4df57634c709513fc7a1e75bbdbc9e403ce286ab86a77e2775969debb67a2387760445ebe42b1d8ac1e5321199be2e98d2e72ff1cf96d507bd20a_2
2025-06-07 10:42:11,685 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 12caa96115c082aaca7d780a8e6e234a6fe3695846e4a6d14325d9e71060f10798d1d057b2365c2d03004c5704b5e7baf62fd31e0701d76b90b56614e9e15d2a_0
2025-06-07 10:42:11,685 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 6feb8e3608f4df57634c709513fc7a1e75bbdbc9e403ce286ab86a77e2775969debb67a2387760445ebe42b1d8ac1e5321199be2e98d2e72ff1cf96d507bd20a_0
2025-06-07 10:42:11,686 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 6feb8e3608f4df57634c709513fc7a1e75bbdbc9e403ce286ab86a77e2775969debb67a2387760445ebe42b1d8ac1e5321199be2e98d2e72ff1cf96d507bd20a_0
2025-06-07 10:42:11,686 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 6feb8e3608f4df57634c709513fc7a1e75bbdbc9e403ce286ab86a77e2775969debb67a2387760445ebe42b1d8ac1e5321199be2e98d2e72ff1cf96d507bd20a_3
2025-06-07 10:42:11,687 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 12caa96115c082aaca7d780a8e6e234a6fe3695846e4a6d14325d9e71060f10798d1d057b2365c2d03004c5704b5e7baf62fd31e0701d76b90b56614e9e15d2a_0
2025-06-07 10:42:11,687 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 6feb8e3608f4df57634c709513fc7a1e75bbdbc9e403ce286ab86a77e2775969debb67a2387760445ebe42b1d8ac1e5321199be2e98d2e72ff1cf96d507bd20a_0
2025-06-07 10:42:11,688 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 6feb8e3608f4df57634c709513fc7a1e75bbdbc9e403ce286ab86a77e2775969debb67a2387760445ebe42b1d8ac1e5321199be2e98d2e72ff1cf96d507bd20a_0
2025-06-07 10:42:11,688 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 6feb8e3608f4df57634c709513fc7a1e75bbdbc9e403ce286ab86a77e2775969debb67a2387760445ebe42b1d8ac1e5321199be2e98d2e72ff1cf96d507bd20a_4
2025-06-07 10:42:11,688 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 12caa96115c082aaca7d780a8e6e234a6fe3695846e4a6d14325d9e71060f10798d1d057b2365c2d03004c5704b5e7baf62fd31e0701d76b90b56614e9e15d2a_0
2025-06-07 10:42:11,689 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 6feb8e3608f4df57634c709513fc7a1e75bbdbc9e403ce286ab86a77e2775969debb67a2387760445ebe42b1d8ac1e5321199be2e98d2e72ff1cf96d507bd20a_0
2025-06-07 10:42:11,689 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 6feb8e3608f4df57634c709513fc7a1e75bbdbc9e403ce286ab86a77e2775969debb67a2387760445ebe42b1d8ac1e5321199be2e98d2e72ff1cf96d507bd20a_0
2025-06-07 10:42:11,690 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n @editor_tools.route(...)\ndef certificate_editor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/editor_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 6feb8e3608f4df57634c709513fc7a1e75bbdbc9e403ce286ab86a77e2775969debb67a2387760445ebe42b1d8ac1e5321199be2e98d2e72ff1cf96d507bd20a_5
2025-06-07 10:42:11,690 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 0c9e9269aebdce457e6c705b277b5566a321ca49a54696cfc7bd995b49a4d15776a57a1e8108fb1e4d84931ee11904ca2363786e2dc42a405270fdddede5e6ef_0
2025-06-07 10:42:11,690 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = a77a770c467e6e4c46383391e31de3c1593efdc448273935398a04f1f4e48d8681e5c9eee8adccd98554841ea5fd5c81d30a773d3740efd66bca818aad67b189_0
2025-06-07 10:42:11,691 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = a77a770c467e6e4c46383391e31de3c1593efdc448273935398a04f1f4e48d8681e5c9eee8adccd98554841ea5fd5c81d30a773d3740efd66bca818aad67b189_0
2025-06-07 10:42:11,691 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = a77a770c467e6e4c46383391e31de3c1593efdc448273935398a04f1f4e48d8681e5c9eee8adccd98554841ea5fd5c81d30a773d3740efd66bca818aad67b189_0
2025-06-07 10:42:11,692 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 0c9e9269aebdce457e6c705b277b5566a321ca49a54696cfc7bd995b49a4d15776a57a1e8108fb1e4d84931ee11904ca2363786e2dc42a405270fdddede5e6ef_0
2025-06-07 10:42:11,692 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = a77a770c467e6e4c46383391e31de3c1593efdc448273935398a04f1f4e48d8681e5c9eee8adccd98554841ea5fd5c81d30a773d3740efd66bca818aad67b189_0
2025-06-07 10:42:11,693 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = a77a770c467e6e4c46383391e31de3c1593efdc448273935398a04f1f4e48d8681e5c9eee8adccd98554841ea5fd5c81d30a773d3740efd66bca818aad67b189_0
2025-06-07 10:42:11,693 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = a77a770c467e6e4c46383391e31de3c1593efdc448273935398a04f1f4e48d8681e5c9eee8adccd98554841ea5fd5c81d30a773d3740efd66bca818aad67b189_1
2025-06-07 10:42:11,694 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 0c9e9269aebdce457e6c705b277b5566a321ca49a54696cfc7bd995b49a4d15776a57a1e8108fb1e4d84931ee11904ca2363786e2dc42a405270fdddede5e6ef_0
2025-06-07 10:42:11,694 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = a77a770c467e6e4c46383391e31de3c1593efdc448273935398a04f1f4e48d8681e5c9eee8adccd98554841ea5fd5c81d30a773d3740efd66bca818aad67b189_0
2025-06-07 10:42:11,695 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = a77a770c467e6e4c46383391e31de3c1593efdc448273935398a04f1f4e48d8681e5c9eee8adccd98554841ea5fd5c81d30a773d3740efd66bca818aad67b189_0
2025-06-07 10:42:11,695 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = a77a770c467e6e4c46383391e31de3c1593efdc448273935398a04f1f4e48d8681e5c9eee8adccd98554841ea5fd5c81d30a773d3740efd66bca818aad67b189_2
2025-06-07 10:42:11,695 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 0c9e9269aebdce457e6c705b277b5566a321ca49a54696cfc7bd995b49a4d15776a57a1e8108fb1e4d84931ee11904ca2363786e2dc42a405270fdddede5e6ef_0
2025-06-07 10:42:11,696 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = a77a770c467e6e4c46383391e31de3c1593efdc448273935398a04f1f4e48d8681e5c9eee8adccd98554841ea5fd5c81d30a773d3740efd66bca818aad67b189_0
2025-06-07 10:42:11,696 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = a77a770c467e6e4c46383391e31de3c1593efdc448273935398a04f1f4e48d8681e5c9eee8adccd98554841ea5fd5c81d30a773d3740efd66bca818aad67b189_0
2025-06-07 10:42:11,697 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = a77a770c467e6e4c46383391e31de3c1593efdc448273935398a04f1f4e48d8681e5c9eee8adccd98554841ea5fd5c81d30a773d3740efd66bca818aad67b189_3
2025-06-07 10:42:11,697 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 0c9e9269aebdce457e6c705b277b5566a321ca49a54696cfc7bd995b49a4d15776a57a1e8108fb1e4d84931ee11904ca2363786e2dc42a405270fdddede5e6ef_0
2025-06-07 10:42:11,698 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = a77a770c467e6e4c46383391e31de3c1593efdc448273935398a04f1f4e48d8681e5c9eee8adccd98554841ea5fd5c81d30a773d3740efd66bca818aad67b189_0
2025-06-07 10:42:11,698 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = a77a770c467e6e4c46383391e31de3c1593efdc448273935398a04f1f4e48d8681e5c9eee8adccd98554841ea5fd5c81d30a773d3740efd66bca818aad67b189_0
2025-06-07 10:42:11,698 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n @image_tools.route(...)\ndef image_converter_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = a77a770c467e6e4c46383391e31de3c1593efdc448273935398a04f1f4e48d8681e5c9eee8adccd98554841ea5fd5c81d30a773d3740efd66bca818aad67b189_4
2025-06-07 10:42:11,699 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 0c9e9269aebdce457e6c705b277b5566a321ca49a54696cfc7bd995b49a4d15776a57a1e8108fb1e4d84931ee11904ca2363786e2dc42a405270fdddede5e6ef_0
2025-06-07 10:42:11,699 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 29f3cb44126ba9396fc60438332c6b3fa1ba7b99057e123a129101440181aa1095afb9398c418eb913fb153d12e768785d4fe5c75afaa735e25b7b2c2ade1a46_0
2025-06-07 10:42:11,700 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 29f3cb44126ba9396fc60438332c6b3fa1ba7b99057e123a129101440181aa1095afb9398c418eb913fb153d12e768785d4fe5c75afaa735e25b7b2c2ade1a46_0
2025-06-07 10:42:11,700 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 29f3cb44126ba9396fc60438332c6b3fa1ba7b99057e123a129101440181aa1095afb9398c418eb913fb153d12e768785d4fe5c75afaa735e25b7b2c2ade1a46_0
2025-06-07 10:42:11,700 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 0c9e9269aebdce457e6c705b277b5566a321ca49a54696cfc7bd995b49a4d15776a57a1e8108fb1e4d84931ee11904ca2363786e2dc42a405270fdddede5e6ef_0
2025-06-07 10:42:11,708 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 29f3cb44126ba9396fc60438332c6b3fa1ba7b99057e123a129101440181aa1095afb9398c418eb913fb153d12e768785d4fe5c75afaa735e25b7b2c2ade1a46_0
2025-06-07 10:42:11,709 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 29f3cb44126ba9396fc60438332c6b3fa1ba7b99057e123a129101440181aa1095afb9398c418eb913fb153d12e768785d4fe5c75afaa735e25b7b2c2ade1a46_0
2025-06-07 10:42:11,709 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 29f3cb44126ba9396fc60438332c6b3fa1ba7b99057e123a129101440181aa1095afb9398c418eb913fb153d12e768785d4fe5c75afaa735e25b7b2c2ade1a46_1
2025-06-07 10:42:11,709 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 0c9e9269aebdce457e6c705b277b5566a321ca49a54696cfc7bd995b49a4d15776a57a1e8108fb1e4d84931ee11904ca2363786e2dc42a405270fdddede5e6ef_0
2025-06-07 10:42:11,710 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 29f3cb44126ba9396fc60438332c6b3fa1ba7b99057e123a129101440181aa1095afb9398c418eb913fb153d12e768785d4fe5c75afaa735e25b7b2c2ade1a46_0
2025-06-07 10:42:11,710 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 29f3cb44126ba9396fc60438332c6b3fa1ba7b99057e123a129101440181aa1095afb9398c418eb913fb153d12e768785d4fe5c75afaa735e25b7b2c2ade1a46_0
2025-06-07 10:42:11,711 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 29f3cb44126ba9396fc60438332c6b3fa1ba7b99057e123a129101440181aa1095afb9398c418eb913fb153d12e768785d4fe5c75afaa735e25b7b2c2ade1a46_2
2025-06-07 10:42:11,711 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 0c9e9269aebdce457e6c705b277b5566a321ca49a54696cfc7bd995b49a4d15776a57a1e8108fb1e4d84931ee11904ca2363786e2dc42a405270fdddede5e6ef_0
2025-06-07 10:42:11,712 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 29f3cb44126ba9396fc60438332c6b3fa1ba7b99057e123a129101440181aa1095afb9398c418eb913fb153d12e768785d4fe5c75afaa735e25b7b2c2ade1a46_0
2025-06-07 10:42:11,712 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 29f3cb44126ba9396fc60438332c6b3fa1ba7b99057e123a129101440181aa1095afb9398c418eb913fb153d12e768785d4fe5c75afaa735e25b7b2c2ade1a46_0
2025-06-07 10:42:11,713 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 29f3cb44126ba9396fc60438332c6b3fa1ba7b99057e123a129101440181aa1095afb9398c418eb913fb153d12e768785d4fe5c75afaa735e25b7b2c2ade1a46_3
2025-06-07 10:42:11,713 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 0c9e9269aebdce457e6c705b277b5566a321ca49a54696cfc7bd995b49a4d15776a57a1e8108fb1e4d84931ee11904ca2363786e2dc42a405270fdddede5e6ef_0
2025-06-07 10:42:11,713 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 29f3cb44126ba9396fc60438332c6b3fa1ba7b99057e123a129101440181aa1095afb9398c418eb913fb153d12e768785d4fe5c75afaa735e25b7b2c2ade1a46_0
2025-06-07 10:42:11,714 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 29f3cb44126ba9396fc60438332c6b3fa1ba7b99057e123a129101440181aa1095afb9398c418eb913fb153d12e768785d4fe5c75afaa735e25b7b2c2ade1a46_0
2025-06-07 10:42:11,714 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n @image_tools.route(...)\ndef background_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 29f3cb44126ba9396fc60438332c6b3fa1ba7b99057e123a129101440181aa1095afb9398c418eb913fb153d12e768785d4fe5c75afaa735e25b7b2c2ade1a46_4
2025-06-07 10:42:11,715 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 0c9e9269aebdce457e6c705b277b5566a321ca49a54696cfc7bd995b49a4d15776a57a1e8108fb1e4d84931ee11904ca2363786e2dc42a405270fdddede5e6ef_0
2025-06-07 10:42:11,715 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 29c04755c2b89f97bf046c769ba5ac4b7fb66c37ef6a2928f1fd09a55bfb7474b0499cd00ad2f52c7e3518b51e2ae25bafba941df876cb4b109b2c76e2e18da0_0
2025-06-07 10:42:11,716 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 29c04755c2b89f97bf046c769ba5ac4b7fb66c37ef6a2928f1fd09a55bfb7474b0499cd00ad2f52c7e3518b51e2ae25bafba941df876cb4b109b2c76e2e18da0_0
2025-06-07 10:42:11,716 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 29c04755c2b89f97bf046c769ba5ac4b7fb66c37ef6a2928f1fd09a55bfb7474b0499cd00ad2f52c7e3518b51e2ae25bafba941df876cb4b109b2c76e2e18da0_0
2025-06-07 10:42:11,716 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 0c9e9269aebdce457e6c705b277b5566a321ca49a54696cfc7bd995b49a4d15776a57a1e8108fb1e4d84931ee11904ca2363786e2dc42a405270fdddede5e6ef_0
2025-06-07 10:42:11,717 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 29c04755c2b89f97bf046c769ba5ac4b7fb66c37ef6a2928f1fd09a55bfb7474b0499cd00ad2f52c7e3518b51e2ae25bafba941df876cb4b109b2c76e2e18da0_0
2025-06-07 10:42:11,717 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 29c04755c2b89f97bf046c769ba5ac4b7fb66c37ef6a2928f1fd09a55bfb7474b0499cd00ad2f52c7e3518b51e2ae25bafba941df876cb4b109b2c76e2e18da0_0
2025-06-07 10:42:11,718 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 29c04755c2b89f97bf046c769ba5ac4b7fb66c37ef6a2928f1fd09a55bfb7474b0499cd00ad2f52c7e3518b51e2ae25bafba941df876cb4b109b2c76e2e18da0_1
2025-06-07 10:42:11,718 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 0c9e9269aebdce457e6c705b277b5566a321ca49a54696cfc7bd995b49a4d15776a57a1e8108fb1e4d84931ee11904ca2363786e2dc42a405270fdddede5e6ef_0
2025-06-07 10:42:11,718 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 29c04755c2b89f97bf046c769ba5ac4b7fb66c37ef6a2928f1fd09a55bfb7474b0499cd00ad2f52c7e3518b51e2ae25bafba941df876cb4b109b2c76e2e18da0_0
2025-06-07 10:42:11,719 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 29c04755c2b89f97bf046c769ba5ac4b7fb66c37ef6a2928f1fd09a55bfb7474b0499cd00ad2f52c7e3518b51e2ae25bafba941df876cb4b109b2c76e2e18da0_0
2025-06-07 10:42:11,719 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 29c04755c2b89f97bf046c769ba5ac4b7fb66c37ef6a2928f1fd09a55bfb7474b0499cd00ad2f52c7e3518b51e2ae25bafba941df876cb4b109b2c76e2e18da0_2
2025-06-07 10:42:11,719 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 0c9e9269aebdce457e6c705b277b5566a321ca49a54696cfc7bd995b49a4d15776a57a1e8108fb1e4d84931ee11904ca2363786e2dc42a405270fdddede5e6ef_0
2025-06-07 10:42:11,720 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 29c04755c2b89f97bf046c769ba5ac4b7fb66c37ef6a2928f1fd09a55bfb7474b0499cd00ad2f52c7e3518b51e2ae25bafba941df876cb4b109b2c76e2e18da0_0
2025-06-07 10:42:11,720 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 29c04755c2b89f97bf046c769ba5ac4b7fb66c37ef6a2928f1fd09a55bfb7474b0499cd00ad2f52c7e3518b51e2ae25bafba941df876cb4b109b2c76e2e18da0_0
2025-06-07 10:42:11,721 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n @image_tools.route(...)\ndef image_compressor_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/image_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 29c04755c2b89f97bf046c769ba5ac4b7fb66c37ef6a2928f1fd09a55bfb7474b0499cd00ad2f52c7e3518b51e2ae25bafba941df876cb4b109b2c76e2e18da0_3
2025-06-07 10:42:11,721 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = e3ec59a711e5f669eef1c310fb81b0f3cc97c0642c683de6e4a366c63e6d0bb3b4a6b21f3c9d3a64fa67c5b9fe1a64683b728266d316683879949a8b3452a7af_0
2025-06-07 10:42:11,722 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c19d5996fb8a3b67e27788bbcb92a688044a1031ca2451a272dd317c19cb3617b4ffb729c3774a24e96af2ba06ddccd39199523f5d200eaeea24d7760c1646c8_0
2025-06-07 10:42:11,722 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c19d5996fb8a3b67e27788bbcb92a688044a1031ca2451a272dd317c19cb3617b4ffb729c3774a24e96af2ba06ddccd39199523f5d200eaeea24d7760c1646c8_0
2025-06-07 10:42:11,723 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c19d5996fb8a3b67e27788bbcb92a688044a1031ca2451a272dd317c19cb3617b4ffb729c3774a24e96af2ba06ddccd39199523f5d200eaeea24d7760c1646c8_0
2025-06-07 10:42:11,723 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = e3ec59a711e5f669eef1c310fb81b0f3cc97c0642c683de6e4a366c63e6d0bb3b4a6b21f3c9d3a64fa67c5b9fe1a64683b728266d316683879949a8b3452a7af_0
2025-06-07 10:42:11,723 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c19d5996fb8a3b67e27788bbcb92a688044a1031ca2451a272dd317c19cb3617b4ffb729c3774a24e96af2ba06ddccd39199523f5d200eaeea24d7760c1646c8_0
2025-06-07 10:42:11,724 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c19d5996fb8a3b67e27788bbcb92a688044a1031ca2451a272dd317c19cb3617b4ffb729c3774a24e96af2ba06ddccd39199523f5d200eaeea24d7760c1646c8_0
2025-06-07 10:42:11,724 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c19d5996fb8a3b67e27788bbcb92a688044a1031ca2451a272dd317c19cb3617b4ffb729c3774a24e96af2ba06ddccd39199523f5d200eaeea24d7760c1646c8_1
2025-06-07 10:42:11,725 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = e3ec59a711e5f669eef1c310fb81b0f3cc97c0642c683de6e4a366c63e6d0bb3b4a6b21f3c9d3a64fa67c5b9fe1a64683b728266d316683879949a8b3452a7af_0
2025-06-07 10:42:11,725 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c19d5996fb8a3b67e27788bbcb92a688044a1031ca2451a272dd317c19cb3617b4ffb729c3774a24e96af2ba06ddccd39199523f5d200eaeea24d7760c1646c8_0
2025-06-07 10:42:11,725 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c19d5996fb8a3b67e27788bbcb92a688044a1031ca2451a272dd317c19cb3617b4ffb729c3774a24e96af2ba06ddccd39199523f5d200eaeea24d7760c1646c8_0
2025-06-07 10:42:11,726 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c19d5996fb8a3b67e27788bbcb92a688044a1031ca2451a272dd317c19cb3617b4ffb729c3774a24e96af2ba06ddccd39199523f5d200eaeea24d7760c1646c8_2
2025-06-07 10:42:11,726 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = e3ec59a711e5f669eef1c310fb81b0f3cc97c0642c683de6e4a366c63e6d0bb3b4a6b21f3c9d3a64fa67c5b9fe1a64683b728266d316683879949a8b3452a7af_0
2025-06-07 10:42:11,727 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c19d5996fb8a3b67e27788bbcb92a688044a1031ca2451a272dd317c19cb3617b4ffb729c3774a24e96af2ba06ddccd39199523f5d200eaeea24d7760c1646c8_0
2025-06-07 10:42:11,728 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c19d5996fb8a3b67e27788bbcb92a688044a1031ca2451a272dd317c19cb3617b4ffb729c3774a24e96af2ba06ddccd39199523f5d200eaeea24d7760c1646c8_0
2025-06-07 10:42:11,728 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c19d5996fb8a3b67e27788bbcb92a688044a1031ca2451a272dd317c19cb3617b4ffb729c3774a24e96af2ba06ddccd39199523f5d200eaeea24d7760c1646c8_3
2025-06-07 10:42:11,729 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = e3ec59a711e5f669eef1c310fb81b0f3cc97c0642c683de6e4a366c63e6d0bb3b4a6b21f3c9d3a64fa67c5b9fe1a64683b728266d316683879949a8b3452a7af_0
2025-06-07 10:42:11,729 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c19d5996fb8a3b67e27788bbcb92a688044a1031ca2451a272dd317c19cb3617b4ffb729c3774a24e96af2ba06ddccd39199523f5d200eaeea24d7760c1646c8_0
2025-06-07 10:42:11,730 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c19d5996fb8a3b67e27788bbcb92a688044a1031ca2451a272dd317c19cb3617b4ffb729c3774a24e96af2ba06ddccd39199523f5d200eaeea24d7760c1646c8_0
2025-06-07 10:42:11,731 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n @media_tools.route(...)\ndef audio_to_video_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/media_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = c19d5996fb8a3b67e27788bbcb92a688044a1031ca2451a272dd317c19cb3617b4ffb729c3774a24e96af2ba06ddccd39199523f5d200eaeea24d7760c1646c8_4
2025-06-07 10:42:11,731 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d9a68f079abbc21bcaca4624c826d3e39f2d6af91c462b49353c1a969bb030cc9cf4926173c5d87dc65f073277d1c50ab622d95103fe5a56e29823d6edfb820f_0
2025-06-07 10:42:11,732 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 7dde702ecc3f704b81dcce8e2a8d3f8189bf8d332552c9040751ec652962a69950beab0ede5d15ee7039eb0b20fa451353214564be53c0560bd71eea8d43745a_0
2025-06-07 10:42:11,732 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 7dde702ecc3f704b81dcce8e2a8d3f8189bf8d332552c9040751ec652962a69950beab0ede5d15ee7039eb0b20fa451353214564be53c0560bd71eea8d43745a_0
2025-06-07 10:42:11,733 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 7dde702ecc3f704b81dcce8e2a8d3f8189bf8d332552c9040751ec652962a69950beab0ede5d15ee7039eb0b20fa451353214564be53c0560bd71eea8d43745a_0
2025-06-07 10:42:11,733 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d9a68f079abbc21bcaca4624c826d3e39f2d6af91c462b49353c1a969bb030cc9cf4926173c5d87dc65f073277d1c50ab622d95103fe5a56e29823d6edfb820f_0
2025-06-07 10:42:11,733 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 7dde702ecc3f704b81dcce8e2a8d3f8189bf8d332552c9040751ec652962a69950beab0ede5d15ee7039eb0b20fa451353214564be53c0560bd71eea8d43745a_0
2025-06-07 10:42:11,734 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 7dde702ecc3f704b81dcce8e2a8d3f8189bf8d332552c9040751ec652962a69950beab0ede5d15ee7039eb0b20fa451353214564be53c0560bd71eea8d43745a_0
2025-06-07 10:42:11,734 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 7dde702ecc3f704b81dcce8e2a8d3f8189bf8d332552c9040751ec652962a69950beab0ede5d15ee7039eb0b20fa451353214564be53c0560bd71eea8d43745a_1
2025-06-07 10:42:11,735 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d9a68f079abbc21bcaca4624c826d3e39f2d6af91c462b49353c1a969bb030cc9cf4926173c5d87dc65f073277d1c50ab622d95103fe5a56e29823d6edfb820f_0
2025-06-07 10:42:11,735 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 7dde702ecc3f704b81dcce8e2a8d3f8189bf8d332552c9040751ec652962a69950beab0ede5d15ee7039eb0b20fa451353214564be53c0560bd71eea8d43745a_0
2025-06-07 10:42:11,736 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 7dde702ecc3f704b81dcce8e2a8d3f8189bf8d332552c9040751ec652962a69950beab0ede5d15ee7039eb0b20fa451353214564be53c0560bd71eea8d43745a_0
2025-06-07 10:42:11,736 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 7dde702ecc3f704b81dcce8e2a8d3f8189bf8d332552c9040751ec652962a69950beab0ede5d15ee7039eb0b20fa451353214564be53c0560bd71eea8d43745a_2
2025-06-07 10:42:11,737 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d9a68f079abbc21bcaca4624c826d3e39f2d6af91c462b49353c1a969bb030cc9cf4926173c5d87dc65f073277d1c50ab622d95103fe5a56e29823d6edfb820f_0
2025-06-07 10:42:11,737 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 7dde702ecc3f704b81dcce8e2a8d3f8189bf8d332552c9040751ec652962a69950beab0ede5d15ee7039eb0b20fa451353214564be53c0560bd71eea8d43745a_0
2025-06-07 10:42:11,738 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 7dde702ecc3f704b81dcce8e2a8d3f8189bf8d332552c9040751ec652962a69950beab0ede5d15ee7039eb0b20fa451353214564be53c0560bd71eea8d43745a_0
2025-06-07 10:42:11,738 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 7dde702ecc3f704b81dcce8e2a8d3f8189bf8d332552c9040751ec652962a69950beab0ede5d15ee7039eb0b20fa451353214564be53c0560bd71eea8d43745a_3
2025-06-07 10:42:11,739 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d9a68f079abbc21bcaca4624c826d3e39f2d6af91c462b49353c1a969bb030cc9cf4926173c5d87dc65f073277d1c50ab622d95103fe5a56e29823d6edfb820f_0
2025-06-07 10:42:11,739 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 7dde702ecc3f704b81dcce8e2a8d3f8189bf8d332552c9040751ec652962a69950beab0ede5d15ee7039eb0b20fa451353214564be53c0560bd71eea8d43745a_0
2025-06-07 10:42:11,740 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 7dde702ecc3f704b81dcce8e2a8d3f8189bf8d332552c9040751ec652962a69950beab0ede5d15ee7039eb0b20fa451353214564be53c0560bd71eea8d43745a_0
2025-06-07 10:42:11,740 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_merger_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 7dde702ecc3f704b81dcce8e2a8d3f8189bf8d332552c9040751ec652962a69950beab0ede5d15ee7039eb0b20fa451353214564be53c0560bd71eea8d43745a_4
2025-06-07 10:42:11,741 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d9a68f079abbc21bcaca4624c826d3e39f2d6af91c462b49353c1a969bb030cc9cf4926173c5d87dc65f073277d1c50ab622d95103fe5a56e29823d6edfb820f_0
2025-06-07 10:42:11,741 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 67710e52ce6d6c5f44bc44939c78355c68904c029c4080d740be8a75d1b91bf0738439e992c4eaeec231c21043a2d1abe3cff9636036bc334111ddaddbfadca8_0
2025-06-07 10:42:11,742 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 67710e52ce6d6c5f44bc44939c78355c68904c029c4080d740be8a75d1b91bf0738439e992c4eaeec231c21043a2d1abe3cff9636036bc334111ddaddbfadca8_0
2025-06-07 10:42:11,742 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 67710e52ce6d6c5f44bc44939c78355c68904c029c4080d740be8a75d1b91bf0738439e992c4eaeec231c21043a2d1abe3cff9636036bc334111ddaddbfadca8_0
2025-06-07 10:42:11,743 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d9a68f079abbc21bcaca4624c826d3e39f2d6af91c462b49353c1a969bb030cc9cf4926173c5d87dc65f073277d1c50ab622d95103fe5a56e29823d6edfb820f_0
2025-06-07 10:42:11,743 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 67710e52ce6d6c5f44bc44939c78355c68904c029c4080d740be8a75d1b91bf0738439e992c4eaeec231c21043a2d1abe3cff9636036bc334111ddaddbfadca8_0
2025-06-07 10:42:11,744 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 67710e52ce6d6c5f44bc44939c78355c68904c029c4080d740be8a75d1b91bf0738439e992c4eaeec231c21043a2d1abe3cff9636036bc334111ddaddbfadca8_0
2025-06-07 10:42:11,744 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 67710e52ce6d6c5f44bc44939c78355c68904c029c4080d740be8a75d1b91bf0738439e992c4eaeec231c21043a2d1abe3cff9636036bc334111ddaddbfadca8_1
2025-06-07 10:42:11,745 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d9a68f079abbc21bcaca4624c826d3e39f2d6af91c462b49353c1a969bb030cc9cf4926173c5d87dc65f073277d1c50ab622d95103fe5a56e29823d6edfb820f_0
2025-06-07 10:42:11,745 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 67710e52ce6d6c5f44bc44939c78355c68904c029c4080d740be8a75d1b91bf0738439e992c4eaeec231c21043a2d1abe3cff9636036bc334111ddaddbfadca8_0
2025-06-07 10:42:11,746 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 67710e52ce6d6c5f44bc44939c78355c68904c029c4080d740be8a75d1b91bf0738439e992c4eaeec231c21043a2d1abe3cff9636036bc334111ddaddbfadca8_0
2025-06-07 10:42:11,746 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 67710e52ce6d6c5f44bc44939c78355c68904c029c4080d740be8a75d1b91bf0738439e992c4eaeec231c21043a2d1abe3cff9636036bc334111ddaddbfadca8_2
2025-06-07 10:42:11,746 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d9a68f079abbc21bcaca4624c826d3e39f2d6af91c462b49353c1a969bb030cc9cf4926173c5d87dc65f073277d1c50ab622d95103fe5a56e29823d6edfb820f_0
2025-06-07 10:42:11,747 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 67710e52ce6d6c5f44bc44939c78355c68904c029c4080d740be8a75d1b91bf0738439e992c4eaeec231c21043a2d1abe3cff9636036bc334111ddaddbfadca8_0
2025-06-07 10:42:11,748 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 67710e52ce6d6c5f44bc44939c78355c68904c029c4080d740be8a75d1b91bf0738439e992c4eaeec231c21043a2d1abe3cff9636036bc334111ddaddbfadca8_0
2025-06-07 10:42:11,748 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n @pdf_tools.route(...)\ndef watermark_remover_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = 67710e52ce6d6c5f44bc44939c78355c68904c029c4080d740be8a75d1b91bf0738439e992c4eaeec231c21043a2d1abe3cff9636036bc334111ddaddbfadca8_3
2025-06-07 10:42:11,748 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d9a68f079abbc21bcaca4624c826d3e39f2d6af91c462b49353c1a969bb030cc9cf4926173c5d87dc65f073277d1c50ab622d95103fe5a56e29823d6edfb820f_0
2025-06-07 10:42:11,749 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b7bc279cbdda9c6d0427ced5679323ff451485c74c8d8b0f3eff5ee83b839fc99ecbdd2fa819b96c57d9d233ec03d3d4f541a5d6d63b523bae42a2ac04fe82ac_0
2025-06-07 10:42:11,749 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b7bc279cbdda9c6d0427ced5679323ff451485c74c8d8b0f3eff5ee83b839fc99ecbdd2fa819b96c57d9d233ec03d3d4f541a5d6d63b523bae42a2ac04fe82ac_0
2025-06-07 10:42:11,750 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b7bc279cbdda9c6d0427ced5679323ff451485c74c8d8b0f3eff5ee83b839fc99ecbdd2fa819b96c57d9d233ec03d3d4f541a5d6d63b523bae42a2ac04fe82ac_0
2025-06-07 10:42:11,750 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d9a68f079abbc21bcaca4624c826d3e39f2d6af91c462b49353c1a969bb030cc9cf4926173c5d87dc65f073277d1c50ab622d95103fe5a56e29823d6edfb820f_0
2025-06-07 10:42:11,751 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b7bc279cbdda9c6d0427ced5679323ff451485c74c8d8b0f3eff5ee83b839fc99ecbdd2fa819b96c57d9d233ec03d3d4f541a5d6d63b523bae42a2ac04fe82ac_0
2025-06-07 10:42:11,751 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b7bc279cbdda9c6d0427ced5679323ff451485c74c8d8b0f3eff5ee83b839fc99ecbdd2fa819b96c57d9d233ec03d3d4f541a5d6d63b523bae42a2ac04fe82ac_0
2025-06-07 10:42:11,752 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b7bc279cbdda9c6d0427ced5679323ff451485c74c8d8b0f3eff5ee83b839fc99ecbdd2fa819b96c57d9d233ec03d3d4f541a5d6d63b523bae42a2ac04fe82ac_1
2025-06-07 10:42:11,752 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d9a68f079abbc21bcaca4624c826d3e39f2d6af91c462b49353c1a969bb030cc9cf4926173c5d87dc65f073277d1c50ab622d95103fe5a56e29823d6edfb820f_0
2025-06-07 10:42:11,753 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b7bc279cbdda9c6d0427ced5679323ff451485c74c8d8b0f3eff5ee83b839fc99ecbdd2fa819b96c57d9d233ec03d3d4f541a5d6d63b523bae42a2ac04fe82ac_0
2025-06-07 10:42:11,753 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b7bc279cbdda9c6d0427ced5679323ff451485c74c8d8b0f3eff5ee83b839fc99ecbdd2fa819b96c57d9d233ec03d3d4f541a5d6d63b523bae42a2ac04fe82ac_0
2025-06-07 10:42:11,753 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b7bc279cbdda9c6d0427ced5679323ff451485c74c8d8b0f3eff5ee83b839fc99ecbdd2fa819b96c57d9d233ec03d3d4f541a5d6d63b523bae42a2ac04fe82ac_2
2025-06-07 10:42:11,754 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d9a68f079abbc21bcaca4624c826d3e39f2d6af91c462b49353c1a969bb030cc9cf4926173c5d87dc65f073277d1c50ab622d95103fe5a56e29823d6edfb820f_0
2025-06-07 10:42:11,754 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b7bc279cbdda9c6d0427ced5679323ff451485c74c8d8b0f3eff5ee83b839fc99ecbdd2fa819b96c57d9d233ec03d3d4f541a5d6d63b523bae42a2ac04fe82ac_0
2025-06-07 10:42:11,755 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b7bc279cbdda9c6d0427ced5679323ff451485c74c8d8b0f3eff5ee83b839fc99ecbdd2fa819b96c57d9d233ec03d3d4f541a5d6d63b523bae42a2ac04fe82ac_0
2025-06-07 10:42:11,756 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b7bc279cbdda9c6d0427ced5679323ff451485c74c8d8b0f3eff5ee83b839fc99ecbdd2fa819b96c57d9d233ec03d3d4f541a5d6d63b523bae42a2ac04fe82ac_3
2025-06-07 10:42:11,756 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = d9a68f079abbc21bcaca4624c826d3e39f2d6af91c462b49353c1a969bb030cc9cf4926173c5d87dc65f073277d1c50ab622d95103fe5a56e29823d6edfb820f_0
2025-06-07 10:42:11,757 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b7bc279cbdda9c6d0427ced5679323ff451485c74c8d8b0f3eff5ee83b839fc99ecbdd2fa819b96c57d9d233ec03d3d4f541a5d6d63b523bae42a2ac04fe82ac_0
2025-06-07 10:42:11,758 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b7bc279cbdda9c6d0427ced5679323ff451485c74c8d8b0f3eff5ee83b839fc99ecbdd2fa819b96c57d9d233ec03d3d4f541a5d6d63b523bae42a2ac04fe82ac_0
2025-06-07 10:42:11,758 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n @pdf_tools.route(...)\ndef pdf_pages_recovery_process(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/pdf_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = b7bc279cbdda9c6d0427ced5679323ff451485c74c8d8b0f3eff5ee83b839fc99ecbdd2fa819b96c57d9d233ec03d3d4f541a5d6d63b523bae42a2ac04fe82ac_4
2025-06-07 10:42:11,759 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = a70ee53654c50dce75b4b0b4440f1fa391df9dbff399491983e16bbdc4d7163d0cfd78bfcf931dec2b49069ea2e4755420a48ee6a2ea4f5497139f3805ef0d6c_0
2025-06-07 10:42:11,759 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = bf64851ea6f7aa3ffc1e46a0104c1638cfe75fc5825b05c41ce809b30a0aa876ecb83e8aecb32e466d757db694c479196ba5e3c6be097178ead670bdaedc5a7f_0
2025-06-07 10:42:11,760 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = bf64851ea6f7aa3ffc1e46a0104c1638cfe75fc5825b05c41ce809b30a0aa876ecb83e8aecb32e466d757db694c479196ba5e3c6be097178ead670bdaedc5a7f_0
2025-06-07 10:42:11,760 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = bf64851ea6f7aa3ffc1e46a0104c1638cfe75fc5825b05c41ce809b30a0aa876ecb83e8aecb32e466d757db694c479196ba5e3c6be097178ead670bdaedc5a7f_0
2025-06-07 10:42:11,761 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = a70ee53654c50dce75b4b0b4440f1fa391df9dbff399491983e16bbdc4d7163d0cfd78bfcf931dec2b49069ea2e4755420a48ee6a2ea4f5497139f3805ef0d6c_0
2025-06-07 10:42:11,761 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = bf64851ea6f7aa3ffc1e46a0104c1638cfe75fc5825b05c41ce809b30a0aa876ecb83e8aecb32e466d757db694c479196ba5e3c6be097178ead670bdaedc5a7f_0
2025-06-07 10:42:11,761 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = bf64851ea6f7aa3ffc1e46a0104c1638cfe75fc5825b05c41ce809b30a0aa876ecb83e8aecb32e466d757db694c479196ba5e3c6be097178ead670bdaedc5a7f_0
2025-06-07 10:42:11,762 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = bf64851ea6f7aa3ffc1e46a0104c1638cfe75fc5825b05c41ce809b30a0aa876ecb83e8aecb32e466d757db694c479196ba5e3c6be097178ead670bdaedc5a7f_1
2025-06-07 10:42:11,762 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = a70ee53654c50dce75b4b0b4440f1fa391df9dbff399491983e16bbdc4d7163d0cfd78bfcf931dec2b49069ea2e4755420a48ee6a2ea4f5497139f3805ef0d6c_0
2025-06-07 10:42:11,763 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = bf64851ea6f7aa3ffc1e46a0104c1638cfe75fc5825b05c41ce809b30a0aa876ecb83e8aecb32e466d757db694c479196ba5e3c6be097178ead670bdaedc5a7f_0
2025-06-07 10:42:11,763 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = bf64851ea6f7aa3ffc1e46a0104c1638cfe75fc5825b05c41ce809b30a0aa876ecb83e8aecb32e466d757db694c479196ba5e3c6be097178ead670bdaedc5a7f_0
2025-06-07 10:42:11,764 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = bf64851ea6f7aa3ffc1e46a0104c1638cfe75fc5825b05c41ce809b30a0aa876ecb83e8aecb32e466d757db694c479196ba5e3c6be097178ead670bdaedc5a7f_2
2025-06-07 10:42:11,764 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = a70ee53654c50dce75b4b0b4440f1fa391df9dbff399491983e16bbdc4d7163d0cfd78bfcf931dec2b49069ea2e4755420a48ee6a2ea4f5497139f3805ef0d6c_0
2025-06-07 10:42:11,765 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = bf64851ea6f7aa3ffc1e46a0104c1638cfe75fc5825b05c41ce809b30a0aa876ecb83e8aecb32e466d757db694c479196ba5e3c6be097178ead670bdaedc5a7f_0
2025-06-07 10:42:11,765 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = bf64851ea6f7aa3ffc1e46a0104c1638cfe75fc5825b05c41ce809b30a0aa876ecb83e8aecb32e466d757db694c479196ba5e3c6be097178ead670bdaedc5a7f_0
2025-06-07 10:42:11,765 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = bf64851ea6f7aa3ffc1e46a0104c1638cfe75fc5825b05c41ce809b30a0aa876ecb83e8aecb32e466d757db694c479196ba5e3c6be097178ead670bdaedc5a7f_3
2025-06-07 10:42:11,766 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = a70ee53654c50dce75b4b0b4440f1fa391df9dbff399491983e16bbdc4d7163d0cfd78bfcf931dec2b49069ea2e4755420a48ee6a2ea4f5497139f3805ef0d6c_0
2025-06-07 10:42:11,766 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = bf64851ea6f7aa3ffc1e46a0104c1638cfe75fc5825b05c41ce809b30a0aa876ecb83e8aecb32e466d757db694c479196ba5e3c6be097178ead670bdaedc5a7f_0
2025-06-07 10:42:11,767 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = bf64851ea6f7aa3ffc1e46a0104c1638cfe75fc5825b05c41ce809b30a0aa876ecb83e8aecb32e466d757db694c479196ba5e3c6be097178ead670bdaedc5a7f_0
2025-06-07 10:42:11,767 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = bf64851ea6f7aa3ffc1e46a0104c1638cfe75fc5825b05c41ce809b30a0aa876ecb83e8aecb32e466d757db694c479196ba5e3c6be097178ead670bdaedc5a7f_4
2025-06-07 10:42:11,768 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = a70ee53654c50dce75b4b0b4440f1fa391df9dbff399491983e16bbdc4d7163d0cfd78bfcf931dec2b49069ea2e4755420a48ee6a2ea4f5497139f3805ef0d6c_0
2025-06-07 10:42:11,768 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = bf64851ea6f7aa3ffc1e46a0104c1638cfe75fc5825b05c41ce809b30a0aa876ecb83e8aecb32e466d757db694c479196ba5e3c6be097178ead670bdaedc5a7f_0
2025-06-07 10:42:11,769 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = bf64851ea6f7aa3ffc1e46a0104c1638cfe75fc5825b05c41ce809b30a0aa876ecb83e8aecb32e466d757db694c479196ba5e3c6be097178ead670bdaedc5a7f_0
2025-06-07 10:42:11,769 - semgrep.rule_match - DEBUG - match_key = ('$V = flask.request.url\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url.get(...)\n...\nflask.redirect(<... $V ...>, ...)\n $V = flask.request.url[...]\n...\nflask.redirect(<... $V ...>, ...)\n flask.redirect(<... flask.request.url ...>, ...) flask.redirect(<... flask.request.url(...) ...>, ...) flask.redirect(<... flask.request.url.get(...) ...>, ...) flask.redirect(<... flask.request.url[...] ...>, ...) @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n @security_tools.route(...)\ndef pdf_protect(...):\n  ...\n  if <... werkzeug.urls.url_parse($V) ...>:\n    ...\n flask.redirect(f"{flask.request.path}...") flask.redirect(flask.request.path + ...) flask.redirect(flask.request.path)', PosixPath('routes/security_tools.py'), 'config..semgrep.vendored-rules.python.flask.security.open-redirect') match_id = bf64851ea6f7aa3ffc1e46a0104c1638cfe75fc5825b05c41ce809b30a0aa876ecb83e8aecb32e466d757db694c479196ba5e3c6be097178ead670bdaedc5a7f_5
2025-06-07 10:42:11,770 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('run.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = 1248649235f561700e4be044518d003922116100558152b7311d3b58a423963371eac402ee5be1b9d44727c2acc4113cfe3d08ba705c6149b12f633edc7efd16_0
2025-06-07 10:42:11,770 - semgrep.rule_match - DEBUG - match_key = ('app.run(..., "0.0.0.0", ...) app.run(..., host="0.0.0.0", ...)', PosixPath('run.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = 99d78e86a2b5417caa381ed576766d32e22081cc17b6f43a33f21a903a826ba326ec9f1d27d249e4bff4fa13e1f53787d5676d36c66d72227fb3b2a4fe671588_0
2025-06-07 10:42:11,770 - semgrep.rule_match - DEBUG - match_key = ('app.run(..., "0.0.0.0", ...) app.run(..., host="0.0.0.0", ...)', PosixPath('run.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = 99d78e86a2b5417caa381ed576766d32e22081cc17b6f43a33f21a903a826ba326ec9f1d27d249e4bff4fa13e1f53787d5676d36c66d72227fb3b2a4fe671588_0
2025-06-07 10:42:11,771 - semgrep.rule_match - DEBUG - match_key = ('app.run(..., "0.0.0.0", ...) app.run(..., host="0.0.0.0", ...)', PosixPath('run.py'), 'config..semgrep.vendored-rules.python.flask.security.audit.avoid_app_run_with_bad_host') match_id = 99d78e86a2b5417caa381ed576766d32e22081cc17b6f43a33f21a903a826ba326ec9f1d27d249e4bff4fa13e1f53787d5676d36c66d72227fb3b2a4fe671588_0
2025-06-07 10:42:11,771 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 2b86126e7b1d21a2147a0edaa6aeb022b6b5537f2b2b271b88c1c474963a057f975db86f09c9ad19d79f83ef16028d1eff14776b5ee13a4f9684c244062739a9_0
2025-06-07 10:42:11,772 - semgrep.rule_match - DEBUG - match_key = ('fileItem.innerHTML = "...";\n fileItem.innerHTML = `\n                    <div class="file-name">file.name</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                ;\n', PosixPath('static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 743fa14efb335e2fb3c91fabbbdebcff3fb7922ed228c80eaacdf1f5cb16f5406706796c1f0803503c28079f07c41459fc1e0706e4607adb8d8c284a086ddf71_0
2025-06-07 10:42:11,772 - semgrep.rule_match - DEBUG - match_key = ('fileItem.innerHTML = "...";\n fileItem.innerHTML = `\n                    <div class="file-name">file.name</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                ;\n', PosixPath('static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 743fa14efb335e2fb3c91fabbbdebcff3fb7922ed228c80eaacdf1f5cb16f5406706796c1f0803503c28079f07c41459fc1e0706e4607adb8d8c284a086ddf71_0
2025-06-07 10:42:11,773 - semgrep.rule_match - DEBUG - match_key = ('fileItem.innerHTML = "...";\n fileItem.innerHTML = `\n                    <div class="file-name">file.name</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                ;\n', PosixPath('static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 743fa14efb335e2fb3c91fabbbdebcff3fb7922ed228c80eaacdf1f5cb16f5406706796c1f0803503c28079f07c41459fc1e0706e4607adb8d8c284a086ddf71_0
2025-06-07 10:42:11,773 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 79bc926098d389030996c1bcd0046741934dfa906ba49f09b2147dc97df587562ae136d62ac2565b7ee4c261aa0db20425613ae2f1445149659188012692bdaf_0
2025-06-07 10:42:11,774 - semgrep.rule_match - DEBUG - match_key = ('fileItem.innerHTML = "...";\n fileItem.innerHTML = `\n                    <div class="file-name">file.name</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                ;\n fileItem.outerHTML = `\n                    <div class="file-name">file.name</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                ;\n document.write(...) fileItem.outerHTML = "...";\n document.write("...")', PosixPath('static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 106610dd821276e3646ff28c95408e10120208980bf712eb3c2b2f45c3c2fa45ec9b6e46cc203ad5dbe5ac046982204abbb1e50102f18d40a8803ed20c6f535b_0
2025-06-07 10:42:11,774 - semgrep.rule_match - DEBUG - match_key = ('fileItem.innerHTML = "...";\n fileItem.innerHTML = `\n                    <div class="file-name">file.name</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                ;\n fileItem.outerHTML = `\n                    <div class="file-name">file.name</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                ;\n document.write(...) fileItem.outerHTML = "...";\n document.write("...")', PosixPath('static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 106610dd821276e3646ff28c95408e10120208980bf712eb3c2b2f45c3c2fa45ec9b6e46cc203ad5dbe5ac046982204abbb1e50102f18d40a8803ed20c6f535b_0
2025-06-07 10:42:11,775 - semgrep.rule_match - DEBUG - match_key = ('fileItem.innerHTML = "...";\n fileItem.innerHTML = `\n                    <div class="file-name">file.name</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                ;\n fileItem.outerHTML = `\n                    <div class="file-name">file.name</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                ;\n document.write(...) fileItem.outerHTML = "...";\n document.write("...")', PosixPath('static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 106610dd821276e3646ff28c95408e10120208980bf712eb3c2b2f45c3c2fa45ec9b6e46cc203ad5dbe5ac046982204abbb1e50102f18d40a8803ed20c6f535b_0
2025-06-07 10:42:11,775 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/js/main.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = b60a8265633a21906524ca60770b2e48d5727fe1e8ff646819fd0a777a22d868959c57dca8de361951f0bd62360303fb327dd4aea1cb4a4bf4a2cc0b111a844f_0
2025-06-07 10:42:11,776 - semgrep.rule_match - DEBUG - match_key = ('</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                 .*</?[a-zA-Z] `</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                ${file.name}...`\n `...${file.name}</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                `\n', PosixPath('static/js/main.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = dd640ea297daf7dead318e6fa16cc3cec5d8c143e1bf01db751b67bbb695332dfff3b1150669a401aca9783cd90684fd7f66872a67ed9de7e7d715cec8b7423a_0
2025-06-07 10:42:11,776 - semgrep.rule_match - DEBUG - match_key = ('</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                 .*</?[a-zA-Z] `</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                ${file.name}...`\n `...${file.name}</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                `\n', PosixPath('static/js/main.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = dd640ea297daf7dead318e6fa16cc3cec5d8c143e1bf01db751b67bbb695332dfff3b1150669a401aca9783cd90684fd7f66872a67ed9de7e7d715cec8b7423a_0
2025-06-07 10:42:11,776 - semgrep.rule_match - DEBUG - match_key = ('</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                 .*</?[a-zA-Z] `</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                ${file.name}...`\n `...${file.name}</div>\n                    <span class="remove-file"><i class="fas fa-times"></i></span>\n                `\n', PosixPath('static/js/main.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = dd640ea297daf7dead318e6fa16cc3cec5d8c143e1bf01db751b67bbb695332dfff3b1150669a401aca9783cd90684fd7f66872a67ed9de7e7d715cec8b7423a_0
2025-06-07 10:42:11,777 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 2b86126e7b1d21a2147a0edaa6aeb022b6b5537f2b2b271b88c1c474963a057f975db86f09c9ad19d79f83ef16028d1eff14776b5ee13a4f9684c244062739a9_0
2025-06-07 10:42:11,777 - semgrep.rule_match - DEBUG - match_key = ('alert.innerHTML = "...";\n alert.innerHTML = `\n                message\n                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n            ;\n', PosixPath('static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 543e3213874e1acfeb363b7b12da94dad72b8a771a0ded1d5ca865b2a906a3cb8fd1c638b341b6721078bf2d398daf46e69e99948d5363ad3b0a7aa71990ee82_0
2025-06-07 10:42:11,778 - semgrep.rule_match - DEBUG - match_key = ('alert.innerHTML = "...";\n alert.innerHTML = `\n                message\n                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n            ;\n', PosixPath('static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 543e3213874e1acfeb363b7b12da94dad72b8a771a0ded1d5ca865b2a906a3cb8fd1c638b341b6721078bf2d398daf46e69e99948d5363ad3b0a7aa71990ee82_0
2025-06-07 10:42:11,778 - semgrep.rule_match - DEBUG - match_key = ('alert.innerHTML = "...";\n alert.innerHTML = `\n                message\n                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n            ;\n', PosixPath('static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 543e3213874e1acfeb363b7b12da94dad72b8a771a0ded1d5ca865b2a906a3cb8fd1c638b341b6721078bf2d398daf46e69e99948d5363ad3b0a7aa71990ee82_0
2025-06-07 10:42:11,779 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 79bc926098d389030996c1bcd0046741934dfa906ba49f09b2147dc97df587562ae136d62ac2565b7ee4c261aa0db20425613ae2f1445149659188012692bdaf_0
2025-06-07 10:42:11,780 - semgrep.rule_match - DEBUG - match_key = ('alert.innerHTML = "...";\n alert.innerHTML = `\n                message\n                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n            ;\n alert.outerHTML = `\n                message\n                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n            ;\n document.write(...) alert.outerHTML = "...";\n document.write("...")', PosixPath('static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 4b6c916197a430bec2fb7013cc8896da6aff9731e78541fa2c29aefda1be65a1123fe12ed7c6fe987b673f959aae5afb5e6136bd1cf35a51ca5134d3735ccd4d_0
2025-06-07 10:42:11,780 - semgrep.rule_match - DEBUG - match_key = ('alert.innerHTML = "...";\n alert.innerHTML = `\n                message\n                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n            ;\n alert.outerHTML = `\n                message\n                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n            ;\n document.write(...) alert.outerHTML = "...";\n document.write("...")', PosixPath('static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 4b6c916197a430bec2fb7013cc8896da6aff9731e78541fa2c29aefda1be65a1123fe12ed7c6fe987b673f959aae5afb5e6136bd1cf35a51ca5134d3735ccd4d_0
2025-06-07 10:42:11,781 - semgrep.rule_match - DEBUG - match_key = ('alert.innerHTML = "...";\n alert.innerHTML = `\n                message\n                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n            ;\n alert.outerHTML = `\n                message\n                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>\n            ;\n document.write(...) alert.outerHTML = "...";\n document.write("...")', PosixPath('static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 4b6c916197a430bec2fb7013cc8896da6aff9731e78541fa2c29aefda1be65a1123fe12ed7c6fe987b673f959aae5afb5e6136bd1cf35a51ca5134d3735ccd4d_0
2025-06-07 10:42:11,781 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = 2b86126e7b1d21a2147a0edaa6aeb022b6b5537f2b2b271b88c1c474963a057f975db86f09c9ad19d79f83ef16028d1eff14776b5ee13a4f9684c244062739a9_0
2025-06-07 10:42:11,782 - semgrep.rule_match - DEBUG - match_key = ('responseContainer.innerHTML = "...";\n responseContainer.innerHTML = `\n                    <div class="card bg-dark text-light mb-3">\n                        <div class="card-header">Your question: query</div>\n                        <div class="card-body">\n                            <p class="card-text">data.response</p>\n                        </div>\n                    </div>\n                ;\n', PosixPath('static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = ac94fcbaab204136b299c3d531f19d30d367b9ee06061a80fa18fb1d7abba1270afd786a1ac0381f20a7fb36357af30212d4f633915ea541eddc348f5f18fa2c_0
2025-06-07 10:42:11,782 - semgrep.rule_match - DEBUG - match_key = ('responseContainer.innerHTML = "...";\n responseContainer.innerHTML = `\n                    <div class="card bg-dark text-light mb-3">\n                        <div class="card-header">Your question: query</div>\n                        <div class="card-body">\n                            <p class="card-text">data.response</p>\n                        </div>\n                    </div>\n                ;\n', PosixPath('static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = ac94fcbaab204136b299c3d531f19d30d367b9ee06061a80fa18fb1d7abba1270afd786a1ac0381f20a7fb36357af30212d4f633915ea541eddc348f5f18fa2c_0
2025-06-07 10:42:11,783 - semgrep.rule_match - DEBUG - match_key = ('responseContainer.innerHTML = "...";\n responseContainer.innerHTML = `\n                    <div class="card bg-dark text-light mb-3">\n                        <div class="card-header">Your question: query</div>\n                        <div class="card-body">\n                            <p class="card-text">data.response</p>\n                        </div>\n                    </div>\n                ;\n', PosixPath('static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-innerhtml') match_id = ac94fcbaab204136b299c3d531f19d30d367b9ee06061a80fa18fb1d7abba1270afd786a1ac0381f20a7fb36357af30212d4f633915ea541eddc348f5f18fa2c_0
2025-06-07 10:42:11,784 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 79bc926098d389030996c1bcd0046741934dfa906ba49f09b2147dc97df587562ae136d62ac2565b7ee4c261aa0db20425613ae2f1445149659188012692bdaf_0
2025-06-07 10:42:11,784 - semgrep.rule_match - DEBUG - match_key = ('responseContainer.innerHTML = "...";\n responseContainer.innerHTML = `\n                    <div class="card bg-dark text-light mb-3">\n                        <div class="card-header">Your question: query</div>\n                        <div class="card-body">\n                            <p class="card-text">data.response</p>\n                        </div>\n                    </div>\n                ;\n responseContainer.outerHTML = `\n                    <div class="card bg-dark text-light mb-3">\n                        <div class="card-header">Your question: query</div>\n                        <div class="card-body">\n                            <p class="card-text">data.response</p>\n                        </div>\n                    </div>\n                ;\n document.write(...) responseContainer.outerHTML = "...";\n document.write("...")', PosixPath('static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 92b1fa5db8c7856687a87263636b80f63aa9b16d2f5244bf31a94399d745398b114ef03d120034a3c1618e5e41a1dfc73d8b4d2d3dde34a58994fcbad831ae70_0
2025-06-07 10:42:11,785 - semgrep.rule_match - DEBUG - match_key = ('responseContainer.innerHTML = "...";\n responseContainer.innerHTML = `\n                    <div class="card bg-dark text-light mb-3">\n                        <div class="card-header">Your question: query</div>\n                        <div class="card-body">\n                            <p class="card-text">data.response</p>\n                        </div>\n                    </div>\n                ;\n responseContainer.outerHTML = `\n                    <div class="card bg-dark text-light mb-3">\n                        <div class="card-header">Your question: query</div>\n                        <div class="card-body">\n                            <p class="card-text">data.response</p>\n                        </div>\n                    </div>\n                ;\n document.write(...) responseContainer.outerHTML = "...";\n document.write("...")', PosixPath('static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 92b1fa5db8c7856687a87263636b80f63aa9b16d2f5244bf31a94399d745398b114ef03d120034a3c1618e5e41a1dfc73d8b4d2d3dde34a58994fcbad831ae70_0
2025-06-07 10:42:11,785 - semgrep.rule_match - DEBUG - match_key = ('responseContainer.innerHTML = "...";\n responseContainer.innerHTML = `\n                    <div class="card bg-dark text-light mb-3">\n                        <div class="card-header">Your question: query</div>\n                        <div class="card-body">\n                            <p class="card-text">data.response</p>\n                        </div>\n                    </div>\n                ;\n responseContainer.outerHTML = `\n                    <div class="card bg-dark text-light mb-3">\n                        <div class="card-header">Your question: query</div>\n                        <div class="card-body">\n                            <p class="card-text">data.response</p>\n                        </div>\n                    </div>\n                ;\n document.write(...) responseContainer.outerHTML = "...";\n document.write("...")', PosixPath('static/js/main.js'), 'config..semgrep.vendored-rules.javascript.browser.security.insecure-document-method') match_id = 92b1fa5db8c7856687a87263636b80f63aa9b16d2f5244bf31a94399d745398b114ef03d120034a3c1618e5e41a1dfc73d8b4d2d3dde34a58994fcbad831ae70_0
2025-06-07 10:42:11,786 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('static/js/main.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = b60a8265633a21906524ca60770b2e48d5727fe1e8ff646819fd0a777a22d868959c57dca8de361951f0bd62360303fb327dd4aea1cb4a4bf4a2cc0b111a844f_0
2025-06-07 10:42:11,787 - semgrep.rule_match - DEBUG - match_key = ('</p>\n                        </div>\n                    </div>\n                 .*</?[a-zA-Z] `</p>\n                        </div>\n                    </div>\n                ${data.response}...`\n `...${data.response}</p>\n                        </div>\n                    </div>\n                `\n', PosixPath('static/js/main.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = c5f5f5e0d57273949749c1ae975cd832c7ef54590efee28ca204627f56db2dbb1252a22678652db8498a0bb4c4d44328a675886a962a16e20997d64d92b38a66_0
2025-06-07 10:42:11,787 - semgrep.rule_match - DEBUG - match_key = ('</p>\n                        </div>\n                    </div>\n                 .*</?[a-zA-Z] `</p>\n                        </div>\n                    </div>\n                ${data.response}...`\n `...${data.response}</p>\n                        </div>\n                    </div>\n                `\n', PosixPath('static/js/main.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = c5f5f5e0d57273949749c1ae975cd832c7ef54590efee28ca204627f56db2dbb1252a22678652db8498a0bb4c4d44328a675886a962a16e20997d64d92b38a66_0
2025-06-07 10:42:11,788 - semgrep.rule_match - DEBUG - match_key = ('</p>\n                        </div>\n                    </div>\n                 .*</?[a-zA-Z] `</p>\n                        </div>\n                    </div>\n                ${data.response}...`\n `...${data.response}</p>\n                        </div>\n                    </div>\n                `\n', PosixPath('static/js/main.js'), 'config..semgrep.vendored-rules.javascript.lang.security.html-in-template-string') match_id = c5f5f5e0d57273949749c1ae975cd832c7ef54590efee28ca204627f56db2dbb1252a22678652db8498a0bb4c4d44328a675886a962a16e20997d64d92b38a66_0
2025-06-07 10:42:11,789 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('templates/auth/edit_profile.html'), 'config..semgrep.vendored-rules.python.django.security.django-no-csrf-token') match_id = 856735f2dc9209cbe13c354a79463398b6681a0178942c802070f4b510ae5f90c7f387314354b416df88fc9f60601f332f1f818c31e92afe4453bebc35bac070_0
2025-06-07 10:42:11,790 - semgrep.rule_match - DEBUG - match_key = ('POST (?i)(post|put|delete|patch) <form ... method="POST" ...>...</form>\n <form ... method=POST ...>...</form>\n <form ... method=\'POST\' ...>...</form>\n <form...>...</form> <form...>...{% csrf_token %}...</form> <form...>...{{ $VAR.csrf_token }}...</form>', PosixPath('templates/auth/edit_profile.html'), 'config..semgrep.vendored-rules.python.django.security.django-no-csrf-token') match_id = e41f5260e9c008c3e00496c610cfc6a9c902ddef3904e9e9c169c2aa2e84b52c5b6fd6ffa575da0076ed83e2df355c091b41db9b8cb854f7387d9a7f5ee5bf25_0
2025-06-07 10:42:11,790 - semgrep.rule_match - DEBUG - match_key = ('POST (?i)(post|put|delete|patch) <form ... method="POST" ...>...</form>\n <form ... method=POST ...>...</form>\n <form ... method=\'POST\' ...>...</form>\n <form...>...</form> <form...>...{% csrf_token %}...</form> <form...>...{{ $VAR.csrf_token }}...</form>', PosixPath('templates/auth/edit_profile.html'), 'config..semgrep.vendored-rules.python.django.security.django-no-csrf-token') match_id = e41f5260e9c008c3e00496c610cfc6a9c902ddef3904e9e9c169c2aa2e84b52c5b6fd6ffa575da0076ed83e2df355c091b41db9b8cb854f7387d9a7f5ee5bf25_0
2025-06-07 10:42:11,791 - semgrep.rule_match - DEBUG - match_key = ('POST (?i)(post|put|delete|patch) <form ... method="POST" ...>...</form>\n <form ... method=POST ...>...</form>\n <form ... method=\'POST\' ...>...</form>\n <form...>...</form> <form...>...{% csrf_token %}...</form> <form...>...{{ $VAR.csrf_token }}...</form>', PosixPath('templates/auth/edit_profile.html'), 'config..semgrep.vendored-rules.python.django.security.django-no-csrf-token') match_id = e41f5260e9c008c3e00496c610cfc6a9c902ddef3904e9e9c169c2aa2e84b52c5b6fd6ffa575da0076ed83e2df355c091b41db9b8cb854f7387d9a7f5ee5bf25_0
2025-06-07 10:42:11,792 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('templates/auth/login.html'), 'config..semgrep.vendored-rules.python.django.security.django-no-csrf-token') match_id = acd81d92ac7aaa8810c1ed47c2373fe8b7613e8bb9b5ec971c503e3eaed02329c67c73b81856e373c19bfe30de32d168e28b13db1ab259342414948ef955fdb9_0
2025-06-07 10:42:11,792 - semgrep.rule_match - DEBUG - match_key = ('POST (?i)(post|put|delete|patch) <form ... method="POST" ...>...</form>\n <form ... method=POST ...>...</form>\n <form ... method=\'POST\' ...>...</form>\n <form...>...</form> <form...>...{% csrf_token %}...</form> <form...>...{{ $VAR.csrf_token }}...</form>', PosixPath('templates/auth/login.html'), 'config..semgrep.vendored-rules.python.django.security.django-no-csrf-token') match_id = 2cf6ce286a42df25caf221827f0a32a6ad5545a9685051882a90ef24458038d82f145df4372fd53c3a474c7a5f519b5a6ca3b86270833f06ec65a5f457fb3b5a_0
2025-06-07 10:42:11,793 - semgrep.rule_match - DEBUG - match_key = ('POST (?i)(post|put|delete|patch) <form ... method="POST" ...>...</form>\n <form ... method=POST ...>...</form>\n <form ... method=\'POST\' ...>...</form>\n <form...>...</form> <form...>...{% csrf_token %}...</form> <form...>...{{ $VAR.csrf_token }}...</form>', PosixPath('templates/auth/login.html'), 'config..semgrep.vendored-rules.python.django.security.django-no-csrf-token') match_id = 2cf6ce286a42df25caf221827f0a32a6ad5545a9685051882a90ef24458038d82f145df4372fd53c3a474c7a5f519b5a6ca3b86270833f06ec65a5f457fb3b5a_0
2025-06-07 10:42:11,793 - semgrep.rule_match - DEBUG - match_key = ('POST (?i)(post|put|delete|patch) <form ... method="POST" ...>...</form>\n <form ... method=POST ...>...</form>\n <form ... method=\'POST\' ...>...</form>\n <form...>...</form> <form...>...{% csrf_token %}...</form> <form...>...{{ $VAR.csrf_token }}...</form>', PosixPath('templates/auth/login.html'), 'config..semgrep.vendored-rules.python.django.security.django-no-csrf-token') match_id = 2cf6ce286a42df25caf221827f0a32a6ad5545a9685051882a90ef24458038d82f145df4372fd53c3a474c7a5f519b5a6ca3b86270833f06ec65a5f457fb3b5a_0
2025-06-07 10:42:11,794 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('templates/background_remover.html'), 'config..semgrep.vendored-rules.python.django.security.django-no-csrf-token') match_id = 83e296041b6885b5693ac75345aecf1d90e53a789bb5f1ea0142cbfcd4380d745924c97d5ac981e72bca66e2c927c190286b9ea9ebcbff7be91cafd36e5c155c_0
2025-06-07 10:42:11,795 - semgrep.rule_match - DEBUG - match_key = ('post (?i)(post|put|delete|patch) <form ... method="post" ...>...</form>\n <form ... method=post ...>...</form>\n <form ... method=\'post\' ...>...</form>\n <form...>...</form> <form...>...{% csrf_token %}...</form> <form...>...{{ $VAR.csrf_token }}...</form>', PosixPath('templates/background_remover.html'), 'config..semgrep.vendored-rules.python.django.security.django-no-csrf-token') match_id = 5fd3e6d5540baf9b4430042ed399d3e69ae3e2a6e1ccf4276e67f7d72134d612dc61e4202a38be8d8f50197594d9e39ee499934d2ef9f1eb200ad04170b1ddd0_0
2025-06-07 10:42:11,795 - semgrep.rule_match - DEBUG - match_key = ('post (?i)(post|put|delete|patch) <form ... method="post" ...>...</form>\n <form ... method=post ...>...</form>\n <form ... method=\'post\' ...>...</form>\n <form...>...</form> <form...>...{% csrf_token %}...</form> <form...>...{{ $VAR.csrf_token }}...</form>', PosixPath('templates/background_remover.html'), 'config..semgrep.vendored-rules.python.django.security.django-no-csrf-token') match_id = 5fd3e6d5540baf9b4430042ed399d3e69ae3e2a6e1ccf4276e67f7d72134d612dc61e4202a38be8d8f50197594d9e39ee499934d2ef9f1eb200ad04170b1ddd0_0
2025-06-07 10:42:11,796 - semgrep.rule_match - DEBUG - match_key = ('post (?i)(post|put|delete|patch) <form ... method="post" ...>...</form>\n <form ... method=post ...>...</form>\n <form ... method=\'post\' ...>...</form>\n <form...>...</form> <form...>...{% csrf_token %}...</form> <form...>...{{ $VAR.csrf_token }}...</form>', PosixPath('templates/background_remover.html'), 'config..semgrep.vendored-rules.python.django.security.django-no-csrf-token') match_id = 5fd3e6d5540baf9b4430042ed399d3e69ae3e2a6e1ccf4276e67f7d72134d612dc61e4202a38be8d8f50197594d9e39ee499934d2ef9f1eb200ad04170b1ddd0_0
2025-06-07 10:42:11,796 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = b6738baed7759a04b726eaaff7e69cad70ab6cb23e6f36fc8c04a281dc4b99f28e27704d89459363eb1b5bd772800ed367e2a70853de276cc1f28e7cca5151c5_0
2025-06-07 10:42:11,797 - semgrep.rule_match - DEBUG - match_key = (' href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" > <script  href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" >...</script>', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 2fb9f35e57b5ed1321466d0fef7dd0b1faf3481ff577842519c16e969ed8697f1a6738ee2cd879487c692dc2c51fec9aa1782fd1518dd413015336c09d6dfafd_0
2025-06-07 10:42:11,797 - semgrep.rule_match - DEBUG - match_key = (' href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" > <script  href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" >...</script>', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 2fb9f35e57b5ed1321466d0fef7dd0b1faf3481ff577842519c16e969ed8697f1a6738ee2cd879487c692dc2c51fec9aa1782fd1518dd413015336c09d6dfafd_0
2025-06-07 10:42:11,808 - semgrep.rule_match - DEBUG - match_key = (' href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" > <script  href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" >...</script>', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 2fb9f35e57b5ed1321466d0fef7dd0b1faf3481ff577842519c16e969ed8697f1a6738ee2cd879487c692dc2c51fec9aa1782fd1518dd413015336c09d6dfafd_0
2025-06-07 10:42:11,809 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = b6738baed7759a04b726eaaff7e69cad70ab6cb23e6f36fc8c04a281dc4b99f28e27704d89459363eb1b5bd772800ed367e2a70853de276cc1f28e7cca5151c5_0
2025-06-07 10:42:11,809 - semgrep.rule_match - DEBUG - match_key = (' href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" > <script  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" >...</script>', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 679e0da40aa661d0ff9fc69d4361934d21bbbc1455ca7e5276ab4eb14eeb2f777a7222a808078b967cf7bbc0f6b18926e8940e5871796285eea75ca18ae39221_0
2025-06-07 10:42:11,809 - semgrep.rule_match - DEBUG - match_key = (' href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" > <script  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" >...</script>', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 679e0da40aa661d0ff9fc69d4361934d21bbbc1455ca7e5276ab4eb14eeb2f777a7222a808078b967cf7bbc0f6b18926e8940e5871796285eea75ca18ae39221_0
2025-06-07 10:42:11,810 - semgrep.rule_match - DEBUG - match_key = (' href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" > <script  href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet" >...</script>', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 679e0da40aa661d0ff9fc69d4361934d21bbbc1455ca7e5276ab4eb14eeb2f777a7222a808078b967cf7bbc0f6b18926e8940e5871796285eea75ca18ae39221_0
2025-06-07 10:42:11,810 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = b6738baed7759a04b726eaaff7e69cad70ab6cb23e6f36fc8c04a281dc4b99f28e27704d89459363eb1b5bd772800ed367e2a70853de276cc1f28e7cca5151c5_0
2025-06-07 10:42:11,811 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" > <script  src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" >...</script>', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = ccf2a5618405aa65d20e9f14f7e070245edf477a44ebd15c339d2006a46780ed729dc0a4f58182deda6e7a0bcdece48b09eb7b093c16e481308ea4c348f00281_0
2025-06-07 10:42:11,812 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" > <script  src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" >...</script>', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = ccf2a5618405aa65d20e9f14f7e070245edf477a44ebd15c339d2006a46780ed729dc0a4f58182deda6e7a0bcdece48b09eb7b093c16e481308ea4c348f00281_0
2025-06-07 10:42:11,812 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" > <script  src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" >...</script>', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = ccf2a5618405aa65d20e9f14f7e070245edf477a44ebd15c339d2006a46780ed729dc0a4f58182deda6e7a0bcdece48b09eb7b093c16e481308ea4c348f00281_0
2025-06-07 10:42:11,813 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag') match_id = f8aa57369276825bf517534a86c2d85f1632e1e3aef64c24b2676a400bd96afcc612399723388d0f2025cf2b5b17b5f8d9d7c499bdfdc9a7fcd861f8aafe12b5_0
2025-06-07 10:42:11,813 - semgrep.rule_match - DEBUG - match_key = ('<script ...> ... </script> {{ ... }}', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag') match_id = 222c09c230093233e6db3b14ca1dec3c4148ccdbd347fe61c99519f77dd812b52d57fefb73c757411635f16a06489a349834457910d9355ba3b0adf0aca06bfe_0
2025-06-07 10:42:11,814 - semgrep.rule_match - DEBUG - match_key = ('<script ...> ... </script> {{ ... }}', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag') match_id = 222c09c230093233e6db3b14ca1dec3c4148ccdbd347fe61c99519f77dd812b52d57fefb73c757411635f16a06489a349834457910d9355ba3b0adf0aca06bfe_0
2025-06-07 10:42:11,814 - semgrep.rule_match - DEBUG - match_key = ('<script ...> ... </script> {{ ... }}', PosixPath('templates/base.html'), 'config..semgrep.vendored-rules.javascript.express.security.audit.xss.mustache.var-in-script-tag') match_id = 222c09c230093233e6db3b14ca1dec3c4148ccdbd347fe61c99519f77dd812b52d57fefb73c757411635f16a06489a349834457910d9355ba3b0adf0aca06bfe_0
2025-06-07 10:42:11,815 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('templates/editor/certificate_editor.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 9aba7eb22f4f5e1ad6cf25428c4bb90339442fb8b8bf6954e028a4a98c97cc23b97964d59b0492d313edc463bb3c7d8a63b54b0a113564c5aa7f13898c6b4dfb_0
2025-06-07 10:42:11,816 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/fabric@5.2.1/dist/fabric.min.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/fabric@5.2.1/dist/fabric.min.js" > <script  src="https://cdn.jsdelivr.net/npm/fabric@5.2.1/dist/fabric.min.js" >...</script>', PosixPath('templates/editor/certificate_editor.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 102df0051c6c19b52895e04d50c2075cf9d0f1342b2f1dd412a0d577c83b8fb8cc15d0c0f6cf2240e2416bbf58f41397a3bee87c1fb76ea34bc2ce49febbb931_0
2025-06-07 10:42:11,816 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/fabric@5.2.1/dist/fabric.min.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/fabric@5.2.1/dist/fabric.min.js" > <script  src="https://cdn.jsdelivr.net/npm/fabric@5.2.1/dist/fabric.min.js" >...</script>', PosixPath('templates/editor/certificate_editor.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 102df0051c6c19b52895e04d50c2075cf9d0f1342b2f1dd412a0d577c83b8fb8cc15d0c0f6cf2240e2416bbf58f41397a3bee87c1fb76ea34bc2ce49febbb931_0
2025-06-07 10:42:11,817 - semgrep.rule_match - DEBUG - match_key = (' src="https://cdn.jsdelivr.net/npm/fabric@5.2.1/dist/fabric.min.js" (?is).*integrity= (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com) .*rel\\s*=\\s*[\'"]?preconnect.* href="... :// ..." href="//..." href=\'... :// ...\' href=\'//...\' src="... :// ..." src="//..." src=\'... :// ...\' src=\'//...\' <link  src="https://cdn.jsdelivr.net/npm/fabric@5.2.1/dist/fabric.min.js" > <script  src="https://cdn.jsdelivr.net/npm/fabric@5.2.1/dist/fabric.min.js" >...</script>', PosixPath('templates/editor/certificate_editor.html'), 'config..semgrep.vendored-rules.html.security.audit.missing-integrity') match_id = 102df0051c6c19b52895e04d50c2075cf9d0f1342b2f1dd412a0d577c83b8fb8cc15d0c0f6cf2240e2416bbf58f41397a3bee87c1fb76ea34bc2ce49febbb931_0
2025-06-07 10:42:11,818 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('templates/pages/support.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 191b31e852169f5715f616a5c2f7c9ee07ceeedb03ac43b387416df4235bc928024df56811b75309045c7088acb69a789f2b96e25207ac051721536f551996ff_0
2025-06-07 10:42:11,819 - semgrep.rule_match - DEBUG - match_key = ('\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        const chatForm = document.getElementById(\'chatForm\');\n        const userMessageInput = document.getElementById(\'userMessage\');\n        const chatMessages = document.getElementById(\'chatMessages\');\n\n        // Sample responses for the chatbot\n        const botResponses = {\n            \'hello\': \'Hello! How can I help you today?\',\n            \'hi\': \'Hi there! How can I assist you with Fixio?\',\n            \'help\': \'I\\\'m here to help! What specifically do you need assistance with?\',\n            \'merge pdf\': \'To merge PDF files, go to our PDF Merger tool in the PDF Tools section. Upload the PDF files you want to combine, arrange them in the desired order, and click "Merge PDFs". You can then download the merged file.\',\n            \'remove background\': \'To remove an image background, navigate to the Background Remover tool in the Image Tools section. Upload your image, and our AI will automatically detect and remove the background, creating a transparent PNG.\',\n            \'edit excel\': \'You can edit Excel files using our AI Excel Assistant. Simply upload your Excel file, then describe in plain language what changes you want to make. For example, "Sort column A alphabetically" or "Create a sum of all values in column B".\',\n            \'subscription\': \'For subscription-related questions, please go to your Account Settings > Billing section. There you can view your current plan, update payment methods, or manage your subscription.\',\n            \'password\': \'To reset your password, click on the "Forgot Password" link on the login page. We\\\'ll send you an email with instructions to create a new password.\',\n            \'contact\': \'You can reach our support team via email at support@fixio.tools. For Pro and Enterprise users, we also offer priority support with faster response times.\',\n            \'pricing\': \'We offer three plans: Free, Pro ($5/month), and Enterprise (custom pricing). You can view detailed pricing information on our Pricing page.\',\n            \'refund\': \'We offer a 14-day money-back guarantee for Pro subscriptions. Please contact our support team to request a refund if you\\\'re within this period.\',\n            \'default\': \'I don\\\'t have specific information about that yet. Please email our support team at support@fixio.tools for more detailed assistance.\'\n        };\n\n        // Handle form submission\n        chatForm.addEventListener(\'submit\', function(e) {\n            e.preventDefault();\n\n            const userMessage = userMessageInput.value.trim();\n            if (!userMessage) return;\n\n            // Add user message to chat\n            addMessage(userMessage, \'user\');\n\n            // Clear input\n            userMessageInput.value = \'\';\n\n            // Simulate bot "typing"\n            setTimeout(function() {\n                // Get bot response\n                const botResponse = getBotResponse(userMessage);\n\n                // Add bot response to chat\n                addMessage(botResponse, \'bot\');\n\n                // Scroll to bottom\n                chatMessages.scrollTop = chatMessages.scrollHeight;\n            }, 1000);\n        });\n\n        // Function to add message to chat\n        function addMessage(message, sender) {\n            const messageDiv = document.createElement(\'div\');\n            messageDiv.className = `message ${sender}-message`;\n\n            const messageContent = document.createElement(\'div\');\n            messageContent.className = \'message-content\';\n            messageContent.innerHTML = `<p>${message}</p>`;\n\n            messageDiv.appendChild(messageContent);\n            chatMessages.appendChild(messageDiv);\n\n            // Scroll to bottom\n            chatMessages.scrollTop = chatMessages.scrollHeight;\n        }\n\n        // Function to get bot response based on user message\n        function getBotResponse(userMessage) {\n            userMessage = userMessage.toLowerCase();\n\n            // Check each keyword for a match\n            for (const [keyword, response] of Object.entries(botResponses)) {\n                if (userMessage.includes(keyword)) {\n                    return response;\n                }\n            }\n\n            // If no match, return default response\n            return botResponses.default;\n        }\n    });\n $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        const chatForm = document.getElementById(\'chatForm\');\n        const userMessageInput = document.getElementById(\'userMessage\');\n        const chatMessages = document.getElementById(\'chatMessages\');\n\n        // Sample responses for the chatbot\n        const botResponses = {\n            \'hello\': \'Hello! How can I help you today?\',\n            \'hi\': \'Hi there! How can I assist you with Fixio?\',\n            \'help\': \'I\\\'m here to help! What specifically do you need assistance with?\',\n            \'merge pdf\': \'To merge PDF files, go to our PDF Merger tool in the PDF Tools section. Upload the PDF files you want to combine, arrange them in the desired order, and click "Merge PDFs". You can then download the merged file.\',\n            \'remove background\': \'To remove an image background, navigate to the Background Remover tool in the Image Tools section. Upload your image, and our AI will automatically detect and remove the background, creating a transparent PNG.\',\n            \'edit excel\': \'You can edit Excel files using our AI Excel Assistant. Simply upload your Excel file, then describe in plain language what changes you want to make. For example, "Sort column A alphabetically" or "Create a sum of all values in column B".\',\n            \'subscription\': \'For subscription-related questions, please go to your Account Settings > Billing section. There you can view your current plan, update payment methods, or manage your subscription.\',\n            \'password\': \'To reset your password, click on the "Forgot Password" link on the login page. We\\\'ll send you an email with instructions to create a new password.\',\n            \'contact\': \'You can reach our support team via email at support@fixio.tools. For Pro and Enterprise users, we also offer priority support with faster response times.\',\n            \'pricing\': \'We offer three plans: Free, Pro ($5/month), and Enterprise (custom pricing). You can view detailed pricing information on our Pricing page.\',\n            \'refund\': \'We offer a 14-day money-back guarantee for Pro subscriptions. Please contact our support team to request a refund if you\\\'re within this period.\',\n            \'default\': \'I don\\\'t have specific information about that yet. Please email our support team at support@fixio.tools for more detailed assistance.\'\n        };\n\n        // Handle form submission\n        chatForm.addEventListener(\'submit\', function(e) {\n            e.preventDefault();\n\n            const userMessage = userMessageInput.value.trim();\n            if (!userMessage) return;\n\n            // Add user message to chat\n            addMessage(userMessage, \'user\');\n\n            // Clear input\n            userMessageInput.value = \'\';\n\n            // Simulate bot "typing"\n            setTimeout(function() {\n                // Get bot response\n                const botResponse = getBotResponse(userMessage);\n\n                // Add bot response to chat\n                addMessage(botResponse, \'bot\');\n\n                // Scroll to bottom\n                chatMessages.scrollTop = chatMessages.scrollHeight;\n            }, 1000);\n        });\n\n        // Function to add message to chat\n        function addMessage(message, sender) {\n            const messageDiv = document.createElement(\'div\');\n            messageDiv.className = `message ${sender}-message`;\n\n            const messageContent = document.createElement(\'div\');\n            messageContent.className = \'message-content\';\n            messageContent.innerHTML = `<p>${message}</p>`;\n\n            messageDiv.appendChild(messageContent);\n            chatMessages.appendChild(messageDiv);\n\n            // Scroll to bottom\n            chatMessages.scrollTop = chatMessages.scrollHeight;\n        }\n\n        // Function to get bot response based on user message\n        function getBotResponse(userMessage) {\n            userMessage = userMessage.toLowerCase();\n\n            // Check each keyword for a match\n            for (const [keyword, response] of Object.entries(botResponses)) {\n                if (userMessage.includes(keyword)) {\n                    return response;\n                }\n            }\n\n            // If no match, return default response\n            return botResponses.default;\n        }\n    });\n</script>\n', PosixPath('templates/pages/support.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 4469dc92f5f8ce57a5554a38c70bdfed82fd7618dce5a44250f03379212ecfb026564d6e9de1694a426c187cd024c74355112205471331621fc3d33169a95792_0
2025-06-07 10:42:11,821 - semgrep.rule_match - DEBUG - match_key = ('\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        const chatForm = document.getElementById(\'chatForm\');\n        const userMessageInput = document.getElementById(\'userMessage\');\n        const chatMessages = document.getElementById(\'chatMessages\');\n\n        // Sample responses for the chatbot\n        const botResponses = {\n            \'hello\': \'Hello! How can I help you today?\',\n            \'hi\': \'Hi there! How can I assist you with Fixio?\',\n            \'help\': \'I\\\'m here to help! What specifically do you need assistance with?\',\n            \'merge pdf\': \'To merge PDF files, go to our PDF Merger tool in the PDF Tools section. Upload the PDF files you want to combine, arrange them in the desired order, and click "Merge PDFs". You can then download the merged file.\',\n            \'remove background\': \'To remove an image background, navigate to the Background Remover tool in the Image Tools section. Upload your image, and our AI will automatically detect and remove the background, creating a transparent PNG.\',\n            \'edit excel\': \'You can edit Excel files using our AI Excel Assistant. Simply upload your Excel file, then describe in plain language what changes you want to make. For example, "Sort column A alphabetically" or "Create a sum of all values in column B".\',\n            \'subscription\': \'For subscription-related questions, please go to your Account Settings > Billing section. There you can view your current plan, update payment methods, or manage your subscription.\',\n            \'password\': \'To reset your password, click on the "Forgot Password" link on the login page. We\\\'ll send you an email with instructions to create a new password.\',\n            \'contact\': \'You can reach our support team via email at support@fixio.tools. For Pro and Enterprise users, we also offer priority support with faster response times.\',\n            \'pricing\': \'We offer three plans: Free, Pro ($5/month), and Enterprise (custom pricing). You can view detailed pricing information on our Pricing page.\',\n            \'refund\': \'We offer a 14-day money-back guarantee for Pro subscriptions. Please contact our support team to request a refund if you\\\'re within this period.\',\n            \'default\': \'I don\\\'t have specific information about that yet. Please email our support team at support@fixio.tools for more detailed assistance.\'\n        };\n\n        // Handle form submission\n        chatForm.addEventListener(\'submit\', function(e) {\n            e.preventDefault();\n\n            const userMessage = userMessageInput.value.trim();\n            if (!userMessage) return;\n\n            // Add user message to chat\n            addMessage(userMessage, \'user\');\n\n            // Clear input\n            userMessageInput.value = \'\';\n\n            // Simulate bot "typing"\n            setTimeout(function() {\n                // Get bot response\n                const botResponse = getBotResponse(userMessage);\n\n                // Add bot response to chat\n                addMessage(botResponse, \'bot\');\n\n                // Scroll to bottom\n                chatMessages.scrollTop = chatMessages.scrollHeight;\n            }, 1000);\n        });\n\n        // Function to add message to chat\n        function addMessage(message, sender) {\n            const messageDiv = document.createElement(\'div\');\n            messageDiv.className = `message ${sender}-message`;\n\n            const messageContent = document.createElement(\'div\');\n            messageContent.className = \'message-content\';\n            messageContent.innerHTML = `<p>${message}</p>`;\n\n            messageDiv.appendChild(messageContent);\n            chatMessages.appendChild(messageDiv);\n\n            // Scroll to bottom\n            chatMessages.scrollTop = chatMessages.scrollHeight;\n        }\n\n        // Function to get bot response based on user message\n        function getBotResponse(userMessage) {\n            userMessage = userMessage.toLowerCase();\n\n            // Check each keyword for a match\n            for (const [keyword, response] of Object.entries(botResponses)) {\n                if (userMessage.includes(keyword)) {\n                    return response;\n                }\n            }\n\n            // If no match, return default response\n            return botResponses.default;\n        }\n    });\n $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        const chatForm = document.getElementById(\'chatForm\');\n        const userMessageInput = document.getElementById(\'userMessage\');\n        const chatMessages = document.getElementById(\'chatMessages\');\n\n        // Sample responses for the chatbot\n        const botResponses = {\n            \'hello\': \'Hello! How can I help you today?\',\n            \'hi\': \'Hi there! How can I assist you with Fixio?\',\n            \'help\': \'I\\\'m here to help! What specifically do you need assistance with?\',\n            \'merge pdf\': \'To merge PDF files, go to our PDF Merger tool in the PDF Tools section. Upload the PDF files you want to combine, arrange them in the desired order, and click "Merge PDFs". You can then download the merged file.\',\n            \'remove background\': \'To remove an image background, navigate to the Background Remover tool in the Image Tools section. Upload your image, and our AI will automatically detect and remove the background, creating a transparent PNG.\',\n            \'edit excel\': \'You can edit Excel files using our AI Excel Assistant. Simply upload your Excel file, then describe in plain language what changes you want to make. For example, "Sort column A alphabetically" or "Create a sum of all values in column B".\',\n            \'subscription\': \'For subscription-related questions, please go to your Account Settings > Billing section. There you can view your current plan, update payment methods, or manage your subscription.\',\n            \'password\': \'To reset your password, click on the "Forgot Password" link on the login page. We\\\'ll send you an email with instructions to create a new password.\',\n            \'contact\': \'You can reach our support team via email at support@fixio.tools. For Pro and Enterprise users, we also offer priority support with faster response times.\',\n            \'pricing\': \'We offer three plans: Free, Pro ($5/month), and Enterprise (custom pricing). You can view detailed pricing information on our Pricing page.\',\n            \'refund\': \'We offer a 14-day money-back guarantee for Pro subscriptions. Please contact our support team to request a refund if you\\\'re within this period.\',\n            \'default\': \'I don\\\'t have specific information about that yet. Please email our support team at support@fixio.tools for more detailed assistance.\'\n        };\n\n        // Handle form submission\n        chatForm.addEventListener(\'submit\', function(e) {\n            e.preventDefault();\n\n            const userMessage = userMessageInput.value.trim();\n            if (!userMessage) return;\n\n            // Add user message to chat\n            addMessage(userMessage, \'user\');\n\n            // Clear input\n            userMessageInput.value = \'\';\n\n            // Simulate bot "typing"\n            setTimeout(function() {\n                // Get bot response\n                const botResponse = getBotResponse(userMessage);\n\n                // Add bot response to chat\n                addMessage(botResponse, \'bot\');\n\n                // Scroll to bottom\n                chatMessages.scrollTop = chatMessages.scrollHeight;\n            }, 1000);\n        });\n\n        // Function to add message to chat\n        function addMessage(message, sender) {\n            const messageDiv = document.createElement(\'div\');\n            messageDiv.className = `message ${sender}-message`;\n\n            const messageContent = document.createElement(\'div\');\n            messageContent.className = \'message-content\';\n            messageContent.innerHTML = `<p>${message}</p>`;\n\n            messageDiv.appendChild(messageContent);\n            chatMessages.appendChild(messageDiv);\n\n            // Scroll to bottom\n            chatMessages.scrollTop = chatMessages.scrollHeight;\n        }\n\n        // Function to get bot response based on user message\n        function getBotResponse(userMessage) {\n            userMessage = userMessage.toLowerCase();\n\n            // Check each keyword for a match\n            for (const [keyword, response] of Object.entries(botResponses)) {\n                if (userMessage.includes(keyword)) {\n                    return response;\n                }\n            }\n\n            // If no match, return default response\n            return botResponses.default;\n        }\n    });\n</script>\n', PosixPath('templates/pages/support.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 4469dc92f5f8ce57a5554a38c70bdfed82fd7618dce5a44250f03379212ecfb026564d6e9de1694a426c187cd024c74355112205471331621fc3d33169a95792_0
2025-06-07 10:42:11,823 - semgrep.rule_match - DEBUG - match_key = ('\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        const chatForm = document.getElementById(\'chatForm\');\n        const userMessageInput = document.getElementById(\'userMessage\');\n        const chatMessages = document.getElementById(\'chatMessages\');\n\n        // Sample responses for the chatbot\n        const botResponses = {\n            \'hello\': \'Hello! How can I help you today?\',\n            \'hi\': \'Hi there! How can I assist you with Fixio?\',\n            \'help\': \'I\\\'m here to help! What specifically do you need assistance with?\',\n            \'merge pdf\': \'To merge PDF files, go to our PDF Merger tool in the PDF Tools section. Upload the PDF files you want to combine, arrange them in the desired order, and click "Merge PDFs". You can then download the merged file.\',\n            \'remove background\': \'To remove an image background, navigate to the Background Remover tool in the Image Tools section. Upload your image, and our AI will automatically detect and remove the background, creating a transparent PNG.\',\n            \'edit excel\': \'You can edit Excel files using our AI Excel Assistant. Simply upload your Excel file, then describe in plain language what changes you want to make. For example, "Sort column A alphabetically" or "Create a sum of all values in column B".\',\n            \'subscription\': \'For subscription-related questions, please go to your Account Settings > Billing section. There you can view your current plan, update payment methods, or manage your subscription.\',\n            \'password\': \'To reset your password, click on the "Forgot Password" link on the login page. We\\\'ll send you an email with instructions to create a new password.\',\n            \'contact\': \'You can reach our support team via email at support@fixio.tools. For Pro and Enterprise users, we also offer priority support with faster response times.\',\n            \'pricing\': \'We offer three plans: Free, Pro ($5/month), and Enterprise (custom pricing). You can view detailed pricing information on our Pricing page.\',\n            \'refund\': \'We offer a 14-day money-back guarantee for Pro subscriptions. Please contact our support team to request a refund if you\\\'re within this period.\',\n            \'default\': \'I don\\\'t have specific information about that yet. Please email our support team at support@fixio.tools for more detailed assistance.\'\n        };\n\n        // Handle form submission\n        chatForm.addEventListener(\'submit\', function(e) {\n            e.preventDefault();\n\n            const userMessage = userMessageInput.value.trim();\n            if (!userMessage) return;\n\n            // Add user message to chat\n            addMessage(userMessage, \'user\');\n\n            // Clear input\n            userMessageInput.value = \'\';\n\n            // Simulate bot "typing"\n            setTimeout(function() {\n                // Get bot response\n                const botResponse = getBotResponse(userMessage);\n\n                // Add bot response to chat\n                addMessage(botResponse, \'bot\');\n\n                // Scroll to bottom\n                chatMessages.scrollTop = chatMessages.scrollHeight;\n            }, 1000);\n        });\n\n        // Function to add message to chat\n        function addMessage(message, sender) {\n            const messageDiv = document.createElement(\'div\');\n            messageDiv.className = `message ${sender}-message`;\n\n            const messageContent = document.createElement(\'div\');\n            messageContent.className = \'message-content\';\n            messageContent.innerHTML = `<p>${message}</p>`;\n\n            messageDiv.appendChild(messageContent);\n            chatMessages.appendChild(messageDiv);\n\n            // Scroll to bottom\n            chatMessages.scrollTop = chatMessages.scrollHeight;\n        }\n\n        // Function to get bot response based on user message\n        function getBotResponse(userMessage) {\n            userMessage = userMessage.toLowerCase();\n\n            // Check each keyword for a match\n            for (const [keyword, response] of Object.entries(botResponses)) {\n                if (userMessage.includes(keyword)) {\n                    return response;\n                }\n            }\n\n            // If no match, return default response\n            return botResponses.default;\n        }\n    });\n $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        const chatForm = document.getElementById(\'chatForm\');\n        const userMessageInput = document.getElementById(\'userMessage\');\n        const chatMessages = document.getElementById(\'chatMessages\');\n\n        // Sample responses for the chatbot\n        const botResponses = {\n            \'hello\': \'Hello! How can I help you today?\',\n            \'hi\': \'Hi there! How can I assist you with Fixio?\',\n            \'help\': \'I\\\'m here to help! What specifically do you need assistance with?\',\n            \'merge pdf\': \'To merge PDF files, go to our PDF Merger tool in the PDF Tools section. Upload the PDF files you want to combine, arrange them in the desired order, and click "Merge PDFs". You can then download the merged file.\',\n            \'remove background\': \'To remove an image background, navigate to the Background Remover tool in the Image Tools section. Upload your image, and our AI will automatically detect and remove the background, creating a transparent PNG.\',\n            \'edit excel\': \'You can edit Excel files using our AI Excel Assistant. Simply upload your Excel file, then describe in plain language what changes you want to make. For example, "Sort column A alphabetically" or "Create a sum of all values in column B".\',\n            \'subscription\': \'For subscription-related questions, please go to your Account Settings > Billing section. There you can view your current plan, update payment methods, or manage your subscription.\',\n            \'password\': \'To reset your password, click on the "Forgot Password" link on the login page. We\\\'ll send you an email with instructions to create a new password.\',\n            \'contact\': \'You can reach our support team via email at support@fixio.tools. For Pro and Enterprise users, we also offer priority support with faster response times.\',\n            \'pricing\': \'We offer three plans: Free, Pro ($5/month), and Enterprise (custom pricing). You can view detailed pricing information on our Pricing page.\',\n            \'refund\': \'We offer a 14-day money-back guarantee for Pro subscriptions. Please contact our support team to request a refund if you\\\'re within this period.\',\n            \'default\': \'I don\\\'t have specific information about that yet. Please email our support team at support@fixio.tools for more detailed assistance.\'\n        };\n\n        // Handle form submission\n        chatForm.addEventListener(\'submit\', function(e) {\n            e.preventDefault();\n\n            const userMessage = userMessageInput.value.trim();\n            if (!userMessage) return;\n\n            // Add user message to chat\n            addMessage(userMessage, \'user\');\n\n            // Clear input\n            userMessageInput.value = \'\';\n\n            // Simulate bot "typing"\n            setTimeout(function() {\n                // Get bot response\n                const botResponse = getBotResponse(userMessage);\n\n                // Add bot response to chat\n                addMessage(botResponse, \'bot\');\n\n                // Scroll to bottom\n                chatMessages.scrollTop = chatMessages.scrollHeight;\n            }, 1000);\n        });\n\n        // Function to add message to chat\n        function addMessage(message, sender) {\n            const messageDiv = document.createElement(\'div\');\n            messageDiv.className = `message ${sender}-message`;\n\n            const messageContent = document.createElement(\'div\');\n            messageContent.className = \'message-content\';\n            messageContent.innerHTML = `<p>${message}</p>`;\n\n            messageDiv.appendChild(messageContent);\n            chatMessages.appendChild(messageDiv);\n\n            // Scroll to bottom\n            chatMessages.scrollTop = chatMessages.scrollHeight;\n        }\n\n        // Function to get bot response based on user message\n        function getBotResponse(userMessage) {\n            userMessage = userMessage.toLowerCase();\n\n            // Check each keyword for a match\n            for (const [keyword, response] of Object.entries(botResponses)) {\n                if (userMessage.includes(keyword)) {\n                    return response;\n                }\n            }\n\n            // If no match, return default response\n            return botResponses.default;\n        }\n    });\n</script>\n', PosixPath('templates/pages/support.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 4469dc92f5f8ce57a5554a38c70bdfed82fd7618dce5a44250f03379212ecfb026564d6e9de1694a426c187cd024c74355112205471331621fc3d33169a95792_0
2025-06-07 10:42:11,824 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('templates/pdf_merger.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = dbb06d00ee6b6cbf00a0a0230b4e1db5258a58ce1454f8852004b56972c827bc24bde4062a0ebe9c617d4003e1e8b5b101731ad25fd74f1f7fe1a41205e0a0c6_0
2025-06-07 10:42:11,826 - semgrep.rule_match - DEBUG - match_key = ('\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        const fileCountInput = document.getElementById(\'file_count\');\n        const dynamicFileUploads = document.getElementById(\'dynamic-file-uploads\');\n        const bulkUploadCheckbox = document.getElementById(\'use_multiple_upload\');\n        const bulkUploadContainer = document.getElementById(\'bulk-upload-container\');\n        \n        // Initialize file upload containers\n        setupFileUploadContainers();\n        \n        // Update file upload fields when file count changes\n        fileCountInput.addEventListener(\'change\', function() {\n            updateFileUploadFields();\n        });\n        \n        // Toggle between individual uploads and bulk upload\n        bulkUploadCheckbox.addEventListener(\'change\', function() {\n            if (this.checked) {\n                dynamicFileUploads.style.display = \'none\';\n                bulkUploadContainer.style.display = \'block\';\n                \n                // Make individual file inputs not required\n                const fileInputs = dynamicFileUploads.querySelectorAll(\'input[type="file"]\');\n                fileInputs.forEach(input => {\n                    input.required = false;\n                });\n            } else {\n                dynamicFileUploads.style.display = \'block\';\n                bulkUploadContainer.style.display = \'none\';\n                \n                // Make individual file inputs required again\n                const fileInputs = dynamicFileUploads.querySelectorAll(\'input[type="file"]\');\n                fileInputs.forEach(input => {\n                    input.required = true;\n                });\n            }\n        });\n        \n        // Update file upload fields based on count\n        function updateFileUploadFields() {\n            let count = parseInt(fileCountInput.value);\n            \n            // Enforce min/max constraints\n            if (count < 2) {\n                count = 2;\n                fileCountInput.value = 2;\n            } else if (count > 20) {\n                count = 20;\n                fileCountInput.value = 20;\n            }\n            \n            // Clear existing file upload containers\n            dynamicFileUploads.innerHTML = \'\';\n            \n            // Create file upload containers based on count\n            for (let i = 1; i <= count; i++) {\n                const container = document.createElement(\'div\');\n                container.className = \'file-upload-container mb-3\';\n                container.innerHTML = `\n                    <label class="form-label">File ${i}</label>\n                    <div class="file-upload">\n                        <i class="fas fa-file-pdf file-upload-icon"></i>\n                        <p class="upload-text mb-2">Click to upload PDF</p>\n                        <input type="file" name="file_${i}" accept=".pdf" class="file-input d-none" required>\n                    </div>\n                    <div class="file-info"></div>\n                `;\n                dynamicFileUploads.appendChild(container);\n            }\n            \n            // Setup event listeners for new file upload containers\n            setupFileUploadContainers();\n        }\n        \n        // Setup file upload containers with event listeners\n        function setupFileUploadContainers() {\n            // Setup dynamic file uploads\n            const dynamicContainers = dynamicFileUploads.querySelectorAll(\'.file-upload-container\');\n            dynamicContainers.forEach(container => {\n                const fileUpload = container.querySelector(\'.file-upload\');\n                const fileInput = container.querySelector(\'input[type="file"]\');\n                const fileInfo = container.querySelector(\'.file-info\');\n                \n                fileUpload.addEventListener(\'click\', function() {\n                    fileInput.click();\n                });\n                \n                fileInput.addEventListener(\'change\', function() {\n                    handleFileSelection(this, fileInfo, fileUpload);\n                });\n            });\n            \n            // Setup bulk file upload\n            const bulkFileUpload = bulkUploadContainer.querySelector(\'.file-upload\');\n            const bulkFileInput = bulkUploadContainer.querySelector(\'input[type="file"]\');\n            const bulkFileList = bulkUploadContainer.querySelector(\'.file-list\');\n            \n            bulkFileUpload.addEventListener(\'click\', function() {\n                bulkFileInput.click();\n            });\n            \n            bulkFileInput.addEventListener(\'change\', function() {\n                handleBulkFileSelection(this, bulkFileList);\n            });\n        }\n        \n        // Handle individual file selection\n        function handleFileSelection(input, fileInfo, fileUpload) {\n            if (input.files && input.files[0]) {\n                const file = input.files[0];\n                fileInfo.innerHTML = `\n                    <div class="file-item mt-2">\n                        <i class="fas fa-file-pdf me-2 text-primary"></i>\n                        <span class="file-name">${file.name}</span>\n                        <span class="file-size ms-2 text-muted">(${formatFileSize(file.size)})</span>\n                    </div>\n                `;\n                fileUpload.classList.add(\'file-selected\');\n            } else {\n                fileInfo.innerHTML = \'\';\n                fileUpload.classList.remove(\'file-selected\');\n            }\n        }\n        \n        // Handle bulk file selection\n        function handleBulkFileSelection(input, fileList) {\n            fileList.innerHTML = \'\';\n            \n            if (input.files && input.files.length > 0) {\n                for (let i = 0; i < input.files.length; i++) {\n                    const file = input.files[i];\n                    const fileItem = document.createElement(\'div\');\n                    fileItem.className = \'file-item\';\n                    fileItem.innerHTML = `\n                        <i class="fas fa-file-pdf me-2 text-primary"></i>\n                        <span class="file-name">${file.name}</span>\n                        <span class="file-size ms-2 text-muted">(${formatFileSize(file.size)})</span>\n                    `;\n                    fileList.appendChild(fileItem);\n                }\n            }\n        }\n        \n        // Format file size\n        function formatFileSize(bytes) {\n            if (bytes === 0) return \'0 Bytes\';\n            \n            const k = 1024;\n            const sizes = [\'Bytes\', \'KB\', \'MB\', \'GB\'];\n            const i = Math.floor(Math.log(bytes) / Math.log(k));\n            \n            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \' \' + sizes[i];\n        }\n    });\n $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        const fileCountInput = document.getElementById(\'file_count\');\n        const dynamicFileUploads = document.getElementById(\'dynamic-file-uploads\');\n        const bulkUploadCheckbox = document.getElementById(\'use_multiple_upload\');\n        const bulkUploadContainer = document.getElementById(\'bulk-upload-container\');\n        \n        // Initialize file upload containers\n        setupFileUploadContainers();\n        \n        // Update file upload fields when file count changes\n        fileCountInput.addEventListener(\'change\', function() {\n            updateFileUploadFields();\n        });\n        \n        // Toggle between individual uploads and bulk upload\n        bulkUploadCheckbox.addEventListener(\'change\', function() {\n            if (this.checked) {\n                dynamicFileUploads.style.display = \'none\';\n                bulkUploadContainer.style.display = \'block\';\n                \n                // Make individual file inputs not required\n                const fileInputs = dynamicFileUploads.querySelectorAll(\'input[type="file"]\');\n                fileInputs.forEach(input => {\n                    input.required = false;\n                });\n            } else {\n                dynamicFileUploads.style.display = \'block\';\n                bulkUploadContainer.style.display = \'none\';\n                \n                // Make individual file inputs required again\n                const fileInputs = dynamicFileUploads.querySelectorAll(\'input[type="file"]\');\n                fileInputs.forEach(input => {\n                    input.required = true;\n                });\n            }\n        });\n        \n        // Update file upload fields based on count\n        function updateFileUploadFields() {\n            let count = parseInt(fileCountInput.value);\n            \n            // Enforce min/max constraints\n            if (count < 2) {\n                count = 2;\n                fileCountInput.value = 2;\n            } else if (count > 20) {\n                count = 20;\n                fileCountInput.value = 20;\n            }\n            \n            // Clear existing file upload containers\n            dynamicFileUploads.innerHTML = \'\';\n            \n            // Create file upload containers based on count\n            for (let i = 1; i <= count; i++) {\n                const container = document.createElement(\'div\');\n                container.className = \'file-upload-container mb-3\';\n                container.innerHTML = `\n                    <label class="form-label">File ${i}</label>\n                    <div class="file-upload">\n                        <i class="fas fa-file-pdf file-upload-icon"></i>\n                        <p class="upload-text mb-2">Click to upload PDF</p>\n                        <input type="file" name="file_${i}" accept=".pdf" class="file-input d-none" required>\n                    </div>\n                    <div class="file-info"></div>\n                `;\n                dynamicFileUploads.appendChild(container);\n            }\n            \n            // Setup event listeners for new file upload containers\n            setupFileUploadContainers();\n        }\n        \n        // Setup file upload containers with event listeners\n        function setupFileUploadContainers() {\n            // Setup dynamic file uploads\n            const dynamicContainers = dynamicFileUploads.querySelectorAll(\'.file-upload-container\');\n            dynamicContainers.forEach(container => {\n                const fileUpload = container.querySelector(\'.file-upload\');\n                const fileInput = container.querySelector(\'input[type="file"]\');\n                const fileInfo = container.querySelector(\'.file-info\');\n                \n                fileUpload.addEventListener(\'click\', function() {\n                    fileInput.click();\n                });\n                \n                fileInput.addEventListener(\'change\', function() {\n                    handleFileSelection(this, fileInfo, fileUpload);\n                });\n            });\n            \n            // Setup bulk file upload\n            const bulkFileUpload = bulkUploadContainer.querySelector(\'.file-upload\');\n            const bulkFileInput = bulkUploadContainer.querySelector(\'input[type="file"]\');\n            const bulkFileList = bulkUploadContainer.querySelector(\'.file-list\');\n            \n            bulkFileUpload.addEventListener(\'click\', function() {\n                bulkFileInput.click();\n            });\n            \n            bulkFileInput.addEventListener(\'change\', function() {\n                handleBulkFileSelection(this, bulkFileList);\n            });\n        }\n        \n        // Handle individual file selection\n        function handleFileSelection(input, fileInfo, fileUpload) {\n            if (input.files && input.files[0]) {\n                const file = input.files[0];\n                fileInfo.innerHTML = `\n                    <div class="file-item mt-2">\n                        <i class="fas fa-file-pdf me-2 text-primary"></i>\n                        <span class="file-name">${file.name}</span>\n                        <span class="file-size ms-2 text-muted">(${formatFileSize(file.size)})</span>\n                    </div>\n                `;\n                fileUpload.classList.add(\'file-selected\');\n            } else {\n                fileInfo.innerHTML = \'\';\n                fileUpload.classList.remove(\'file-selected\');\n            }\n        }\n        \n        // Handle bulk file selection\n        function handleBulkFileSelection(input, fileList) {\n            fileList.innerHTML = \'\';\n            \n            if (input.files && input.files.length > 0) {\n                for (let i = 0; i < input.files.length; i++) {\n                    const file = input.files[i];\n                    const fileItem = document.createElement(\'div\');\n                    fileItem.className = \'file-item\';\n                    fileItem.innerHTML = `\n                        <i class="fas fa-file-pdf me-2 text-primary"></i>\n                        <span class="file-name">${file.name}</span>\n                        <span class="file-size ms-2 text-muted">(${formatFileSize(file.size)})</span>\n                    `;\n                    fileList.appendChild(fileItem);\n                }\n            }\n        }\n        \n        // Format file size\n        function formatFileSize(bytes) {\n            if (bytes === 0) return \'0 Bytes\';\n            \n            const k = 1024;\n            const sizes = [\'Bytes\', \'KB\', \'MB\', \'GB\'];\n            const i = Math.floor(Math.log(bytes) / Math.log(k));\n            \n            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \' \' + sizes[i];\n        }\n    });\n</script>\n', PosixPath('templates/pdf_merger.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 7b4fb76d39929acdf4d6ed8eeae4c9a3621fa199d14f192c26baff99aef9cd43d81becf16fe715e70dbcab67ad798b8fc42dbb01c086ff6fe7f497f5b592f005_0
2025-06-07 10:42:11,828 - semgrep.rule_match - DEBUG - match_key = ('\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        const fileCountInput = document.getElementById(\'file_count\');\n        const dynamicFileUploads = document.getElementById(\'dynamic-file-uploads\');\n        const bulkUploadCheckbox = document.getElementById(\'use_multiple_upload\');\n        const bulkUploadContainer = document.getElementById(\'bulk-upload-container\');\n        \n        // Initialize file upload containers\n        setupFileUploadContainers();\n        \n        // Update file upload fields when file count changes\n        fileCountInput.addEventListener(\'change\', function() {\n            updateFileUploadFields();\n        });\n        \n        // Toggle between individual uploads and bulk upload\n        bulkUploadCheckbox.addEventListener(\'change\', function() {\n            if (this.checked) {\n                dynamicFileUploads.style.display = \'none\';\n                bulkUploadContainer.style.display = \'block\';\n                \n                // Make individual file inputs not required\n                const fileInputs = dynamicFileUploads.querySelectorAll(\'input[type="file"]\');\n                fileInputs.forEach(input => {\n                    input.required = false;\n                });\n            } else {\n                dynamicFileUploads.style.display = \'block\';\n                bulkUploadContainer.style.display = \'none\';\n                \n                // Make individual file inputs required again\n                const fileInputs = dynamicFileUploads.querySelectorAll(\'input[type="file"]\');\n                fileInputs.forEach(input => {\n                    input.required = true;\n                });\n            }\n        });\n        \n        // Update file upload fields based on count\n        function updateFileUploadFields() {\n            let count = parseInt(fileCountInput.value);\n            \n            // Enforce min/max constraints\n            if (count < 2) {\n                count = 2;\n                fileCountInput.value = 2;\n            } else if (count > 20) {\n                count = 20;\n                fileCountInput.value = 20;\n            }\n            \n            // Clear existing file upload containers\n            dynamicFileUploads.innerHTML = \'\';\n            \n            // Create file upload containers based on count\n            for (let i = 1; i <= count; i++) {\n                const container = document.createElement(\'div\');\n                container.className = \'file-upload-container mb-3\';\n                container.innerHTML = `\n                    <label class="form-label">File ${i}</label>\n                    <div class="file-upload">\n                        <i class="fas fa-file-pdf file-upload-icon"></i>\n                        <p class="upload-text mb-2">Click to upload PDF</p>\n                        <input type="file" name="file_${i}" accept=".pdf" class="file-input d-none" required>\n                    </div>\n                    <div class="file-info"></div>\n                `;\n                dynamicFileUploads.appendChild(container);\n            }\n            \n            // Setup event listeners for new file upload containers\n            setupFileUploadContainers();\n        }\n        \n        // Setup file upload containers with event listeners\n        function setupFileUploadContainers() {\n            // Setup dynamic file uploads\n            const dynamicContainers = dynamicFileUploads.querySelectorAll(\'.file-upload-container\');\n            dynamicContainers.forEach(container => {\n                const fileUpload = container.querySelector(\'.file-upload\');\n                const fileInput = container.querySelector(\'input[type="file"]\');\n                const fileInfo = container.querySelector(\'.file-info\');\n                \n                fileUpload.addEventListener(\'click\', function() {\n                    fileInput.click();\n                });\n                \n                fileInput.addEventListener(\'change\', function() {\n                    handleFileSelection(this, fileInfo, fileUpload);\n                });\n            });\n            \n            // Setup bulk file upload\n            const bulkFileUpload = bulkUploadContainer.querySelector(\'.file-upload\');\n            const bulkFileInput = bulkUploadContainer.querySelector(\'input[type="file"]\');\n            const bulkFileList = bulkUploadContainer.querySelector(\'.file-list\');\n            \n            bulkFileUpload.addEventListener(\'click\', function() {\n                bulkFileInput.click();\n            });\n            \n            bulkFileInput.addEventListener(\'change\', function() {\n                handleBulkFileSelection(this, bulkFileList);\n            });\n        }\n        \n        // Handle individual file selection\n        function handleFileSelection(input, fileInfo, fileUpload) {\n            if (input.files && input.files[0]) {\n                const file = input.files[0];\n                fileInfo.innerHTML = `\n                    <div class="file-item mt-2">\n                        <i class="fas fa-file-pdf me-2 text-primary"></i>\n                        <span class="file-name">${file.name}</span>\n                        <span class="file-size ms-2 text-muted">(${formatFileSize(file.size)})</span>\n                    </div>\n                `;\n                fileUpload.classList.add(\'file-selected\');\n            } else {\n                fileInfo.innerHTML = \'\';\n                fileUpload.classList.remove(\'file-selected\');\n            }\n        }\n        \n        // Handle bulk file selection\n        function handleBulkFileSelection(input, fileList) {\n            fileList.innerHTML = \'\';\n            \n            if (input.files && input.files.length > 0) {\n                for (let i = 0; i < input.files.length; i++) {\n                    const file = input.files[i];\n                    const fileItem = document.createElement(\'div\');\n                    fileItem.className = \'file-item\';\n                    fileItem.innerHTML = `\n                        <i class="fas fa-file-pdf me-2 text-primary"></i>\n                        <span class="file-name">${file.name}</span>\n                        <span class="file-size ms-2 text-muted">(${formatFileSize(file.size)})</span>\n                    `;\n                    fileList.appendChild(fileItem);\n                }\n            }\n        }\n        \n        // Format file size\n        function formatFileSize(bytes) {\n            if (bytes === 0) return \'0 Bytes\';\n            \n            const k = 1024;\n            const sizes = [\'Bytes\', \'KB\', \'MB\', \'GB\'];\n            const i = Math.floor(Math.log(bytes) / Math.log(k));\n            \n            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \' \' + sizes[i];\n        }\n    });\n $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        const fileCountInput = document.getElementById(\'file_count\');\n        const dynamicFileUploads = document.getElementById(\'dynamic-file-uploads\');\n        const bulkUploadCheckbox = document.getElementById(\'use_multiple_upload\');\n        const bulkUploadContainer = document.getElementById(\'bulk-upload-container\');\n        \n        // Initialize file upload containers\n        setupFileUploadContainers();\n        \n        // Update file upload fields when file count changes\n        fileCountInput.addEventListener(\'change\', function() {\n            updateFileUploadFields();\n        });\n        \n        // Toggle between individual uploads and bulk upload\n        bulkUploadCheckbox.addEventListener(\'change\', function() {\n            if (this.checked) {\n                dynamicFileUploads.style.display = \'none\';\n                bulkUploadContainer.style.display = \'block\';\n                \n                // Make individual file inputs not required\n                const fileInputs = dynamicFileUploads.querySelectorAll(\'input[type="file"]\');\n                fileInputs.forEach(input => {\n                    input.required = false;\n                });\n            } else {\n                dynamicFileUploads.style.display = \'block\';\n                bulkUploadContainer.style.display = \'none\';\n                \n                // Make individual file inputs required again\n                const fileInputs = dynamicFileUploads.querySelectorAll(\'input[type="file"]\');\n                fileInputs.forEach(input => {\n                    input.required = true;\n                });\n            }\n        });\n        \n        // Update file upload fields based on count\n        function updateFileUploadFields() {\n            let count = parseInt(fileCountInput.value);\n            \n            // Enforce min/max constraints\n            if (count < 2) {\n                count = 2;\n                fileCountInput.value = 2;\n            } else if (count > 20) {\n                count = 20;\n                fileCountInput.value = 20;\n            }\n            \n            // Clear existing file upload containers\n            dynamicFileUploads.innerHTML = \'\';\n            \n            // Create file upload containers based on count\n            for (let i = 1; i <= count; i++) {\n                const container = document.createElement(\'div\');\n                container.className = \'file-upload-container mb-3\';\n                container.innerHTML = `\n                    <label class="form-label">File ${i}</label>\n                    <div class="file-upload">\n                        <i class="fas fa-file-pdf file-upload-icon"></i>\n                        <p class="upload-text mb-2">Click to upload PDF</p>\n                        <input type="file" name="file_${i}" accept=".pdf" class="file-input d-none" required>\n                    </div>\n                    <div class="file-info"></div>\n                `;\n                dynamicFileUploads.appendChild(container);\n            }\n            \n            // Setup event listeners for new file upload containers\n            setupFileUploadContainers();\n        }\n        \n        // Setup file upload containers with event listeners\n        function setupFileUploadContainers() {\n            // Setup dynamic file uploads\n            const dynamicContainers = dynamicFileUploads.querySelectorAll(\'.file-upload-container\');\n            dynamicContainers.forEach(container => {\n                const fileUpload = container.querySelector(\'.file-upload\');\n                const fileInput = container.querySelector(\'input[type="file"]\');\n                const fileInfo = container.querySelector(\'.file-info\');\n                \n                fileUpload.addEventListener(\'click\', function() {\n                    fileInput.click();\n                });\n                \n                fileInput.addEventListener(\'change\', function() {\n                    handleFileSelection(this, fileInfo, fileUpload);\n                });\n            });\n            \n            // Setup bulk file upload\n            const bulkFileUpload = bulkUploadContainer.querySelector(\'.file-upload\');\n            const bulkFileInput = bulkUploadContainer.querySelector(\'input[type="file"]\');\n            const bulkFileList = bulkUploadContainer.querySelector(\'.file-list\');\n            \n            bulkFileUpload.addEventListener(\'click\', function() {\n                bulkFileInput.click();\n            });\n            \n            bulkFileInput.addEventListener(\'change\', function() {\n                handleBulkFileSelection(this, bulkFileList);\n            });\n        }\n        \n        // Handle individual file selection\n        function handleFileSelection(input, fileInfo, fileUpload) {\n            if (input.files && input.files[0]) {\n                const file = input.files[0];\n                fileInfo.innerHTML = `\n                    <div class="file-item mt-2">\n                        <i class="fas fa-file-pdf me-2 text-primary"></i>\n                        <span class="file-name">${file.name}</span>\n                        <span class="file-size ms-2 text-muted">(${formatFileSize(file.size)})</span>\n                    </div>\n                `;\n                fileUpload.classList.add(\'file-selected\');\n            } else {\n                fileInfo.innerHTML = \'\';\n                fileUpload.classList.remove(\'file-selected\');\n            }\n        }\n        \n        // Handle bulk file selection\n        function handleBulkFileSelection(input, fileList) {\n            fileList.innerHTML = \'\';\n            \n            if (input.files && input.files.length > 0) {\n                for (let i = 0; i < input.files.length; i++) {\n                    const file = input.files[i];\n                    const fileItem = document.createElement(\'div\');\n                    fileItem.className = \'file-item\';\n                    fileItem.innerHTML = `\n                        <i class="fas fa-file-pdf me-2 text-primary"></i>\n                        <span class="file-name">${file.name}</span>\n                        <span class="file-size ms-2 text-muted">(${formatFileSize(file.size)})</span>\n                    `;\n                    fileList.appendChild(fileItem);\n                }\n            }\n        }\n        \n        // Format file size\n        function formatFileSize(bytes) {\n            if (bytes === 0) return \'0 Bytes\';\n            \n            const k = 1024;\n            const sizes = [\'Bytes\', \'KB\', \'MB\', \'GB\'];\n            const i = Math.floor(Math.log(bytes) / Math.log(k));\n            \n            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \' \' + sizes[i];\n        }\n    });\n</script>\n', PosixPath('templates/pdf_merger.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 7b4fb76d39929acdf4d6ed8eeae4c9a3621fa199d14f192c26baff99aef9cd43d81becf16fe715e70dbcab67ad798b8fc42dbb01c086ff6fe7f497f5b592f005_0
2025-06-07 10:42:11,831 - semgrep.rule_match - DEBUG - match_key = ('\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        const fileCountInput = document.getElementById(\'file_count\');\n        const dynamicFileUploads = document.getElementById(\'dynamic-file-uploads\');\n        const bulkUploadCheckbox = document.getElementById(\'use_multiple_upload\');\n        const bulkUploadContainer = document.getElementById(\'bulk-upload-container\');\n        \n        // Initialize file upload containers\n        setupFileUploadContainers();\n        \n        // Update file upload fields when file count changes\n        fileCountInput.addEventListener(\'change\', function() {\n            updateFileUploadFields();\n        });\n        \n        // Toggle between individual uploads and bulk upload\n        bulkUploadCheckbox.addEventListener(\'change\', function() {\n            if (this.checked) {\n                dynamicFileUploads.style.display = \'none\';\n                bulkUploadContainer.style.display = \'block\';\n                \n                // Make individual file inputs not required\n                const fileInputs = dynamicFileUploads.querySelectorAll(\'input[type="file"]\');\n                fileInputs.forEach(input => {\n                    input.required = false;\n                });\n            } else {\n                dynamicFileUploads.style.display = \'block\';\n                bulkUploadContainer.style.display = \'none\';\n                \n                // Make individual file inputs required again\n                const fileInputs = dynamicFileUploads.querySelectorAll(\'input[type="file"]\');\n                fileInputs.forEach(input => {\n                    input.required = true;\n                });\n            }\n        });\n        \n        // Update file upload fields based on count\n        function updateFileUploadFields() {\n            let count = parseInt(fileCountInput.value);\n            \n            // Enforce min/max constraints\n            if (count < 2) {\n                count = 2;\n                fileCountInput.value = 2;\n            } else if (count > 20) {\n                count = 20;\n                fileCountInput.value = 20;\n            }\n            \n            // Clear existing file upload containers\n            dynamicFileUploads.innerHTML = \'\';\n            \n            // Create file upload containers based on count\n            for (let i = 1; i <= count; i++) {\n                const container = document.createElement(\'div\');\n                container.className = \'file-upload-container mb-3\';\n                container.innerHTML = `\n                    <label class="form-label">File ${i}</label>\n                    <div class="file-upload">\n                        <i class="fas fa-file-pdf file-upload-icon"></i>\n                        <p class="upload-text mb-2">Click to upload PDF</p>\n                        <input type="file" name="file_${i}" accept=".pdf" class="file-input d-none" required>\n                    </div>\n                    <div class="file-info"></div>\n                `;\n                dynamicFileUploads.appendChild(container);\n            }\n            \n            // Setup event listeners for new file upload containers\n            setupFileUploadContainers();\n        }\n        \n        // Setup file upload containers with event listeners\n        function setupFileUploadContainers() {\n            // Setup dynamic file uploads\n            const dynamicContainers = dynamicFileUploads.querySelectorAll(\'.file-upload-container\');\n            dynamicContainers.forEach(container => {\n                const fileUpload = container.querySelector(\'.file-upload\');\n                const fileInput = container.querySelector(\'input[type="file"]\');\n                const fileInfo = container.querySelector(\'.file-info\');\n                \n                fileUpload.addEventListener(\'click\', function() {\n                    fileInput.click();\n                });\n                \n                fileInput.addEventListener(\'change\', function() {\n                    handleFileSelection(this, fileInfo, fileUpload);\n                });\n            });\n            \n            // Setup bulk file upload\n            const bulkFileUpload = bulkUploadContainer.querySelector(\'.file-upload\');\n            const bulkFileInput = bulkUploadContainer.querySelector(\'input[type="file"]\');\n            const bulkFileList = bulkUploadContainer.querySelector(\'.file-list\');\n            \n            bulkFileUpload.addEventListener(\'click\', function() {\n                bulkFileInput.click();\n            });\n            \n            bulkFileInput.addEventListener(\'change\', function() {\n                handleBulkFileSelection(this, bulkFileList);\n            });\n        }\n        \n        // Handle individual file selection\n        function handleFileSelection(input, fileInfo, fileUpload) {\n            if (input.files && input.files[0]) {\n                const file = input.files[0];\n                fileInfo.innerHTML = `\n                    <div class="file-item mt-2">\n                        <i class="fas fa-file-pdf me-2 text-primary"></i>\n                        <span class="file-name">${file.name}</span>\n                        <span class="file-size ms-2 text-muted">(${formatFileSize(file.size)})</span>\n                    </div>\n                `;\n                fileUpload.classList.add(\'file-selected\');\n            } else {\n                fileInfo.innerHTML = \'\';\n                fileUpload.classList.remove(\'file-selected\');\n            }\n        }\n        \n        // Handle bulk file selection\n        function handleBulkFileSelection(input, fileList) {\n            fileList.innerHTML = \'\';\n            \n            if (input.files && input.files.length > 0) {\n                for (let i = 0; i < input.files.length; i++) {\n                    const file = input.files[i];\n                    const fileItem = document.createElement(\'div\');\n                    fileItem.className = \'file-item\';\n                    fileItem.innerHTML = `\n                        <i class="fas fa-file-pdf me-2 text-primary"></i>\n                        <span class="file-name">${file.name}</span>\n                        <span class="file-size ms-2 text-muted">(${formatFileSize(file.size)})</span>\n                    `;\n                    fileList.appendChild(fileItem);\n                }\n            }\n        }\n        \n        // Format file size\n        function formatFileSize(bytes) {\n            if (bytes === 0) return \'0 Bytes\';\n            \n            const k = 1024;\n            const sizes = [\'Bytes\', \'KB\', \'MB\', \'GB\'];\n            const i = Math.floor(Math.log(bytes) / Math.log(k));\n            \n            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \' \' + sizes[i];\n        }\n    });\n $X $X. ... .$V = "..." $X. ... .innerHTML = ... $X. ... .outerHTML = ... javascript <script ...>\n    document.addEventListener(\'DOMContentLoaded\', function() {\n        const fileCountInput = document.getElementById(\'file_count\');\n        const dynamicFileUploads = document.getElementById(\'dynamic-file-uploads\');\n        const bulkUploadCheckbox = document.getElementById(\'use_multiple_upload\');\n        const bulkUploadContainer = document.getElementById(\'bulk-upload-container\');\n        \n        // Initialize file upload containers\n        setupFileUploadContainers();\n        \n        // Update file upload fields when file count changes\n        fileCountInput.addEventListener(\'change\', function() {\n            updateFileUploadFields();\n        });\n        \n        // Toggle between individual uploads and bulk upload\n        bulkUploadCheckbox.addEventListener(\'change\', function() {\n            if (this.checked) {\n                dynamicFileUploads.style.display = \'none\';\n                bulkUploadContainer.style.display = \'block\';\n                \n                // Make individual file inputs not required\n                const fileInputs = dynamicFileUploads.querySelectorAll(\'input[type="file"]\');\n                fileInputs.forEach(input => {\n                    input.required = false;\n                });\n            } else {\n                dynamicFileUploads.style.display = \'block\';\n                bulkUploadContainer.style.display = \'none\';\n                \n                // Make individual file inputs required again\n                const fileInputs = dynamicFileUploads.querySelectorAll(\'input[type="file"]\');\n                fileInputs.forEach(input => {\n                    input.required = true;\n                });\n            }\n        });\n        \n        // Update file upload fields based on count\n        function updateFileUploadFields() {\n            let count = parseInt(fileCountInput.value);\n            \n            // Enforce min/max constraints\n            if (count < 2) {\n                count = 2;\n                fileCountInput.value = 2;\n            } else if (count > 20) {\n                count = 20;\n                fileCountInput.value = 20;\n            }\n            \n            // Clear existing file upload containers\n            dynamicFileUploads.innerHTML = \'\';\n            \n            // Create file upload containers based on count\n            for (let i = 1; i <= count; i++) {\n                const container = document.createElement(\'div\');\n                container.className = \'file-upload-container mb-3\';\n                container.innerHTML = `\n                    <label class="form-label">File ${i}</label>\n                    <div class="file-upload">\n                        <i class="fas fa-file-pdf file-upload-icon"></i>\n                        <p class="upload-text mb-2">Click to upload PDF</p>\n                        <input type="file" name="file_${i}" accept=".pdf" class="file-input d-none" required>\n                    </div>\n                    <div class="file-info"></div>\n                `;\n                dynamicFileUploads.appendChild(container);\n            }\n            \n            // Setup event listeners for new file upload containers\n            setupFileUploadContainers();\n        }\n        \n        // Setup file upload containers with event listeners\n        function setupFileUploadContainers() {\n            // Setup dynamic file uploads\n            const dynamicContainers = dynamicFileUploads.querySelectorAll(\'.file-upload-container\');\n            dynamicContainers.forEach(container => {\n                const fileUpload = container.querySelector(\'.file-upload\');\n                const fileInput = container.querySelector(\'input[type="file"]\');\n                const fileInfo = container.querySelector(\'.file-info\');\n                \n                fileUpload.addEventListener(\'click\', function() {\n                    fileInput.click();\n                });\n                \n                fileInput.addEventListener(\'change\', function() {\n                    handleFileSelection(this, fileInfo, fileUpload);\n                });\n            });\n            \n            // Setup bulk file upload\n            const bulkFileUpload = bulkUploadContainer.querySelector(\'.file-upload\');\n            const bulkFileInput = bulkUploadContainer.querySelector(\'input[type="file"]\');\n            const bulkFileList = bulkUploadContainer.querySelector(\'.file-list\');\n            \n            bulkFileUpload.addEventListener(\'click\', function() {\n                bulkFileInput.click();\n            });\n            \n            bulkFileInput.addEventListener(\'change\', function() {\n                handleBulkFileSelection(this, bulkFileList);\n            });\n        }\n        \n        // Handle individual file selection\n        function handleFileSelection(input, fileInfo, fileUpload) {\n            if (input.files && input.files[0]) {\n                const file = input.files[0];\n                fileInfo.innerHTML = `\n                    <div class="file-item mt-2">\n                        <i class="fas fa-file-pdf me-2 text-primary"></i>\n                        <span class="file-name">${file.name}</span>\n                        <span class="file-size ms-2 text-muted">(${formatFileSize(file.size)})</span>\n                    </div>\n                `;\n                fileUpload.classList.add(\'file-selected\');\n            } else {\n                fileInfo.innerHTML = \'\';\n                fileUpload.classList.remove(\'file-selected\');\n            }\n        }\n        \n        // Handle bulk file selection\n        function handleBulkFileSelection(input, fileList) {\n            fileList.innerHTML = \'\';\n            \n            if (input.files && input.files.length > 0) {\n                for (let i = 0; i < input.files.length; i++) {\n                    const file = input.files[i];\n                    const fileItem = document.createElement(\'div\');\n                    fileItem.className = \'file-item\';\n                    fileItem.innerHTML = `\n                        <i class="fas fa-file-pdf me-2 text-primary"></i>\n                        <span class="file-name">${file.name}</span>\n                        <span class="file-size ms-2 text-muted">(${formatFileSize(file.size)})</span>\n                    `;\n                    fileList.appendChild(fileItem);\n                }\n            }\n        }\n        \n        // Format file size\n        function formatFileSize(bytes) {\n            if (bytes === 0) return \'0 Bytes\';\n            \n            const k = 1024;\n            const sizes = [\'Bytes\', \'KB\', \'MB\', \'GB\'];\n            const i = Math.floor(Math.log(bytes) / Math.log(k));\n            \n            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + \' \' + sizes[i];\n        }\n    });\n</script>\n', PosixPath('templates/pdf_merger.html'), 'config..semgrep.vendored-rules.html.security.audit.insecure-document-method') match_id = 7b4fb76d39929acdf4d6ed8eeae4c9a3621fa199d14f192c26baff99aef9cd43d81becf16fe715e70dbcab67ad798b8fc42dbb01c086ff6fe7f497f5b592f005_0
2025-06-07 10:42:11,831 - semgrep.rule_match - DEBUG - match_key = ('', PosixPath('utils/media_utils.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = d4594a317d62eaedbbd8a9b19957492dc74c4c4ff984d9c67679e3ab187455f1abacc86702b2195d20fa6b3871f180e94e368900b3f6c5ea9aebb0b19878d6a9_0
2025-06-07 10:42:11,832 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.run(*$ARR, ...) subprocess.run([*$ARR, ...]) subprocess.run("...", ...) subprocess.run(("...",...), ...) subprocess.run(...) subprocess.run(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.run("=~/(python)/","...",...) subprocess.run("=~/(python)/",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.run(("=~/(python)/","...",...),...) subprocess.run(("=~/(python)/",...),...) subprocess.run(["=~/(python)/",...],...) subprocess.run(["=~/(python)/","...",...],...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('utils/media_utils.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = e15f41cf73e6d05089dc68af241779f2caeaf48a59d8596e52375a5fba33e195b01a38ea02503d186be012808dbd50f6b36faacd03f31474bd8153be9fc3bb97_0
2025-06-07 10:42:11,833 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.run(*$ARR, ...) subprocess.run([*$ARR, ...]) subprocess.run("...", ...) subprocess.run(("...",...), ...) subprocess.run(...) subprocess.run(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.run("=~/(python)/","...",...) subprocess.run("=~/(python)/",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.run(("=~/(python)/","...",...),...) subprocess.run(("=~/(python)/",...),...) subprocess.run(["=~/(python)/",...],...) subprocess.run(["=~/(python)/","...",...],...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('utils/media_utils.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = e15f41cf73e6d05089dc68af241779f2caeaf48a59d8596e52375a5fba33e195b01a38ea02503d186be012808dbd50f6b36faacd03f31474bd8153be9fc3bb97_0
2025-06-07 10:42:11,833 - semgrep.rule_match - DEBUG - match_key = ('$ARR = ["=~/(sh|bash|ksh|csh|tcsh|zsh)/", "-c", ...]\n...\n $ARR = [...]\n...\n subprocess.run(*$ARR, ...) subprocess.run([*$ARR, ...]) subprocess.run("...", ...) subprocess.run(("...",...), ...) subprocess.run(...) subprocess.run(["...",...], ...) subprocess.CalledProcessError(...) subprocess.SubprocessError(...) subprocess.run("=~/(python)/","...",...) subprocess.run("=~/(python)/",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...) subprocess.run("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...) subprocess.run(("=~/(python)/","...",...),...) subprocess.run(("=~/(python)/",...),...) subprocess.run(["=~/(python)/",...],...) subprocess.run(["=~/(python)/","...",...],...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...),...) subprocess.run(("=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...),...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c",...],...) subprocess.run(["=~/(sh|bash|ksh|csh|tcsh|zsh)/","-c","...",...],...)', PosixPath('utils/media_utils.py'), 'config..semgrep.vendored-rules.python.lang.security.audit.dangerous-subprocess-use-audit') match_id = e15f41cf73e6d05089dc68af241779f2caeaf48a59d8596e52375a5fba33e195b01a38ea02503d186be012808dbd50f6b36faacd03f31474bd8153be9fc3bb97_0
2025-06-07 10:42:11,837 - semgrep.core_runner - DEBUG - semgrep ran in 0:00:25.494588 on 149 files
2025-06-07 10:42:11,839 - semgrep.core_runner - DEBUG - findings summary: 29 warning, 126 error, 0 info
2025-06-07 10:42:11,843 - semgrep.app.auth - DEBUG - Getting API token from settings file
2025-06-07 10:42:11,843 - semgrep.app.auth - DEBUG - No API token found in settings file
2025-06-07 10:42:11,848 - semgrep.semgrep_core - DEBUG - Failed to open resource semgrep-core-proprietary: [Errno 2] No such file or directory: '/tmp/_MEI1tC4jH/semgrep/bin/semgrep-core-proprietary'.
2025-06-07 10:42:12,002 - semgrep.output - VERBOSE - 
========================================
Files skipped:
========================================

  Always skipped by Opengrep:

   • <none>

  Skipped by .gitignore:
  (Disable by passing --no-git-ignore)

   • <all files not listed by `git ls-files` were skipped>

  Skipped by .semgrepignore:
  - https://semgrep.dev/docs/ignoring-files-folders-code/#understand-semgrep-defaults

   • <none>

  Skipped by --include patterns:

   • <none>

  Skipped by --exclude patterns:

   • <none>

  Files skipped due to insufficient read permissions:

   • <none>

  Skipped by limiting to files smaller than 1000000 bytes:
  (Adjust with the --max-target-bytes flag)

   • attached_assets/ChatGPT Image Apr 21, 2025, 12_02_36 PM_1745217215527.png
   • attached_assets/DataAnalyzerPro/attached_assets/ChatGPT Image Apr 21, 2025, 12_02_36 PM_1745217215527.png
   • attached_assets/DataAnalyzerPro/temp/1ba899ab-9188-4db7-9ab3-0eefe07d13b2/ChatGPT_Image_Apr_21_2025_12_02_36_PM.png
   • attached_assets/DataAnalyzerPro/temp/38ce63a0-5f61-44ec-8960-fa092bcac02b/Abhyudaya_1980_01_01_Volume_No_Xx_Issue.p
     df
   • attached_assets/DataAnalyzerPro/temp/38ce63a0-5f61-44ec-8960-fa092bcac02b/merged_document.pdf
   • attached_assets/DataAnalyzerPro/temp/7ce8647f-8190-4549-8ade-a764b7a3c329/Abhyudaya_1980_01_01_Volume_No_Xx_Issue.p
     df
   • attached_assets/DataAnalyzerPro/temp/c18e3c84-0613-4fef-9c53-d49195ebd012/ChatGPT_Image_Apr_21_2025_03_30_36_PM.png
   • attached_assets/DataAnalyzerPro/temp/f1c24f00-324f-40ec-8741-d5843a2578b4/ChatGPT_Image_Apr_21_2025_12_02_36_PM.png
   • attached_assets/ReplitExport-kodambhagath.tar_1749282278157.gz
   • temp/1ba899ab-9188-4db7-9ab3-0eefe07d13b2/ChatGPT_Image_Apr_21_2025_12_02_36_PM.png
   • temp/38ce63a0-5f61-44ec-8960-fa092bcac02b/Abhyudaya_1980_01_01_Volume_No_Xx_Issue.pdf
   • temp/38ce63a0-5f61-44ec-8960-fa092bcac02b/merged_document.pdf
   • temp/7ce8647f-8190-4549-8ade-a764b7a3c329/Abhyudaya_1980_01_01_Volume_No_Xx_Issue.pdf
   • temp/c18e3c84-0613-4fef-9c53-d49195ebd012/ChatGPT_Image_Apr_21_2025_03_30_36_PM.png
   • temp/f1c24f00-324f-40ec-8741-d5843a2578b4/ChatGPT_Image_Apr_21_2025_12_02_36_PM.png

  Partially analyzed due to parsing or internal Opengrep errors

   • attached_assets/DataAnalyzerPro/templates/ai_assistant.html (9 lines skipped)
   • attached_assets/DataAnalyzerPro/templates/ai_excel_editor.html (7 lines skipped)
   • attached_assets/DataAnalyzerPro/templates/auth/edit_profile.html (6 lines skipped)
   • attached_assets/DataAnalyzerPro/templates/auth/login.html (6 lines skipped)
   • attached_assets/DataAnalyzerPro/templates/auth/profile.html (6 lines skipped)
   • attached_assets/DataAnalyzerPro/templates/auth/register.html (6 lines skipped)
   • attached_assets/DataAnalyzerPro/templates/background_remover.html (6 lines skipped)
   • attached_assets/DataAnalyzerPro/templates/doc_converter.html (6 lines skipped)
   • attached_assets/DataAnalyzerPro/templates/editor/certificate_editor.html (12 lines skipped)
   • attached_assets/DataAnalyzerPro/templates/image_compressor.html (6 lines skipped)
   • attached_assets/DataAnalyzerPro/templates/image_converter.html (6 lines skipped)
   • attached_assets/DataAnalyzerPro/templates/index.html (7 lines skipped)
   • attached_assets/DataAnalyzerPro/templates/mb_gb_converter.html (6 lines skipped)
   • attached_assets/DataAnalyzerPro/templates/media/audio_to_video.html (6 lines skipped)
   • attached_assets/DataAnalyzerPro/templates/pages/about.html (9 lines skipped)
   • attached_assets/DataAnalyzerPro/templates/pages/blog.html (12 lines skipped)
   • attached_assets/DataAnalyzerPro/templates/pages/faq.html (11 lines skipped)
   • attached_assets/DataAnalyzerPro/templates/pages/features.html (10 lines skipped)
   • attached_assets/DataAnalyzerPro/templates/pages/pricing.html (9 lines skipped)
   • attached_assets/DataAnalyzerPro/templates/pages/support.html (14 lines skipped)
   • attached_assets/DataAnalyzerPro/templates/pdf_merger.html (9 lines skipped)
   • attached_assets/DataAnalyzerPro/templates/pdf_pages_recovery.html (6 lines skipped)
   • attached_assets/DataAnalyzerPro/templates/security/pdf_protect.html (13 lines skipped)
   • attached_assets/DataAnalyzerPro/templates/watermark_remover.html (3 lines skipped)
   • templates/ai_assistant.html (9 lines skipped)
   • templates/ai_excel_editor.html (7 lines skipped)
   • templates/auth/edit_profile.html (6 lines skipped)
   • templates/auth/login.html (6 lines skipped)
   • templates/auth/profile.html (6 lines skipped)
   • templates/auth/register.html (6 lines skipped)
   • templates/background_remover.html (6 lines skipped)
   • templates/doc_converter.html (6 lines skipped)
   • templates/editor/certificate_editor.html (12 lines skipped)
   • templates/image_compressor.html (6 lines skipped)
   • templates/image_converter.html (6 lines skipped)
   • templates/index.html (4 lines skipped)
   • templates/mb_gb_converter.html (6 lines skipped)
   • templates/media/audio_to_video.html (6 lines skipped)
   • templates/pages/about.html (9 lines skipped)
   • templates/pages/blog.html (12 lines skipped)
   • templates/pages/faq.html (11 lines skipped)
   • templates/pages/features.html (10 lines skipped)
   • templates/pages/pricing.html (9 lines skipped)
   • templates/pages/support.html (14 lines skipped)
   • templates/pdf_merger.html (9 lines skipped)
   • templates/pdf_pages_recovery.html (6 lines skipped)
   • templates/security/pdf_protect.html (13 lines skipped)
   • templates/watermark_remover.html (6 lines skipped)

2025-06-07 10:42:12,003 - semgrep.output - INFO - Some files were skipped or only partially analyzed.
  Scan was limited to files tracked by git.
  Partially scanned: 48 files only partially analyzed due to parsing or internal Opengrep errors
  Scan skipped: 15 files larger than 1.0 MB
  For a full list of skipped files, run opengrep with the --verbose flag.

Ran 681 rules on 149 files: 155 findings.
2025-06-07 10:42:12,004 - semgrep.app.version - DEBUG - Version cache does not exist
2025-06-07 10:42:12,004 - semgrep.app.version - DEBUG - Version cache does not exist
2025-06-07 10:42:12,023 - semgrep.metrics - VERBOSE - Not sending pseudonymous metrics since metrics are configured to OFF and registry usage is False
